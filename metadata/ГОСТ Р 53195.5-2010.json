{
    "filename": "ГОСТ Р 53195.5-2010.pdf",
    "full_name": "Безопасность функциональная связанных с безопасностью зданий и сооружений систем. Часть 5. Меры по снижению риска, методы оценки",
    "number": "53195.5-2010",
    "date_issue": "2011",
    "document_type": "ГОСТ Р",
    "language": "Russian",
    "category": "Безопасность",
    "source": "51039.pdf",
    "total_pages": 86,
    "status": "Неопределен",
    "pages": [
        {
            "page": 1,
            "page_content": "ФЕДЕРАЛЬНОЕ АГЕНТСТВО\nПО ТЕХНИЧЕСКОМУ РЕГУЛИРОВАНИЮ И МЕТРОЛОГИИ\nН А Ц И О Н А Л Ь Н Ы Й\nС Т А Н Д А Р Т\nР О С С И Й С К О Й\nФ Е Д Е Р А Ц И И\nГОСТ Р \n53195.5 —\n \n2010\nБЕЗОПАСНОСТЬ ФУНКЦИОНАЛЬНАЯ \nСВЯЗАННЫХ С БЕЗОПАСНОСТЬЮ ЗДАНИЙ \nИ СООРУЖЕНИЙ СИСТЕМ\nЧ а с т ь  5\nМеры по снижению риска, методы оценки\nИздание официальное\nСтев д г п и фпри\n2011\nсертификат на автомобиль"
        },
        {
            "page": 2,
            "page_content": "ГОСТ Р 53195.5—2010\nПредисловие\nЦели и принципы стандартизации в Российской Федерации установлены Федеральным законом \nот 27 декабря 2002 г. N<? 184-ФЗ «О техническом регулировании», а правила применения национальных \nстандартов Российской Федерации — ГОСТ Р 1.0 — 2004 «Стандартизация в Российской Федерации. \nОсновные положения»\nСведения о стандарте\n1 РАЗРАБОТАН Университетом комплексных систем безопасности и инженерного обеспечения\n2 ВНЕСЕН Техническим комитетом по стандартизации ТК 439 «Средства автоматизации и системы \nуправления» при поддержке Технического комитета по стандартизации ТК 465 «Строительство»\n3 УТВЕРЖДЕН И ВВЕДЕН В ДЕЙСТВИЕ Приказом Федерального агентства по техническому регули­\nрованию и метрологии от 21 декабря 2010 г. No 821-ст\n4 В настоящем стандарте использованы основные нормативные положения следующих междуна­\nродных стандартов:\nМЭК 61508-4:2010 «Функциональная безопасность систем электрических, электронных, програм­\nмируемых электронных, связанных с безопасностью. Часть 4. Термины, определения, сокращения» \n(IEC 61508-4:2010 «Functional safety of electrical/ electronic/ programmable electronic safety-related systems \n— Part 4: Definitions and abbreviations»);\nМЭК 61508-7:2010 Функциональная безопасность систем электрических, электронных, программиру­\nемых электронных, связанных с безопасностью. Часть 7. Обзор методов и средств (IEC 61508-7:2010 \n«Functional safety of electrical/ electronic/ programmable electronic safety-related systems — Part 7: Overview of \ntechniques and measures»);\nРуководство ИСО/МЭК 51:1999 Аспекты безопасности. Руководящие указания по включению их в \nстандарты (ISO/IEC Guide 51:1999 «Safety aspects — Guidelines for their inclusion in standards»)\n5 ВВЕДЕН ВПЕРВЫЕ\nИнформация об изменениях к настоящему стандарту публикуется в ежегодно издаваемом инфор­\nмационном указателе «Национальные стандарты». а текст изменений и поправок — в ежемесячно \nиздаваемых информационных указателях «Национальные стандарты». В случав пересмотра (замены) \nили отмены настоящего стандарта соответствующее уведошвние будет опубликовано в ежемесяч­\nно издаваемом информационном указателе «Национальные стандарты». Соответствующая инфор­\nмация. уведомление и тексты размещаются также в информационно системе общего пользования— \nна официалыюм сайте Федерального агентства по техническому регулированию и метрологии в сети \nИнтернет\n© Стандартинфсрм. 2011\nНастоящий стандарт не может быть полностью или частично воспроизведен, тиражирован и распро­\nстранен в качестве официального издания без разрешения Федерального агентства по техническому регу­\nлированию и метрологии"
        },
        {
            "page": 3,
            "page_content": "ГОСТР 53195.5—2010\nСодержание\n1 Область применения................................................................................................................................ \n1\n2 Нормативные с с ы л ки ........................................... .................................................................................. \n1\n3 Термины и определения..........................................................................................................................\n4 Обозначения и сокращения....................................................................................................................\n5 Меры (методы/средства) по снижению р и ска ......................................................................................\n6 Методы оценки..........................................................................................................................................\nПриложение А (справочное) Методы и средства для Е/Е/РЕ СБЗС-систем: контроль случайных\nотказов АС (см. ГОСТ Р 53195.3).................................................................................... \n5\nПриложение Б (справочное) Методы/средства для исключения систематических отказов СБЗС-\nсистем (см. ГОСТ Р 53195.3 и ГОСТ Р 53195.4)............................................................  \n22\nПриложение В (справочное) Методы/средства для достижения полноты безопасности программного\nобеспечения (см. ГОСТ Р 53195.4).................................................................................. \n34\nПриложение Г (справочное) Методы оценки. Вероятностный подход к определению полноты безо­\nпасности предварительно разработанных программных средств............................... \n66\nБиблиография...............................................................................................................................................  \n70\nШ\nЬ  Л  W N"
        },
        {
            "page": 4,
            "page_content": "ГОСТ Р 53195.5—2010\nВведение\nСовременные здания и сооружения — объекты капитального строительства — представляют собой \nсложные системы, включающие в свой состав систему конструкций и ряд систем в разных сочетаниях, \nв том числе инженерные системы жизнеобеспечения, реализации технологических процесссов. энерго-, \nресурсосбережения, безопасности и другие системы. Эти системы взаимодействуют друг с другом, с внеш­\nней и внутренней средами.\nОбъекты капитального строительства жестко привязаны к местности. Рабочие характеристики зданий, \nсооружений и входящих в них систем могут быть реализованы, проверены и использованы только в том \nместе, в котором объекты построены и системы установлены.\nБезопасность зданий и сооружений обеспечивается применением совокупности мер. мероприятий \nи средств снижения риска причинения вреда до уровня приемлемого риска и поддержания его в течение \nпериода эксплуатации или использования этих объектов. К средствам снижения риска относятся \nсистемы, связанные с безопасностью зданий и сооружений. Эти системы, состоящие из электрических \nи/или электронных компонентов, и/или программируемых электронных компонентов, в течение многих лет \nиспользуются для выполнения функций безопасности. Для решения задач безопасности зданий и сооруже­\nний во все ббльших объемах используются программируемые электронные (компьютерные) системы.\nВ настоящем стандарте установлены цели основных методов/средств. рекомендованных к примене­\nнию в ГОСТ Р 53195.3 и ГОСТ Р 53195.4 для анализа и снижения риска, достижения и поддержания \nнеобходимого уровня функциональной безопасности аппаратных средств (АС) и программного обеспече­\nния (ПО) электрических, электронных, программируемых электронных (Е/Е/РЕ) связанных с безопаснос­\nтью зданий и сооружений систем (СБЗС-систем) на различных стадиях их жизненного цикла, а также для \nоценки соответствия систем требованиям безопасности в рамках области применения ГОСТ Р 53195.1. \nГОСТ Р 53195.2. ГОСТ Р 53195.3 и ГОСТ Р 53195.4. В нем приведены краткие описания указанных \nметодов/средств, а также даны ссылки на источники, содержащие их полные описания.\nНастоящий стандарт входит в комплекс стандартов с наименованием «Безопасность функциональ­\nная связанных с безопасностью зданий и сооружений систем» и является пятым стандартом этого \nкомплекса «Часть 5. Меры по снижению риска, методы оценки». Другие стандарты, входящие в этот \nкомплекс.\nЧасть 1. Основные положения;\nЧасть 2. Общие требования;\nЧасть 3. Требования к системам:\nЧасть 4. Требования к программному обеспечению;\nЧасть 6. Внешние средства уменьшения риска, системы мониторинга.\nЧасть 7. Порядок применения требований к системам и примеры расчетов.\nСтруктура комплекса стандартов приведена ниже.\nIV"
        },
        {
            "page": 5,
            "page_content": "ГОСТ Р 53195.5—2010\nV"
        },
        {
            "page": 6,
            "page_content": " "
        },
        {
            "page": 7,
            "page_content": "ГОСТ Р 53195.5— 2010\nН А Ц И О Н А Л Ь Н Ы Й  С Т А Н Д А Р Т  Р О С С И Й С К О Й  Ф Е Д Е Р А Ц И И\nБЕЗОПАСНОСТЬ ФУНКЦИОНАЛЬНАЯ \nСВЯЗАННЫХ С БЕЗОПАСНОСТЬЮ ЗДАНИЙ И СООРУЖЕНИЙ СИСТЕМ\nЧ а с т ь  5\nМеры по снижению риска, методы оценки\nFunctional safety of building/erection safety-related systems.\nPart 5. Techniques and measures on risk reduction, estimation methods\nДата введения — 2012 — 01 — 01\n1 Область применения\nНастоящий стандарт распространяется на связанные с безопасностью зданий и сооружений систе­\nмы (далее — СБЗС-системы), аппаратные средства (далее — АС) и/или программное обеспечение \n(далее — ПО), являющиеся частями СБЗС-системы либо используемые для разработки СБЗС-систем \nв рамках областей применения ГОСТ Р 53195.1. ГОСТ Р 53195.2, ГОСТ Р 53195.3 и ГОСТ Р 53195.4.\nНастоящий стандарт применяется совместно со стандартами ГОСТ Р 53195.1. ГОСТ Р 53195.2. \nГОСТ Р 53195.3 и ГОСТ Р 53195.4.\nНастоящий стандарт устанавливает основные метод ы/средства, используемые для выполнения тре­\nбований ГОСТ Р 53195.3 и ГОСТ Р 53195.4, и методы оценки соответствия.\nНастоящий стандарт содержит краткие описания методов/средств. рекомендуемых в ГОСТ Р 53195.3 \nи ГОСТ Р 53195.4 и применяемых на различных стадиях жизненных циклов СБЗС-систем. их АС и ПО для \nснижения рисков, а также ссылки на источники с полным описанием этих методов/средств.\nП р и м е ч а н и е  — Под «методами'средствами» в настоящем стандарте понимаются методы и/йли \nсредства. В большинстве методов/средств. описанных в приложениях А. Б. В и Г. метод состоит в применении того \nили иного аппаратного, программного или аппаратно-программного средства или средств, в применении логи­\nческих или математических действий (которые выполняются с использованием средств информатики и матема­\nтики). В отдельных случаях рассматриваются методы или средства в чистом виде.\nНастоящий стандарт не распространяется на одиночные СБЗС-системы. способные осуществить \nнеобходимое снижение риска и требуемая полнота безопасности которых ниже самого низкого уровня \nполноты безопасности (SIL1). определенного в таблицах 1 и 2 ГОСТ Р 53195.2. Он не распространяется \nтакже на здания и сооружения, оснащенные такими системами или не имеющие никаких связанных с \nбезопасностью систем.\n2 Нормативные ссылки\nВ настоящем стандарте использованы нормативные ссылки на следующие стандарты:\nГОСТ Р ИСО 9000—2005 Системы менеджмента качества. Основные положения и словарь\nГОСТ Р ИСО 9001—2008 Системы менеджмента качества. Требования\nГОСТ Р ИСО 10006—2005 Системы менеджмента качества. Руководство по менеджменту качества \nпри проектировании\nГОСТ Р ИСО/МЭК16085-2007 Менеджмент риска. Применение в процессах жизненного цикла систем \nи программного обеспечения\nИздание официальное\n1"
        },
        {
            "page": 8,
            "page_content": "ГОСТ Р 53195.5—2010\nГОСТ Р 51700—2000 Совместимость технических средств электромагнитная. Технические сред­\nства. подключаемые к симметричным линиям. Параметры асимметрии относительно земли. Схемы \nизмерений\nГОСТ Р 51904—2002 Программное обеспечение встроенных систем. Общие требования к разработке \nи документированию\nГОСТ Р 53195.1—2008 Безопасность функциональная связанных с безопасностью зданий и сооруже­\nний систем. Часть 1. Основные положения\nГОСТ Р 53195.2—2008 Безопасность функциональная связанных с безопасностью зданий и сооруже­\nний систем. Часть 2. Общие требования\nГОСТ Р 53195.3—2009 Безопасность функциональная связанных с безопасностью зданий и сооруже­\nний систем. Часть 3. Требования к системам\nГОСТ Р 53195.4— 2010 Безопасность функциональная связанных с безопасностью зданий и сооруже­\nний систем. Часть 4. Требования к программному обеспечению\nГОСТ Р МЭК 61160—2006 Менеджмент риска. Формальный анализ проекта\nГОСТ 27.310—95 Надежность в технике. Анализ видов, последствий и критичности отказов. Основ­\nные положения\nГОСТ 13661—92 Совместимость технических средств электромагнитная. Пассивные помехоподав­\nляющие фильтры и элементы. Методы измерения вносимого затухания\nГОСТ 16962.2—90 Изделия электротехнические. Методы испытаний на стойкость к механическим \nвнешним воздействующим факторам\nГОСТ 30382—95 Совместимость технических средств электромагнитная. Дроссели помехоподавля­\nющие. Общие технические условия\nП р и м е ч а н и е  — При пользовании настоящим стандартом целесообразно проверить действие ссылоч­\nных стандартов в информационной системе общего пользования — на официальном сайте Федерального агент­\nства по техническому регулированию и метрологии в сети Интернет или по ежегодно издаваемому информацион­\nному указателю вНациональные стандарты», который опубликован по состоянию на 1 января текущего года, и по \nсоответствующим ежемесячно издаваемым информационным указателям, опубликованным в текущем году. Если \nссылочный стандарт заменен (изменен), то при пользовании настоящим стандартом следует руководствоваться \nзаменяющим (измененным) стандартом. Если ссылочный стандарт отменен без замены, то положение, в кото­\nром дана ссылка на него, применяется в части, не затрагивающей эту ссылку.\n3 Термины и определения\nВ настоящем стандарте применены термины по ГОСТ Р 53195.1. ГОСТ Р 53195.2. ГОСТ Р 53195.3 и \nГОСТ Р 53195.4. а также приведенные ниже термины с определениями.\n3.1 антивалентные сигналы (antivalent signals): Два сигнала с одинаковым информационным \nсодержанием, передаваемые по каналам связи в инверсной форме {аналоговые сигналы — в противофазе, \nцифровые сигналы — с инверсией 0 в 1 или наоборот).\n3.2 константная неисправность (stuck-at fault): Неисправность аппаратного средства, вызванная \nпереходом элемента устройства в одно из неизменяемых состояний, например, при «залипании» контактов \nреле.\n3.3 константный отказ (stuck-at failure): Отказ аппаратного средства и/или программного обеспече­\nния. приводящий к переходу аппаратного средства в одно из неизменяемых состояний и/или выдаче на \nвыходе неизменяемых данных или неизменяемой команды.\n3.4 постепенный отказ (drift failure): Отказ аппаратного средства из-за постепенного выхода его \nхарактеристик за допустимые пределы.\n3.5 самоустраняющийся отказ (transient failure): Отказ, обусловленный переходными процессами, \nустраняющийся по их завершении.\n3.6 условная тревога (conditional alarm): Состояние, близкое к тревожному, но еще не влекущее \nопасных последствий.\nП р и м е ч а н и е  — Термин относится к СБЗС-системам. в которых предусмотрено ступенчатое реагирова­\nние на постепенно развивающиеся тревожные события.\n3.7 чрезвычайное действие (emergency action): Действие, требующее выполнения при возникно­\nвении чрезвычайной ситуации для снижения риска причинения вреда.\n2"
        },
        {
            "page": 9,
            "page_content": "ГОСТР 53195.5—2010\n4 Обозначения и сокращения\nВ настоящем стандарте приняты следующие обозначения и сокращения:\nАС \n— апларатное{ые) средство<а);\nЕ/Е/РЕ \n— электрический(ая. ое), \nэлектронный(ая. ое). \nпрограммируемый(ая, ое) электрон-\nный(ая. ое) — в отношении модуля, устройства или системы:\nИС \n— интегральмая(ые) микросхема(ы);\nОЗУ \n— оперативное запоминающее устройство (устройство памяти с произвольным доступом):\nОКС \n— Общероссийский классификатор стандартов:\nПЗУ \n— постоянное запоминающее устройство:\nПЛК \n— программируемый логический контроллер;\nПО \n— программное обеспечение.\nППЗУ \n— перепрограммируемое постоянное запоминающее устройство;\nСАПР \n— система автоматизированного проектирования.\nСБЗС-система — система, связанная с безопасностью зданий и сооружений.\nУО \n— управляемое оборудование:\nADA \n— язык программирования для встраиваемых систем, разработанный в 1979—1980 годах\nв США и названный в честь Ады Лавлэйс;\nADT\nCCS\nCHAZOP\nCHAZOPs\nCIRCAL\nCORE\nCRC\nCSP\nEDC\nE/E/PES\nFMEA\nFTA\nHAZOP\nHOL\nINMOS\nJSD\nLCSAJ\nLOTOS\nMASCOT\nMCDC\nMTBF\nOBJ\n— обозначение данных абстрактного типа (от англ, abstract data type);\n— наименование метода/средства расчета соединяющихся систем (от англ, calculus of \ncommunicating system):\n— наименование метода/средства обеспечения безопасности и работоспособности систем \nуправления (от англ, control hazards operability);\n— наименование метода/средства анализа безопасности работы компьютеров (от англ. \ncomputer hazardous operation analysis);\n— наименование метода/средства расчета критических цепей (от англ, circuit calculus);\n— наименование метода/средства выражения контролируемых требований (от англ, controlled \nrequirements expression);\n— циклический избыточный код коррекции ошибок (от англ, cyclic redandency check);\n— наименование метода/средства описания последовательных коммуникационных про­\nцессов (от англ, communicating sequential processes);\n— код обнаружония/коррекции ошибок;\n— международное наименование электрической, электронной, программируемой электрон­\nной связанной с безопасностью системы;\n— обозначение процедуры анализа типа отказа и его последствий (от англ, procedure for \nfailure mode and effects analysis);\n— метод анализа на основе дерева отказов (от англ, fault tree analysis);\n— наименование метода/средства анализа безопасности и работоспособности (от англ. \nhazard and operability);\n— наименование языка логики высшего порядка (от англ, higher-order logic);\n— наименование английской фирмы, специализирующейся на производстве транспью­\nтеров;\n— наименование структурного метода разработки программных систем Джексона (от англ. \nJackson stmetured development);\n— обозначение последовательности линейного кода и перехода, применяемой при тести­\nровании ПО (от англ, linear code sequence and jump);\n— наименование языка для описания спецификаций, упорядоченных во временной облас­\nти (от англ, language for temporal ordering specification);\n— наименование модульного подхода к проектированию, работе и тестированию про­\nграммного обеспечения (от англ, modular approach to software construction, operation and \ntest);\n— обозначение охвата решения модифицированными условиями (от англ, modified condition \ndecision coverage);\n— обозначение среднего времени наработки на отказ (от англ, mean time between failures);\n— наименование языка для алгебраического описания спецификаций;\n3"
        },
        {
            "page": 10,
            "page_content": "ГОСТ Р 53195.5—2010\nOCCAM \n— язык параллельного программирования высокого уровня, используемый для транспью­\nтеров;\nОМТ \n— обозначение методологии объектного моделирования (от англ, object modeling technique);\nРЕ \n— международное обозначение «программируемый(ая.ое) электронный(ая.ое)» — в отно­\nшении модуля, устройства или системы;\nPROM \n— наименование программируемого постоянного запоминающего устройства;\nRAID \n— наименование системы организации избыточного массива памяти с использованием не­\nдорогих накопителей на дисках (от англ, redundant array of inexpensive disks):\nRAM \n— обозначение запоминающего устройства с произвольным доступом;\nROM \n— обозначение постоянного запоминающего устройства;\nSA/SD \n— обозначение метода структурного проектирования программных систем на основе\nструктурного анализа (от англ, structured anatysis/structured destgn);\nSADT \n— наименование метода/средства структурного анализа и проектирования (от англ.\nstructured analysis and design technique):\nSDL \n— наименование языка описаний и спецификаций (от англ, specification-and-description\nlanguage);\nSIL \n— международное обозначение уровня полноты безопасности (от англ, safety integrity\nlevel);\nSOM \n— наименование технологии Ай-Би-Эм для компонентных архитектур (от англ, system\nobject model);\nVDM \n— наименование одного из методов разработки компьютерных систем на основе формаль­\nного языка;\nVDM++ \n— наименование расширенной версии метода VDM;\nVDM-SL \n— обозначение формального языка для описания спецификаций, разрабатываемых с ис­\nпользованием метода VDM;\nXCR \n— обозначение логической операции «исключающее ИЛИ»;\nZ \n— обозначение нотации языка для описания спецификаций последовательных систем.\n5 Меры (методы/средства) по снижению  риска\n5.1.1 Основными мерами по снижению риска являются:\n- контроль случайных отказов АС Е/Е/РЕ СБЗС-систем,\n- исключение систематических отказов на различных стадиях жизненных циклов СБЗС-систем;\n- методы/средства, реализуемые на различных этапах стадий жизненного цикла для достижения пол­\nноты безопасности СБЗС ПО.\n5.1.2 Методы/средства для контроля случайных отказов АС Е/Е/РЕ СБЗС-систем. их краткое описа­\nние, а также ссылки на источники с полным описанием приведены в приложении А.\n5.1.3 Методы/средства для исключения систематических отказов на различных стадиях жизненных \nциклов СБЗС-систем. их краткие описания, а также ссылки на источники с полным описанием приведены \nв приложении Б.\n5.1.4 Методы/средства для достижения полноты безопасности СБЗС ПО. реализуемые на различных \nэтапах стадий жизненного цикла ПО, их краткое описание, а также ссылки на источники с полным описани­\nем приведены в приложении В.\n6 Методы оценки\n6.1 Методы оценки функциональной безопасности СБЗС ПО. их краткое описание, а также ссылки на \nисточники с полным описанием приведены в разделе В.6 приложения В.\n6.2 Методы оценки полноты безопасности предварительно разработанных программных средств, при­\nменяемых для СБЗС-систем. основанные на вероятностном подходе, приведены в приложении Г.\n4"
        },
        {
            "page": 11,
            "page_content": "ГОСТР 53195.5—2010\nПриложение А \n(справочное)\nМетоды и средства для Е/Е/РЕ СБЗС-систем: контроль случайных \nотказов АС (см. ГОСТ Р 53195.3)\nП р и м е ч а н и е  — Методы'средства, представленные в настоящем приложении, не являются исчерпы­\nвающими. Аппаратные средства Е/Е/РЕ СБЗС-систем интенсивно развиваются, и методы и средства быстро \nсовершенствуются. При выборе конкретных методов/средств следует ориентироваться, в первую очередь, на \nстандартизованные методы/средства. В случав применения новых методов/средств всегда следует формировать \nи сохранять доказательственные материалы, демонстрирующие эффективность применяемых методов/средств \nпо сравнению с методами/средствами. приведенными в настоящем приложении.\nА.1 Электрические системы и компоненты\nГлобальная цель: управление отказами в электромеханических компонентах.\nА.1.1 Отказы, обнаруживаемые мониторингом в режиме с внешним управлением (он-лайн)\nП р и м е ч а н и е  — На этот метод'средство дана ссыпка в ГОСТ Р 53195.3 (таблицы А.2, А.З. А.7 и А. 14 — А. 19).\nЦель: обнаружение отказов путем контроля поведения Е/Е/РЕ СБЗС-систем в процессе нормального фун­\nкционирования управляемого оборудования (УО) в режиме с внешним управлением (он-лайн).\nОписание: при определенных условиях отказы могут быть обнаружены с помощью информации о поведе­\nнии УО во времени. Например, если коммутатор, который является частью Е/Е/РЕ СБЗС-сисгемы. нормально \nактивизируется со стороны УО и если при этом коммутатор не изменяет свое состояние в предполагаемое время, \nто отказ может быть обнаружен. Обычными способами невозможно локализовать такой отказ.\nА.1.2 Мониторинг релейных контактов\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.2 и А.15).\nЦель обнаружение отказов релейных контактов, например, из-за сварки («залипания»).\nОписание: активизируемые контактные реле (или переключаемые контакты в реле) проектируют таким \nобразом, чтобы их поводки контактов были механически жестко связаны между собой. Пусть имеются два набора \nпереключаемых контактов а и Ь (рисунок А.1). Если нормально разомкнутый контакт Ь оказался приваренным \n(«залипшим»), то нормально замкнутый контакт а не может замкнуться при обесточивании обмотки реле. Следо­\nвательно. контроль замыкания нормально замкнутого контакта а при обесточенной обмотке реле может быть \nиспользован для указания того, что нормально разомкнутый контакт Ь действительно разомкнут. Отказ замыка­\nния нормально замыкаемого контакта а указывает на отказ контакта Ь. Таким образом, схема контроля должна \nобеспечивать надежное отключение или обеспечивать продолжение отключения при любом управлении обору­\nдования контактом Ь.\nI \nв -  \nИфшламм\nI \nМониторинг\n■ ~ \nУправление\nL------\n□\nг\n:\n МоНИЛфИНГ\nРисунок А.1 — Контакты реле\nА1.3 Компаратор\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.2 —А.4).\nЦель: возможно более раннее обнаружение (не одновременное) отказов в независимом модуле обработ­\nки или в компараторе.\nОписание: сигналы независимых модулей обработки (процессоров) сигналов сравниваются циклически \nили непрерывно компаратором АС. Сам компаратор гложет быть внешне тестируемым, или в нем может быть \nиспользована самоконтролирующая технология. Обнаруживаемые различия в поведении модулей обработки \nиспользуются как сообщения об отказах.\n5"
        },
        {
            "page": 12,
            "page_content": "ГОСТ Р 53195.5—2010\nНа рисунке А.2 показана схема компаратора в двухканальной системе.\nКакал 1\nКанал 2\nКс«мр«тср \n|«\nI\nВыявд2\nРисунок А.2 — Компаратор в двухканальной системе\nНа рисунке А.З показана схема компаратора \nв одноканальной системе, реализуемая с использованием \nПО. Сложная обработка осуществляется с помощью двух независимых наборов данных и прикладных программ. \nПоскольку существует только один блок обработки, двойная обработка производится последовательно в интер­\nвалах времени Л . 72. показанных на рисунке. Независимые выходные результаты проверяются программным \nкомпаратором в интервале времени 73. При применении двух различных прикладных программ достигается \nвысокий диапазон охвата отказов.\nВход 2\nВдд1.\nПриктднп\nпрсгряшм 1\nЛ\nПрикладная\nпрограмма 2\nВыход 1\n72\nB u cfl2\nКомпаратор\n73\nРисунок А.З — Компаратор одноканальной системы, реализуемый с помощью ПО\nА. 1.4 Схема голосования по мажоритарному принципу\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 {таблицы А.2 — А.4).\nЦель: обнаружение и маскирование отказов по меньшей мере в одном из трех каналов АС.\nОписание: для обнаружения и маскирования отказов применяют модуль голосования, использующий ма­\nжоритарный принцип (2 из 3. 3 из 3 или т из л). Для работы схемы голосования может быть использовано \nвнешнее тестирование или в самой схеме могут быть использованы самоконтролирующие технологии. Схема \nголосования по мажоритарному принципу показана на рисунке А.4.\nТВыжи\nРисунок А4 — Голосование по мажоритарному принципу\nПодробное описание метода/средства приведено в [1J.\n6"
        },
        {
            "page": 13,
            "page_content": "ГОСТР 53195.5—2010\nА.1.5 Отсутствие электропитания\nП р и м е ч а н и е  — На этот метод'србдство дана ссылка в ГОСТ Р 53195.3 (таблицы А.2, А.9. А.14 и А. 15).\nЦель: выполнение функции безопасности при выключении или потере электропитания.\nОписание: функция безопасности выполняется, если контакты разомкнуты и ток не поступает в АС. \nНапример, при использовании тормозов для останова опасного вращения двигателя тормоза отпускаются замы­\nкающими контактами в СБЗС-систвмах и включаются размыкающими контактами.\nБолее подробное описание данного метода'средства приведено в [2].\nА.2 Электроника\nГлобальная цель: управление отказами в транзисторных компонентах.\nА.2.1 Тестирование с использованием избыточных АС\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.З. А.16, А.17 \nи А. 19).\nЦель: обнаружение отказов с использованием избыточных АС. то есть с использованием дополнительных \nАС. не требующихся для реализации выполняемых функций.\nОписание: избыточные АС могут быть использованы для тестирования при соответствующей частоте запро­\nсов к заданным функциям безопасности. Такой подход обычно требуется для реализации положений подразде­\nла А.1.1 или А.2.2 настоящего приложения.\nРазличные варианты методое/средств тестирования с использованием избыточных АС описаны в (3 —5. 6].\nА.2.2 Динамические принципы\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблица А.З).\nЦель: обнаружение статических отказов путем динамической обработки сигналов.\nОписание: для обнаружения статических отказов в компонентах используется принудительное изменение \nпараметров сторонних статических сигналов (генерируемых внешними и внутренними источниками). Этот метод \nчасто применяют в отношении электромеханических компонентов.\nБолее подробное описание метода приведено в [7].\nА.2.3 Стандартный тестовый порт доступа и структура граничного сканирования\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.З, А.16 и А. 19).\nЦель: управление и наблюдение за происходящим на каждом контакте интегральной схемы (ИС).\nОписание: тестирование путем граничного сканирования представляет собой метод построения ИС, \nкоторый повышает ее способность к тестируемости, разрешая проблему доступа к внутренним точкам тестируе­\nмой схемы. В типичной сканируемой по границам ИС, содержащей внутренние логические схемы, а также вход­\nные и выходные буферы, между внутренними логическими схемами ядра ИС и входными/выходными буферами \nразмещают каскад сдвигового регистра, граничащий с контактами ИС. Каждый каскад сдвигового регистра \nнаходится в ячейке граничного сканирования. Ячейка граничного сканирования позволяет осуществлять конт­\nроль и наблюдать за происходящим на каждом входном и выходном контакте ИС через стандартный тестовый \nпорт доступа. Тестирование внутренних логических схем ИС выполняется путем отделения размещенных на кри­\nсталле (чипе) внутренних логических схем от входных сигналов, получаемых от окружающих компонентов, и после­\nдующего выполнения внутреннего самотестирования. Эти тесты могут быть использованы для обнаружения отка­\nзов в ИС.\nБолее подробное описание этого метода/средства приведено в [8 — 10].\nА.2.4 Отказоустойчивое оборудование\nП р и м е ч а н и е  — На этот метод/средство дана ссыпка в ГОСТ Р 53195.3 (таблица А.З).\nЦель: перевод системы в безопасное состояние в случае появления отказов.\nОписание: в аппаратно реализованных системах считается, что устройство работает отказоустойчиво, если:\n- определенный набор отказов приводит к безопасному состоянию;\n- отказы обнаруживаются.\nПРИМЕР — К определенному набору отказов могут относиться константные отказы типа «об­\nрывя, короткие замыкания внутри и между компонентами, а также на соединениях.\nБолее подробное описание данного метода'средства приведено в [11 — 13].\nА.2.5 Избыточный контроль\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблица А.З).\nЦель: обнаружение отказов путем создания нескольких функциональных модулей, контроля поведения \nкаждого из них для обнаружения отказов и последующего инициирования перехода в безопасное состояние \nпри обнаружении какого-либо несоответствия в поведении.\n7"
        },
        {
            "page": 14,
            "page_content": "ГОСТ Р 53195.5—2010\nОписание: функция безопасности выполняется по меньшей мере двумя каналами АС. Выходы этих кана­\nлов контролируются. Если выходные сигналы всех каналов не идентичны, то это служит признаком отказа, и \nинициируется переход в безопасное состояние.\nБолее подробное описание вариантов данного метода>'средства приведено в {13—15].\nА.2.6 Электрические/электронные компоненты с автоматической проверкой\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.З).\nЦель: обнаружение отказов путем периодической проверки функции безопасности.\nОписание: АС тестируются до запуска процесса и затем тестируются повторно через определенные интер­\nвалы. УО продолжает работу только при условии успешного прохождения каждого теста.\nПодробное описание данного метода/средства приведено в [16].\nА.2.7 Текущий контроль аналоговых сигналов\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.З и А.14).\nЦель: повышение уверенности в результатах измерения сигналов.\nОписание: в случае, когда отключение или безопасные состояния представляются уровнями аналоговых \nсигналов, обычно контролируют устойчивость уровня этого сигнала. Этот метод обеспечивает непрерывный кон­\nтроль и высокую степень доверительности в передатчике, снижает частоту необходимого тестирования функции \nчувствительности передатчика. Подобное тестирование также может быть применено к внешним интерфейсам, \nнапример цифровым линиям связи.\nБолее подробное описание данного метода/средства приведено в [17. 18].\nА.2.8 Снижение номинальных характеристик\nЦель: повышение надежности работы компонентов АС.\nОписание: построение системы выбирают таким образом, чтобы компоненты АС работали на номиналь­\nных уровнях нагрузок и иных характеристик, ниже максимально установленных для них технических характерис­\nтик. Снижение уровня номинальных нагрузок и характеристик — это обычная практика обеспечения гарантии \nтого, что, например, при всех нормальных условиях окружающей среды компоненты будут нормально функциони­\nровать при уровнях нагрузок меньше максимальных уровней.\nА.З Устройства обработки данных\nГлобальная цель: распознавание отказов, приводящих к неправильным результатам в модулях \nобработки.\nА.3.1 Программное самотестирование: ограниченное число комбинаций (один канал)\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.4).\nЦель: возможно более раннее обнаружение отказов в устройствах обработки данных.\nОписание: АС создают с использованием стандартных методов, в которых не учитываются какие-либо спе­\nциальные требования к безопасности. Обнаружение отказов реализуется целиком дополнительными программ­\nными функциями, которые выполняют самотестирование с использованием не менее двух дополнительных ком­\nбинаций данных (например. 55hex и AAhex).\nА.3.2 Программное самотестирование: блуждающий бит (один канал)\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.4).\nЦель: возможно более раннее обнаружение отказов в устройствах памяти (например, в регистрах) и де­\nшифраторе команд процессора.\nОписание: обнаружение отказов полностью реализуется дополнительными программными функциями, \nвыполняющими самотестирование с использованием комбинации данных (например, комбинации «блуждаю­\nщих битов»), которая тестирует физическую память (регистры данных и адресные регистры) и дешифратор \nкоманд. Охват диагностикой в этом случав составляет не более 90 %.\nПри тестировании одиночным блуждающим битом данные записываются в каждый адрес и считываются. \nЗатем информация сдвигается влево на один бит так. что информация начинается со второго бита, и проводится \nтаков же тестирование снова. Процесс повторяется 32 раза до тех пор. пока тестовый бит не выйдет из испыта­\nтельных данных. Аналогичное тестирование повторяется для полного диапазона тестирования (рисунок А.5).\nПри тестировании псевдослучайной последовательности предварительно подготовленная псевдослучай­\nная уникальная последовательность записывается в каждое ОЗУ. После первого прохождения теста программа \nвоспроизводит данные еще раз для подтверждения правильности размещения данных в памяти.\n8"
        },
        {
            "page": 15,
            "page_content": "ГОСТР 53195.5—2010\nС свдктиа регистре дд тпртж ноте\nОш»\nСодаяшнпе регистр* после контроля\nПовторению процедуры до*»»ерш»*т \nконтроля m ix т и с  рогисггро\n0\nа\n1\n0\n0\n1\n0\n0\n1\n0\n0\n0\nРисунок А.5 — Тестирование регистра блуждающим битом \nА.3.3 Самотестирование, обеспечиваемое АС (один канал)\nП р и м е ч а н и е  — На этот метод^средство дана ссылка в ГОСТ Р 53195.3 (таблица А.4).\nЦель: возможно более раннее обнаружение отказов в процессоре с использованием специальных АС. \nкоторые увеличивают скорость и расширяют области обнаружения отказов.\nОписание: применяют дополнительные специальные АС. которые обеспечивают функции самотестирова­\nния для обнаружения отказов. Например, это может быть аппаратный модуль, циклически контролирующий \nвыход определенной битовой комбинации в соответствии с принципом действия сторожевой схемы (рисунок А.6).\nРисунок А.6 — Структурная схема процессорного модуля \nс самотестированием и обнаружением отказов\nБолее подробное описание метода'средства приведено в [19. 20).\nА.3.4 Закодированная обработка (одноканальная)\nП р и м е ч а н и е  — На этот метод'средство дана ссыпка в ГОСТ Р 53195.3 (таблица А.4).\nЦель: возможно более раннее обнаружение отказов в процессоре.\nОписание: процессоры могут быть спроектированы с использованием специальных встроенных схемных \nсредств обнаружения отказов или исправления отказов. До недавнего времени эти методы/средства применя­\nлись только в относительно простых схемах и не получали широкого распространения; однако не следует исклю­\nчать их применение в будущих разработках.\n9"
        },
        {
            "page": 16,
            "page_content": "ГОСТ Р 53195.5—2010\nПРИМЕР — Модули входа/выхода дублируются, и с выхода передающего на вход приемного \nустройства передаются два одинаковых сигнала А и В п о  двум отдельным линиям. Два входных сигнала \nпоступают на логическое устройство, выполняющее операцию конъюнкции (логическое И). Если на \nвыходе получается логическая единица, это свидетельствует о совпадении сигналов и исправности \nсоединительных линий и передающего устройства. Если на выходе образуется логический нуль, это \nсвидетельствует о неисправности линии (линий) и/или передающего устройства. Логическая едини­\nца используется для формирования разрешающей команды на дальнейшую передачу и обработку \nсигнала. Логический нуль используется для сигнализации о неисправности. На практике могут быть \nиспользованы другие логические операции, например ИСКЛЮЧАЮЩЕЕ ИЛИ, при передаче инверсии \nодного из сигналов («НЕ А») или («НЕ Б»), которые приводят к тем же результатам.\nБолее подробное описание данного методаУсредства приведено в [4 и 18].\nА.3.5 Программное обнаружение несовпадений\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.4).\nЦель: возможно более раннее обнаружение отказов в процессоре путем динамического программного \nсравнения.\nОписание: два модуля взаимно обмениваются данными (включая результаты, промежуточные результаты \nи тестируемые данные). Сравнение данных, выдаваемых с использование»/ программных средств в каждом \nмодуле, и обнаруженные различия инициируют формирование сообщения об отказе (см. также рисунок А.З).\nА.4 Постоянное запоминающее устройство\nГлобальная цель: выявление изменения информации в ПЗУ.\nА.4.1 Сохранение слов с многобитовой избыточностью (например, контроль ПЗУ модифицированным \nкодом Хэмминга)\nП р и м е ч а н и е  — См. также А.5.6 и В.3.2. На этот метод/средство дана ссылка в ГОСТ Р 53195.3 \n(таблица А.5).\nЦель: обнаружение всех однобитовых ошибок, всех двухбитовых ошибок и некоторых ошибок во всех битах \n16-битового слова.\nОписание: каждое слово в памяти расширяется несколькими избыточными битами для формирования \nмодифицированного кода Хэмминга с кодовым расстоянием, по меньшей мере равным 4. При каждом считыва­\nнии слова проверка избыточных битов может указывать, произошло искажение данных или нет. При обнаруже­\nнии различия вырабатывается сообщение об ошибке. Эта процедура может также использоваться для обнару­\nжения ошибок адресации путем вычисления избыточных битов для слова данных, объединенного с его адресом.\nПодробное описание методов/средств обнаружения и коррекции ошибок приведено в [21—24].\nА.4.2 Модифицируемая контрольная сумма\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.5).\nЦель: обнаружение всех ошибок нечетных битов, то есть приблизительно 50 % всех возможных битовых \nошибок.\nОписание: контрольная сумма образуется соответствующим алгоритмом, который использует все слова в \nблоке памяти. Эта контрольная сумма может храниться как дополнительное слово в ПЗУ либо она может быть \nдобавлена как дополнительное слово в блок памяти для того, чтобы алгоритм контрольной суммы выработал \nзаранее заданное значение. В последнем тестировании памяти контрольная сумма создается снова с использо­\nванием того же алгоритма, и результат сравнивается с запомненным или с заданным значением. При обнаруже­\nнии различий вырабатывается сообщение об ошибке.\nЭтот метод более подробно описан в [21].\nА.4.3 Сигнатура одного слова (8 битов)\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.5).\nЦель: обнаружение значительного числа однобитовых ошибок, многобитовых ошибок в слове с обнаруже­\nнием приблизительно 99.6 % всех возможных битовых ошибок.\nОписание: содержимое блока памяти сжимается (с использованием аппаратных или программных средств) \nв одно слово памяти с использованием алгоритма контроля с помощью циклического избыточного кода (CRC). \nТипичный алгоритм CRC рассматривает все содержимое блока памяти как побайтовый или побитовый последо­\nвательный поток данных, в котором выполняется непрерывное полиномиальное деление с использованием \nполиномиального генератора. Остаток от деления сохраняется и представляет собой сжатое содержимое памя­\nти — это «сигнатура» памяти. Сигнатура вычисляется еще один раз в последующем тестировании и сравнивается \nс уже запомненным значением. При обнаружении различий выдается сообщение об ошибке.\nДанный метод/средство более подробно описан в [25. 26].\n10"
        },
        {
            "page": 17,
            "page_content": "ГОСТР 53195.5—2010\nА.4.4 Сигнатура двойного слова (16 битов)\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.5).\nЦель: обнаружение большинства однобитовых и многобитовых ошибок в слове с обнаружением приблизи­\nтельно 99,998 % всех возможных битовых ошибок.\nОписание: при применении этого метода сигнатура вычисляется с использованием алгоритма контроля с \nпомощью циклического избыточного кода (CRC). однако длина результирующего значения составляет по мень­\nшей мере два слова. Расширенная сигнатура заносится в память, повторно вычисляется и сравнивается как одно \nслово. При обнаружении различий между сохраненной и повторно вычисленной сигнатурами выдается сообще­\nние об ошибке. Метод позволяет обнаружить примерно 99. 998 % всех возможных битовых ошибок.\nДанный метод/средсгво более подробно описан в (25. 26].\nА.4.5 Повторение блока (например, дублирование ROM аппаратными и программными средствами)\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблица А.5).\nЦель: обнаружение всех битовых ошибок.\nОписание: адресное пространство дублируется в двух областях или устройствах памяти. Первая область \nпамяти работает в нормальном режиме. Вторая — содержит ту же информацию и доступна параллельно с \nпервой. Их выходы сравниваются, и при обнаружении различий выдается сообщение об ошибке (см. также А.5.7). \nДля обнаружения некоторых видов битовых ошибок данные должны запоминаться инверсно в одной из двух \nобластей памяти и инвертироваться обратно при чтении.\nДанный метод/средсгво более подробно описан в [27].\nА.5 Изменяемые пространства памяти\nГлобальная цель: обнаружение отказов во время процессов адресации, записи и считывания.\nДолжны быть учтены следующие отказы:\n- константные отказы ячеек памяти;\n- паразитные связи между ячейками памяти;\n- отказы адресации.\n- изменение содержимого из-за внешних воздействий.\nА.5.1 Тесты «шахматная доска» и «марш» для памяти с произвольным доступом (RAM)\nП р и м е ч а н и е  — На эти методы/средства дана ссылка в ГОСТ Р 53195.3 (таблица А.6).\nЦель: обнаружение преимущественно статических битовых ошибок.\nОписание: распределенная в шахматном порядке битовая комбинация нулей и единиц записывается в \nячейки памяти с битовой организацией. Затем эти ячейки анализируются попарно, чтобы убедиться в их одинако­\nвости и правильности. Адрес первой ячейки такой пары является переменным, а адрес второй ячейки этой пары \nобразуется путем битового инвертирования первого адреса. Первое прохождение диапазона адресов памяти \nосуществляется в направлении увеличения переменных адресов, а при втором прохождении — в направлении \nуменьшения адресов. После этого оба прохождения повторяются с заранее заданным инвертированием. При \nобнаружении какого-либо различия выдается сообщение об отказе.\nПри «маршевом» тестировании памяти с произвольным доступом ячейки памяти с битовой организацией \nинициализируются унифицированным потоком битов. При первом прохождении ячейки анализируются в нисхо­\nдящей последовательности. Проверяется правильность содержимого каждой ячейки, и ее содержимое инверти­\nруется. Базовая последовательность битов, которая создана в первом прохождении, рассматривается при вто­\nром прохождении в убывающем порядке и тем же способом. Первые прохождения повторяются с инвертируемы­\nми предварительными значениями в третьем и четвертом прохождениях. При обнаружении различий выдается \nсообщение об отказе.\nДанные тесты более подробно описаны в [28. 29].\nА.5.2 Тест «прогулочная дорожка» для памяти с произвольным доступом\nП р и м е ч а н и е  — На этот метод'средство дана ссыпка в ГОСТ Р 53195.3 (таблица А.6).\nЦель: обнаружение статических и динамических ошибочных битов и перекрестных помех между ячейками \nпамяти.\nОписание: тестируемая область памяти инициализируется унифицированным потоком битов. Затем пер­\nвая ячейка инвертируется, и остальная часть памяти анализируется на правильность. После этого первая ячейка \nповторно инвертируется для возврата в исходное состояние, и вся процедура повторяется для следующей ячейки. \nВторое прохождение модели «блуждающего бита» осуществляется при инверсии всех первоначально назна­\nченных значений памяти. При обнаружении различий выдается сообщение об ошибке.\nДанный метод/средство более подробно описан в [28. 29].\nА.5.3 Тест «бегущий код» для памяти с произвольным доступом\nП р и м е ч а н и е  — На этот MeroAtopeflCTBO дана ссылка в МЭК 61508-3 (таблица А.6).\nЦель: обнаружение статических битовых ошибок и динамических ошибок из-за паразитных связей.\n11"
        },
        {
            "page": 18,
            "page_content": "ГОСТ Р 53195.5—2010\nОписание: при тестировании памяти с произвольным доступом «попарной записью-считыванием» выб­\nранная область памяти сначала инициализируется унифицированно (то есть все 0 или все 1). После этого первая \nячейка памяти тестируется и затем инвертируется, а все остальные ячейки анализируются на правильность \nсодержимого. После каждого доступа к чтению одной из оставшихся ячеек инвертированная ячейка также прове­\nряется. Эта процедура повторяется для каждой ячейки в выбранной области памяти. Второв прохождение вы­\nполняется противоположно первоначальному прохождению. Любые различия приводят к выдаче сообщения об \nошибке.\nТестирование «прозрачной попарной записью-считыванием» представляет собой вариацию описанной \nвыше процедуры: вместо инициализации всех ячеек в выбранной области памяти существующее содержимое \nостается неизменным, а для сравнения содержимого набора ячеек используются контрольные суммы (сигнату­\nры). Выбирается первая тестируемая ячейка области памяти и вычисляется и сохраняется сигнатура S1 всех \nоставшихся ячеек области. Затем тестируемые ячейки инвертируются, и повторно вычисляется сигнатура S2. \n(После каждого доступа к чтению к одной из оставшихся ячеек инвертируемая ячейка также проверяется.) S2 \nсравнивается с S1. и при любом различии выдается сообщение об ошибке. Тестируемая ячейка повторно инвер­\nтируется для повторного установления исходного содержимого, и сигнатура S3 всех оставшихся ячеек повторно \nвычисляется и сравнивается с S1. Любые различия приводят к выдаче сообщения об ошибке. Все ячейки памяти \nв выбранной области тестируются тем же способом.\nДанный метод'средство более подробно описан в [28. 29].\nА.5.4 Тест «Авраам» для памяти с произвольным доступом\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблица А.6).\nЦель: обнаружение всех константных отказов и отказов, возникающих из-за связей между ячейками \nпамяти.\nОписание: общее число обнаруженных ошибок выше, чем при тесте «попарная запись-считывание». Число \nопераций, необходимых для выполнения всего тестирования памяти, составляет примерно 30л. где л — число \nячеек памяти. Тестирование может быть «прозрачным» при выполнении запоминания и тестирования в различ­\nных временных интервалах в периоде рабочего цикла.\nДанный метод'средство более подробно описан в [30. 31].\nА.5.5 Однобитовая избыточность (например, контроль памяти с произвольным доступом с помощью бита \nчетности)\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблица А.6).\nЦель: обнаружение 50 % всех возможных битовых ошибок в тестируемой области памяти.\nОписание: каждое слово в памяти расширяется на один бит (бит четности), который дополняет каждое \nслово до четного или нечетного числа логических единиц. Четность слова данных проверяется при каждом считы­\nвании. При обнаружении ложного числа единиц выдается сообщение об ошибке. Выбор четности или нечетности \nдолжен осуществляться таким образом, чтобы всякий раз. когда в случае ошибки не выдавалось ничего, кроме \nнулевого (ничего, кроме 0) и единичного (ничего, кроме 1) слова, вырабатывалось уведомление о том. что это \nслово неправильно закодировано. Контроль четности также может быть использован для обнаружения ошибок \nадресации, когда четность определяется при объединении слова данных с его адресом.\nДанный метод'средство более подробно описан в [32—35].\nА.5.6 Контроль памяти с произвольным доступом с помощью модифицированного кода Хэмминга или \nобнаружение ошибок данных с кодами обнаружения и исправления ошибок (EDC)\nП р и м е ч а н и е  — См. также А.4.1 и В.3.2. На этот метод'средство дана ссылка в ГОСТ Р 53195.3 \n(таблица А.6).\nЦель: обнаружение всех нечетных битовых ошибок, всех двухбитовых ошибок, некоторых трехбитовых оши­\nбок и некоторых многобитовых ошибок.\nОписание: каждое слово в памяти расширяется несколькими избыточными битами для формирования \nмодифицированного кода Хэмминга с кодовым расстоянием по меньшей мере равным 4. При каждом считыва­\nнии слова проверка избыточных битов может указывать, произошло искажение информации или нет. При обна­\nружении различий выдается сообщение об ошибке. Эта процедура может быть также использована для обнару­\nжения ошибок адресации при вычислении избыточных битов при объединении слова данных с его адресом.\nДанный метод'средство более подробно описан в [34. 35].\nА.5.7 Дублирование со сравнением памяти с произвольным доступом аппаратными или программными \nсредствами и тестирование путем записи/считывания\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблица А.6).\nЦель: обнаружение всех битовых ошибок.\nОписание: адресное пространство памяти дублируется в двух устройствах (или областях) памяти. Первое \nустройство памяти функционирует в нормальном режиме. Второв устройство (вторая область) памяти содержит \nту же информацию и доступно параллельно с первым(ой). Их выходные данные сравниваются, и при обнаруже-\n12"
        },
        {
            "page": 19,
            "page_content": "ГОСТР 53195.5—2010\nнии различий выдается сообщение об ошибке. Для обнаружения некоторых видов битовых ошибок данные \nдолжны сохраняться инверсно в одном(ой) из двух устройств (областей) памяти и обратно инвертироваться при \nсчитывании.\nДля памяти, распределенной на нескольких устройствах (например, на массивах накопителей на жестких \nдисках), применяют так называемые системы RAID, позволяющие обнаруживать и'или корректировать одиноч­\nные и кратные ошибки при считывании, в зависимости от уровня RAID:\n- для RAID уровня 0 требуется минимально два диска и обеспечивается наивысшая производительность, \nно без защиты от потери и/или повреждения данных. Алгоритм работы основан на разделении данных на сегмен­\nты («полоски» — striping). В том случае, если от дисковой системы требуется наивысшая производительность, но \nпри этом также требуется защита от отказов жестких дисков, и нет недостатка в средствах, устанавливаются \nзеркально два RAID-контроллера, и каждый конфигурируется под RAID уровня 0:\n- для RAID уровня 1 требуется два диска и фактически осуществляется только зеркальная (mirroring) за­\nпись-считывание. Такая организация памяти не снижает производительность при считывании, но скорость запи­\nси снижается, так как приходится выполнять последовательную запись на два диска — сначала на один, затем на \nдругой:\n- для RAID уровня 5 требуется минимально три диска и обеспечивается как защита данных при выходе из \nстроя жестких дисков, так и приемлемая производительность. Применяется запись как с разделением диска на \nполоски (striping), так и с избыточностью (parity). Избыточность составляет один диск в одном массиве, т. е. при \nустановке трех дисков по 9 ГБ операционная система различит только 18 ГБ. Установив 6 дисков по 9 ГБ. можно \nиспользовать для работы 45 ГБ и т. д. Для контроля данных в RAID уровня 5 используется один избыточный диск \nмассива данных:\n- для RAID уровня 6 также минимально требуется три диска, но для контроля данных используется два \nдиска. В алгоритме RAID 6 используются два независимых механизма вычисления контрольных значений и два \nинтеллектуальных метода восстановления данных — 2D-XOR и P+Q. что позволяет восстанавливать данные \nв случав отказа дисков и/или блоков данных (рисунок А.7).\nЛйПРМСХИЙ ДИСЖШЬЙ кИДОИВ RAID в Р+4\nJ \nI Д **3  ; Д»ж4 j ДисжБ\nРисунок А.7 — Структура размещения блоков данных (D) \nи блоков проверки (Р и Q) в системе RAID 6\n- для RAID уровня 7 требуются хотя бы один диск и обычное независимое \nподключение \nдисков \nк RAID-контроллеру. Разбиение на полоски и введение избыточности отсутствуют. Сами диски могут быть отфор­\nматированы и разбиты на логические диски в необходимой для использования операционной системе. При \nиспользовании RAID других уровней это невозможно. Применение RAID 7 фактически представляет собой \nиспользование RAID-контроллера в качестве обычного, но очень высокопроизводительного SCSI-контроллера \nс кэш-памятью;\n- для RAID уровня 0 + 1 используется разделение диска на полоски, как в RAID уровня 0. и зеркальная \nзапись-считывание, как в RAID уровня 1. Отличается повышенной, по сравнению с обычным RAID уровня 1. про­\nизводительностью, хотя избыточность по-прежнему 100 %;\n- для RAID уровня 10 применяется та же архитектура, что и в RAID уровня 0 + 1. но использованная для \nдискового массива из нескольких групп дисков. Избыточность соответственно 100 %:\n- для RAID уровня 30 используется разделение диска на полоски, но полоска данных распределяется по \nбольшим группам дисков с использованием контроля четности для контроля целостности данных:\n-для RAID уровня 50 применяются те же архитектура и принцип действия, что и в RAID уровня 30. но \nс использованием операции «исключающее ИЛИ» (XOR) для контроля целостности данных.\nРазличные варианты данного метода/средства более подробно описаны в (36—39].\nА.6 Устройства ввода-вывода и интерфейсы (внешний обмен)\nГлобальная цель: обнаружение отказов на устройствах ввода и вывода (цифровых, аналоговых, последова­\nтельных или параллельных) и лредотвраще-ние передачи недопустимых выходных данных для обработки.\n13"
        },
        {
            "page": 20,
            "page_content": "ГОСТ Р 53195.5—2010\nА.6.1 Тестирующая комбинация\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.7. А. 14 и А. 15).\nЦель: обнаружение статических (константных) отказов и отказов из-за перекрестных помех.\nОписание: осуществляется независимое от потока данных циклическое тестирование входных и выходных \nэлементов. В нем используются определенные тестирующие комбинации для сравнения с соответствующими \nпредполагаемыми значениями (рисунок А.8). Информация, восприятие и оценка тестирующей комбинации дол­\nжны быть независимыми друг от друга. Тестирующие комбинации не должны неблагоприятно влиять на опера­\nции. выполняемые УО.\nПериедмжя&я генерация \n•пипкрующвЯ КРМбМЦНИ\nВяэдП)\nВкадW ЗлзпЩ\nСиошмки обработка\nТ\nТ\nВыход (2)1 \nВыход (/)\nВьйод (1> | а-рад(3) \n|  Вымод (л)\n03гхастввп*не»с<ев1дйань1е\nypowBM ш к у ц о п а п а п\nПмупьтвг\nтаспфовмп\nРисунок А.8 — Применение тестирующей комбинации \nдля обнаружения отказов\nДанный метод/средство более подробно описан в [40— 43].\nА.6.2 Кодовая защита\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.7. А. 16. А.17 и А. 19).\nЦель: обнаружение случайных отказов АС и систематических ошибок в потоке входных/выходных данных.\nОписание: метод предназначен для защиты входных и выходных данных от систематических и случайных \nотказов АС. Кодовая защита обеспечивает зависимое от потока данных обнаружение отказов входных и выходных \nмодулей на основе использования избыточности информации и/или временной избыточности. Обычно избыточ­\nная информация накладывается на входные и/или выходные данные. Этим самым обеспечиваются средства для \nмониторинга правильности операций входных и выходных схем. Возможно применение многих вариантов мето­\nда, например с модуляцией несущей частоты выходным сигналом датчика либо с добавлением на выходе канала \nизбыточных битов или кодовых слов для контроля истинности прохождения сигнала между логическим модулем \nи оконечным исполнительным устройством.\nДанный метод/средство более подробно описан в [30. 33—35].\nА.6.3 Многоканальное параллельное выходное устройство\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.7).\nЦель: обнаружение случайных (константных) отказов АС, отказов, обусловленных внешними воздействия­\nми. временных сбоев, отказов адресации, постепенных отказов и самоустраняющихся отказов.\nОписание: метод/средство состоит в применении зависимого от потока данных многоканального парал­\nлельного выходного устройства с независимыми выходами и внешних компараторов для обнаружения случайных \nаппаратных отказов. Обнаружение отказов осуществляется с помощью внешних компараторов при несовпаде­\nнии информации на выходах устройств, которые формируют команду отключения УО (см. рисунки А.2. А.4). Этот \nметод/средство действует только в случае, если поток данных изменяется в интервале диагностического \nтестирования.\nДанный метод/средство более подробно описан в [36].\n14"
        },
        {
            "page": 21,
            "page_content": "ГОСТР 53195.5—2010\nА.6.4 Средство контроля выходов\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в МЭК ГОСТ Р 53195.3 (таблица А.7).\nЦель: обнаружение отдельных отказов — отказов, обусловленных внешними воздействиями, временных \nсбоев, отказов адресации, постепенных отказов (для аналоговых сигналов) и самоустраняющихся отказов.\nОписание: зависимое от потока данных устройство осуществляет сравнение выходных данных с \nнезависимыми входными данными, определяя, насколько они соответствуют области допустимых значений \n(по времени, величине). Обнаруженный отказ не всегда относится к неправильному выходному сигналу. Этот \nметод/средство действует только в том случае, если поток данных изменяется в интервале диагностического \nтестирования.\nПРИМЕР — На рисунке А.9 показана возможная схема устройства сравнения независимых \nвходных данных с фактическими выходными данными.\nРисунок А.9 — Устройство сравнения выходных данных \nс независимыми данными\nДанный метод/средство более подробно описан в (36].\nА.6.5 Сравнение/голосование входных данных\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.7 и А.14).\nЦель: обнаружение отдельных отказов — отказов, обусловленных внешними воздействиями, вре(ленных \nсбоев, отказов адресации, постепенных отказов (для аналоговых сигналов) и самоустраняющихся отказов.\nОписание: зависимое от потока данных устройство осуществляет сравнение выходных данных с независи­\nмыми входными данными, определяя, насколько они соответствуют области допустимых значений (по времени, \nвеличине). — см. рисунок А.9. Обнаруженный отказ не всегда относится к неправильному выходному сигналу. \nРеализуемая избыточность может быть 1 из 2. 2 из 3 или более высокая. Этот метод/средство действует только в \nтом случае, если поток данных изменяется в интервале диагностического тестирования.\nДанный метод/средство более подробно описан в [36].\nА.7 Маршруты данных (внутренний обмен)\nГлобальная цель: обнаружение отказов, обусловленных процессом обмена информацией.\nА.7.1 Однобитовая аппаратная избыточность\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в МЭК ГОСТ Р 53195.3 (таблица А.8).\nЦель: обнаружение всех нечетных однобитовых ошибок, то есть 50 % всех возможных одиночных \nошибок в потоке данных.\nОписание: число проводников шины расширяется на один проводник (бит в параллельном коде), и этот \nдополнительный проводник (бит) используется для обнаружения отказов путем проверки на четность.\n15"
        },
        {
            "page": 22,
            "page_content": "ГОСТ Р 53195.5—2010\nА.7.2 Многобитовая аппаратная избыточность\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.8).\nЦель: обнаружение отказов в процессе передачи данных по шине и в последовательных каналах связи.\nОписание:\nвариант 1: число проводников шины расширяется на два или более проводников (битов), и эти дополни­\nтельные проводники (биты) используются для обнаружения отказов с применением кода Хэмминга:\nвариант 2: применяются два канала связи, по которым передаются антивалентные сигналы с одними и \nтеми же данными. На приемном конце сигналы сравниваются с использованием логической цепи «исключаю­\nщее ИЛИ». В случае несовпадения данных формируется сигнал обнаружения отказа (ошибки).\nДанный метод/средство более подробно описан в [4—6. 18].\nА.7.3 Полная аппаратная избыточность\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.8).\nЦель: обнаружение отказов в процессе передачи путем сравнения сигналов двух шин.\nОписание: шина дублируется, и дополнительные проводники (биты) используются для обнаружения \nотказов.\nДанный метод/средство более подробно описан в [4—6. 18].\nА.7.4 Анализ с использованием тестирующих комбинаций\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.8).\nЦель: обнаружение статических отказов (константных отказов) и перекрестных помех.\nОписание: осуществляется независимое от потока данных циклическое тестирование маршрутов данных. \nИспользуется определенная тестирующая комбинация для сравнения наблюдаемых значений с соответствующи­\nми ожидаемыми значениями.\nИнформация тестирующей комбинации, ее получение и оценка тестирующей комбинации должны быть \nнезависимыми друг от друга. Тестирующие комбинации не должны неблагоприятно влиять на операции УО. \nСм. также А.6.1 и рисунок А.8.\nДанный метод'средство более подробно описан в [42—45].\nА.7.5 Избыточность при передаче\nП р и м е ч а н и е  — На этот метод дана ссылка в ГОСТ Р 53195.3 (таблица А.8).\nЦель: обнаружение самоустраняющихся отказов при обмене данными по шине.\nОписание: информация передается последовательно несколько раз. Метод эффективен только для само­\nустраняющихся отказов.\nА.7.6 Информационная избыточность\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.8).\nЦель: обнаружение отказов при передаче данных по шине.\nОписание: данные передаются блоками вместе с вычисленной контрольной суммой для каждого блока. \nЗатем приемник повторно вычисляет контрольную сумму полученных данных, и результат сравнивается с приня­\nтой контрольной суммой.\nДанный метод'средство более подробно описан в [33—35].\nА.8 Устройства обеспечения (например, электропитания, синхронизации и т.п.)\nГлобальная цель: обнаружение отказов или управление отказами источников электропитания.\nА.8.1 Защита от падения напряжения\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.9).\nЦель: защита связанных с безопасностью систем от падения напряжения.\nОписание: осуществление безопасного отключения системы устройством защитного отключения, реагирую­\nщего на предельные отклонения напряжения. Контролирующая цепь контролирует напряжение от источника \nэлектропитания. В случае падения напряжения ниже установленных пределов она формирует сигнал тревоги, \nкоторый инициирует действия микроконтроллера, снижающие риск (безопасное отключение потребляющего ус­\nтройства. переход на резервное электропитание и т. п.). В случае восстановления заданного напряжения логичес­\nкое устройство инициирует перезапуск (лерезафузку) микроконтроллера в стандартный режим работы. На рисун­\nке А. 10 показана сфуктурная схема одноканального модуля защиты потребляющего устройства от пониженного \nнапряжения, а на рисунке А. 11 — структурная схема многоканального модуля защиты.\n16"
        },
        {
            "page": 23,
            "page_content": "ГОСТР 53195.5—2010\nИсгачак апвпропламм\nРисунок А.10 — Структурная схема одноканапьного модуля зашиты от пониженного напряжения\nМдтнник аижтроптанкя\nЛопмаыяя иС \nев роса\nГЦжмгдакя\nМяфсюнтроптр\nП ц м ш р у ж\n-V\nКонтроль такта \nкалрктния\n_________________ T^jeeora_________________\nН ш д и  (naipaft— ц—\nустролёгм) 31\nЛогимв&й я ИС\nсброса\nПерезагрузке\nишраюнтраллар\nПарваагружа\n1\n'\nРисунок А. 11 — Структурная схема многоканального модуля защиты от пониженного напряжения\nА.8.2 Защита от броска напряжения с помощью безопасного выключения\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.9).\nЦель: защита связанных с безопасностью систем от броска напряжения.\nОписание: раннее обнаружение повышения (броска) напряжения и переключение всех выходов системы \nв безопасное состояние с использованием процедуры отключения электропитания или переключения на \nрезервный блок электропитания. Структура и принцип действия модуля защиты от повышения (броска) напряже­\nния аналогичны действию модуля защиты от пониженного напряжения (см. А.8.1).\nА.8.3 Управление напряжением вторичного источника электропитания\nП р и м е ч а н и е  — На этот метод«средство дана ссылка в ГОСТ Р 53195.3 (таблица А.9).\nЦель: контроль напряжений вторичного источника электропитания и инициализация перехода в безопас­\nное состояние, если напряжение не находится в заданном диапазоне.\nОписание: осуществление контроля напряжений вторичного источника электропитания и, если напряже­\nние не находится в заданном диапазоне, отключение электропитания системы либо переключение ее на резер­\nвный блок электропитания. Структура и принцип действия системы (модуля) контроля вторичного источника элек­\nтропитания аналогичны структуре и принципу действия модулей, описанных в А.8.1 и А.8.2.\nА.8.4 Безопасное выключение\nП р и м е ч а н и е  — На этот мегод'средство дана ссыпка в ГОСТ Р 53195.3 (таблица А.9).\nЦель: выключение электропитания с безопасным сохранением запомненной информации.\n17"
        },
        {
            "page": 24,
            "page_content": "ГОСТ Р 53195.5—2010\nОписание: осуществляется раннее обнаружение повышения (броска) или понижения напряжения с тем \nчтобы внутреннее состояние СБЗС-системы (подсистемы) \nпри \nнеобходимости \nмогло \nбыть сохранено \nв энергонезависимой памяти и чтобы все выходы могли быть установлены в безопасное состояние процедурой \nотключения электропитания, или все выходы могли быть переключены в безопасное состояние процедурой \nотключения электропитания, либо потребляющие устройства могли быть подключены к резервному источнику \nэлектропитания.\nА.9 Временной и логический контроль последовательности выполнения программ\nП р и м е ч а н и е  — На эту группу методов или средств даны ссылки в ГОСТР53195.3 (таблицыА. 16. \nА.17 и А.19).\nГлобальная цель: обнаружение искаженных программных последовательностей, возникающих в случаях, \nкогда отдельные элементы программы (например, программные модули, подпрограммы или команды) обраба­\nтываются в неправильной последовательности, или в непредусмотренный период времени, либо при сбое такто­\nвой частоты процессора, во избежание неверного выполнения или невыполнения функции безопасности \n(см. рисунок А.12).\nЗапуск\nот шфотуцщхшрЁ \n(инфгяюшроплере) M l\nСипмл трокхи \nот диодного таймера\nНормальный режим\nРисунок А.12 — Структурная схема и временные диаграммы модуля временного \nи логического контролей последовательности выполнения программ\nА.9.1 Контрольный датчик времени с отдельной временной базой без временного окна\nП р и м е ч а н и е  — На этот мегод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.10 и А.12).\nЦель: контроль поведения и последовательности выполнения программ.\nОписание: внешний элемент (например, контрольный датчик времени), задающий интервалы времени с \nотдельной временной базой, периодически переключается для контроля поведения компьютера и последова­\nтельности выполнения программ. Осуществляется слежение за тем. чтобы моменты переключения были пра­\nвильно расположены в программе. Контрольный датчик времени не переключается с некоторым фиксирован­\nным периодом, однако для него задается максимальный временнбй интервал.\nА.9.2 Контрольный датчик времени с отдельной временнбй базой и временным окном\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.10 и А.12).\nЦель: контроль поведения и последовательности выполнения программ.\nОписание: внешний элемент (например, контрольный датчик времени), задающий интервалы времени с \nотдельной временнбй базой, периодически переключается для контроля поведения компьютера и последова­\nтельности выполнения программ. Производится слежение за тем. чтобы моменты переключения были правиль­\nно расположены в программе. Если выполнение программы занимает более длительное или более короткое \nвремя, чем ожидается, выполняется чрезвычайное действие.\nА.9.3 Логический контроль последовательности выполнения программ\nП р и м е ч а н и е  — На этот метод дана ссылка в ГОСТ Р 53195.3 (таблицы А.10 и А.12).\nЦель: контроль правильной последовательности выполнения отдельных частей программы.\n18"
        },
        {
            "page": 25,
            "page_content": "ГОСТР 53195.5—2010\nОписание: правильная последовательность выполнения отдельных частей программы контролируется с \nпомощью программных средств (процедур учета, ключевых процедур) или с использованием внешних средств \nконтроля. Осуществляется контроль за тем. чтобы точки проверки располагались в программе правильно.\nБолее подробное описание данного метода приведено в [45).\nА.9.4 Комбинация временного и логического контролей последовательности программ\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.10 и А.12).\nЦель: контроль поведения и правильной последовательности выполнения отдельных частей программы.\nОписание: устройство, задающее интервалы времени (например, контрольный датчик времени), контроли­\nрующее последовательность программ, вновь запускается только в том случае, если последовательность частей \nпрограммы выполняется правильно.\nДанный метод/средство более подробно описан в [45).\nА.9.5 Проверка временного контроля в режиме он-лайн\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.10 и А.12).\nЦель: обнаружение отказов при временнбм контроле.\nОписание: временной контроль проверяется при запуске, а запуск возможен только в том случае, если \nвременнбй контроль успешно завершен. Например, датчик температуры может быть проверен нагретым резис­\nтором при запуске.\nА.10 Средства охлаждения и подогрева\nП р и м е ч а н и е  — На эту группу средств дана ссылка в ГОСТ Р 53195.3 (таблицы А. 17 и А 19).\nГлобальная цель: управление отказами в средствах охлаждения (вентиляции) и подогрева и/или их конт­\nроль. если они связаны с безопасностью.\nДанные средства более подробно описаны в [46—49].\nА.10.1 Датчик температуры\nП р и м е ч а н и е  — На это средство дана ссылка в ГОСТ Р 53195.3 (таблица А.11).\nЦель: обнаружение температурного перегрева или недогрева до того, как система начнет действовать вне \nзаданных требований.\nОписание: применяется датчик температуры, который контролирует температуру в наиболее критических \nточках Е/Е/РЕ СБЗС-системы (подсистемы) или составляющих. Чрезвычайное действие осуществляется до того, \nкак температура в критических точках выйдет за установленные в требованиях пределы.\nА.10.2 Управление вентиляцией\nП р и м е ч а н и е  —  На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.11).\nЦель: обнаружение отказов в работе вентилятора.\nОписание: контролируется правильность работы вентилятора. Если вентилятор работает не должным \nобразом, предпринимаются действия по обслуживанию или аварийному отключению.\nА.10.3 Безопасное отключение с использованием плавкого предохранителя\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.11).\nЦель: отключение СБЗС-системы безопасности до того, как система выйдет за пределы заданных темпе­\nратурных режимов.\nОписание: для отключения СБЗС-системы используется плавкий предохранитель. В PE-системе выключе­\nние осуществляется процедурой отключения электропитания, при которой сохраняется вся информация, \nнеобходимая при чрезвычайных действиях.\nА.10.4 Ступенчатые сообщения от термодатчиков и условная тревога\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.11).\nЦель: сообщение о том. что СБЗС-система (подсистема, модуль) вышла за установленные требованиями \nпределы температурных режимов.\nОписание: осуществляется контроль температуры, и при ее выходе за установленные пределы выдается \nтревожное сообщение.\nА.10.5 Соединение устройства принудительного охлаждения воздуха и индикатора состояний\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.11).\nЦель: недопущение перегрева системы (подсистемы, модуля, среды) путем использования искусственного \nвоздушного охлаждения.\nОписание: осуществляется контроль температуры системы (подсистемы, модуля, среды), и. если темпера­\nтура превысила заданный предел, включается искусственное воздушное охлаждение. Пользователь информиру­\nется о состоянии температуры.\n19"
        },
        {
            "page": 26,
            "page_content": "ГОСТ Р 53195.5—2010\nА.11 Обмен данными и запоминающее устройство большой емкости\nГлобальная цель: контроль отказов в процессе обмена данными между внешними источниками и запоми­\nнающим устройством большой емкости.\nА.11.1 Отделение линий электропитания от линий передачи информации\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.13).\nЦель: минимизация перекрестных помех в линиях передачи информации, индуцируемых сильными токами \nсистемы электропитания.\nОписание: линии, обеспечивающие электропитание СБЗС-систем. пространственно отделяют от линий, \nнесущих информацию. Электромагнитное поле, которое может вызывать в линиях передачи информации \nвсплески напряжений, уменьшается с расстоянием.\nДанный метод/средство более подробно описан в [18].\nА.11.2 Пространственное разделение групповых линий\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.13 и А.17).\nЦель: минимизация перекрестных помех, индуцируемых сильными токами в групповых пиниях.\nОписание: групповые линии, несущие информационные сигналы, отделяются одна от другой. Электромаг­\nнитное поле, которое может вызывать всплески напряжений в групповых линиях, уменьшается с расстоянием. \nЭтот метод/средство снижает также отказы по общей причине.\nДанный метод/средство более подробно описан в [18].\nА.11.3 Повышение помехоустойчивости\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.13. А.17 и А.19).\nЦель: минимизация электромагнитных воздействий на СБЗС-систему.\nОписание: применение методов/средств. уменьшающих восприимчивость СБЗС-системы к электромагнит­\nным воздействиям, вызванным излучениями либо наводками на линии электропитания или информационные \nлинии, а также возникающим из-за электростатических разрядов. К методам/средствам относятся: экранирова­\nние. заземление и фильтрация. Выбор применяемых методов/средств зависит от видов систем, конкретных обла­\nстей применения и требований к системам. Следует ориентироваться на стандартизованные методы/средства, \nобласти применения и требования, которые описаны, например, в ГОСТ 13661, ГОСТ 30382. ГОСТ Р 51700 \nи других документах по стандартизации.\nА.11.4 Передача сигнала без наводок\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.13 и А.17).\nЦель: обнаружение одних и тех же индуцированных напряжений в групповых линиях передачи сигналов.\nОписание: вся дублируемая информация передается антивапентными сигналами (например, логическими \n1 и 0 и их инверсиями). Ошибки по общей причине (например, вызванные электромагнитными излучениями) \nмогут быть обнаружены антивалентным компаратором.\nА. 12 Датчики\nГлобальная цепь: контроль отказов в датчиках, связанных с безопасностью систем.\nА.12.1 Эталонный датчик\nП р и м е ч а н и е  — На это средство дана ссылка в ГОСТ Р 53195.3 (таблица А 14).\nЦель: обнаружение неправильной работы датчика.\nОписание, для контроля выполнения процессов датчика используется независимый эталонный датчик. \nВсе входные сигналы в подходящие временные интервалы проверяются эталонным датчиком для обнаружения \nотказов в работе проверяемого датчика. Продуктивным является применение датчиков со встроенным эталоном \nили его цифровым образом.\nДаннов средство более подробно описано в [50—53].\nА.12.2 Непосредственно управляемый переключатель\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А. 14).\nЦель: размыкание контактов с помощью непосредственного механического соединения между кулачком \nпереключателя и поводком контакта.\nОписание: непосредственно управляемый переключатель размыкает свои обычно замкнутые контакты \nнепосредственным механическим разъединителем между кулачком переключателя и поводком контакта. Этим \nобеспечивается размыкание контактов переключателя всякий раз. когда кулачок переключателя находится в \nрабочем положении. Принцип действия аналогичен принципу, описанному в А. 1.2.\nА.13 Оконечные элементы (приводы)\nГлобальная цель: контроль отказов в оконечных элементах СБЗС-систем.\n20"
        },
        {
            "page": 27,
            "page_content": "ГОСТР 53195.5—2010\nА.13.1 Мониторинг\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А. 15).\nЦель: обнаружение неправильной работы привода.\nОписание: работа привода контролируется (например, управляемыми контактами реле. см. мониторинг \nрелейных контактов в А. 1.2). Избыточность, вносимая этим контролем, может быть использована для переключе­\nния системы в аварийный режим.\nА.13.2 Перекрестный контроль групповых приводов\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.15).\nЦель: обнаружение отказов в приводах путем сравнения результатов контроля их работы.\nОписание: каждый групповой привод контролируется своим аппаратным каналом. При обнаружении раз­\nличий вырабатывается аварийное действие.\n21"
        },
        {
            "page": 28,
            "page_content": "ГОСТ Р 53195.5—2010\nПриложение Б \n(справочное)\nМетоды/сродства для исключения систематических отказов \nСБЗС-систем (см. ГОСТ Р 53195.3 и ГОСТ Р 53195.4)\nП р и м е ч а н и я\n1 Часть мер (методов/средств) данного приложения относятся к методам/средствам для программного \nобеспечения, но они не дублируют методы/средства. приведенные в приложении В.\n2 Методы/средства, представленные в настоящем приложении, не являются исчерпывающими. СБЗС-сис- \nтемы непрерывно развиваются, и методы/средства исключения систематических отказов совершенствуются. При \nвыборе конкретных методов/средств следует ориентироваться, в первую очередь, на стандартизованные мето­\nды/средства. В случае применения новых методов/средств всегда следует формировать и сохранять доказатель­\nственные материалы, демонстрирующие эффективность новых методов/средств по сравнению с методами/сред- \nствами. приведенными в настоящем приложении.\nБ.1 Общие методы и средства\nБ.1.1 Управление проектами\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.1—Б.6).\nЦель: устранение отказов путем совершенствования организационной модели, правил и средств по разра­\nботке и тестированию СБЗС-систем.\nОписание: наиболее значимыми являются методы/средства. направленные:\n- на создание организационной модели, в основном для обеспечения действия систем менеджмента каче­\nства и менеджмента риска в соответствии с действующими стандартами:\n- на установление в руководствах по взаимосвязанным проектам и конкретным проектам регулирующих \nправил, мер и мероприятий для создания и оценки соответствия СБЗС-систем;\n- на применение следующих наиболее важных базовых принципов:\n- выбор проектной организации и установление:\n• задач и ответственности подразделений организаций;\n• уполномочивающих подразделений по обеспечению качества;\n• порядка обеспечения независимого от разработчика подтверждения качества (внутреннее инспектиро­\nвание);\n- на определение и принятие плана последовательных действий (модели действий):\n- определение всех существенных действий, необходимых во время выполнения проекта, включая внутрен­\nнее инспектирование проверки и график его проведения;\n- дополнение (обновление) проекта;\n- на определение стандартной последовательности для внутреннего инспектирования:\n- планирование, выполнение и проверка инспектирования (теория инспектирования):\n- разделение механизмов для комплектующей продукции:\n- сохранение результатов повторных проверок:\n- на управление конфигурацией:\n- администрирование и проверка версий;\n- обнаружение влияний модификаций;\n- согласование инспектирования после модификаций;\n- на введение количественной оценки мер по обеспечению качества:\n- установление требований;\n- статистика отказе»;\n- на введение автоматизированных универсальных методов, инструментов и средств обучения персонала.\nСтандартизованные методы/средства по аспектам менеджмента качества, менеджмента риска и\nуправления проектами подробно описаны в ГОСТ Р ИСО 9000, ГОСТ Р ИСО 9001, ГОСТ Р ИСО 10006, \nГОСТ Р ИСО/МЭК 16085.\nБ.1.2 Документация\nП р и м е ч а н и я\n1 На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.1—Б.6).\n2 См. также ГОСТ Р 53195.2 (раздел 5 и приложение А).\nЦель: устранение отказов и упрощение оценки соответствия СБЗС-систем требованиям безопасности \nс помощью систем документирования каждого шага процесса разработки.\n22"
        },
        {
            "page": 29,
            "page_content": "ГОСТР 53195.5—2010\nОписание: в процессе оценки соответствия все стороны, вовлеченные в процесс проектирования, должны \nдемонстрировать {представлять доказательства) соответствие систем эксплуатационным характеристикам, тре­\nбованиям безопасности и всем составляющим, включенным в проект. В обеспечении способности к тщательной \nразработке и гарантированию проверки доказательств безопасности в любой период времени особое значение \nпридается документации.\nВажными общими средствами устранения отказов и упрощения оценки соответствия являются введение \nруководств и автоматизация, в том числе:\n- руководств, которые:\n- устанавливают требования к групповому плану;\n- имеют контрольный список содержания;\n- устанавливают формат документа;\n- администрирования документирования с помощью автоматизированной и организованной библиотеки \nпроекта.\nК индивидуальным средствам относятся:\n- разделение в документации:\n- требований к системе;\n- описания системы (документации пользователя);\n- описания разработки (включая внутреннюю инспекцию);\n- группирование проектной документации в соответствии с жизненным циклом СБЗС-системы.\n- установление стандартных модулей документации, из которых могут быть скомпилированы документы;\n- ясная идентификация составляющих частей документаций:\n- формализованное обновление версий;\n- выбор ясных и понятных средств описания:\n- формализованная нотация определений;\n- естественный язык для введений, обоснований и представления намерений;\n- графическое представление примеров;\n- семантическое определение графических элементов:\n- директории специальных слов.\nСледует ориентироваться на стандартизованные требования к документации. Эти требования подробно \nописаны в [55]. а также устанавливаются в документах по стандартизации системы программной документации.\nБ.1.3 Разделение систем, связанных с безопасностью, и систем, не связанных с безопасностью\nП р и м е ч а н и е  — На этот метофсредство дана ссылха в МЭК ГОСТ Р 53195.3 (таблицы Б.1 и Б.6).\nЦель, предотвращение влияния связанных с безопасностью систем на системы, не связанные с безопас­\nностью. в непредвиденных ситуациях.\nОписание: в спецификации требований к СБЗС-системам должно быть определено, возможно ли разделе­\nние систем, связанных с безопасностью, и систем, не связанных с безопасностью. Должны быть установлены \nсоответствующие четкие требования по этому вопросу. Четкое разделение требований снижает затраты на тести­\nрование СБЗС-систем.\nБолее подробное описание этих требований приведено в [18. 54].\nБ.1.4 Разнообразие аппаратных средств\nП р и м е ч а н и е  — На этот метофсредство дана ссылка в ГОСТ Р 53195.3 (таблицы А.16. А.17 и А.19).\nЦель: обнаружение систематических отказов при выполнении действий УО. с использованием разнооб­\nразных компонентов с различными частотами и типами отказов.\nОписание: применение различных типов компонентов в разнообразных каналах СБЗС-систем для сниже­\nния вероятности отказов по общей причине (например, из-за перенапряжений, электромагнитных влияний) и \nповышения вероятности обнаружения таких отказов. Для выполнения требуемой функции применяют различные \nсредства, основанные на различных физических принципах (например, электрических, гидравлических, пневма­\nтических) и различных способах решения одной и той же задачи. Существуют различные типы разнообразий. Для \nполучения функционального разнообразия используют различные подходы для достижения одного и того же \nрезультата.\nБ.2 Спецификация требований к безопасности СБЗС-систем\nГлобальная цель: разработка спецификации требований к СБЗС-системе. которая, по возможности, долж­\nна быть полной, не содержащей ошибок, свободной от противоречий и простой для проверки.\nБ.2.1 Структурирование спецификации\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.1 и Б.6).\nЦель: уменьшение сложности спецификации требований к СБЗС-системе. а также исключение ошибок \nинтерфейсов между требованиями путем создания иерархической структуры частичных требований.\n23"
        },
        {
            "page": 30,
            "page_content": "ГОСТ Р 53195.5—2010\nОписание: метод'средсгво предусматривает структурирование функциональной спецификации требова­\nний с разбиением на частичные требования таким образом, чтобы между ними существовали, по возможности, \nпростейшие наблюдаемые отношения. Анализ требований последовательно уточняют до тех пор. пока не будут \nполучены различимые небольшие четкие частичные требования. Результатом последнего уточнения является \nиерархическая структура частичных требований, которая создает основу для спецификации полных требований. \nЭтот метод/средство позволяет выделить интерфейсы частичных требований и особенно эффективен при ис­\nпользовании для исключения ошибок интерфейсов.\nБолее подробные описания стандартизованных структурируемых требований приведены в (55—58].\nБ.2.2 Формальные методы\nП р и м е ч а н и е  — На эти методы/средства дана ссылка в ГОСТ Р 53195.3 (таблицы Б.1 и Б.6).\nЦель: выражать спецификацию требований однозначно и последовательно таким образом, чтобы оказа­\nлось возможным обнаружить ошибки и упущения.\nОписание: формальные методы представляют собой методы/средства разработки и описания системы, \nприменяемые на определенном этапе разработки спецификации или проекта. Результирующее описание при­\nнимает математическую форму и может быть подвергнуто математическому анализу для обнаружения различ­\nных классов несогласованностей или некорректностей. Такое описание гложет быть в некоторых случаях проана­\nлизировано на ЭВМ со строгостью, аналогичной строгости проверки компилятором синтаксиса исходной про­\nграммы. или поддержано средствами анимации для изображения различных аспектов поведения описанной \nсистемы. Анимация улучшает восприятие человеком специфицированного поведения.\nФормальные методы/средства могут в общем случае предоставлять нотацию (в основном некоторые мето­\nды дискретной математики), средства для вывода описания в этой нотации и различные виды анализа для \nпроверки на корректность различных свойств описаний.\nНачиная с математически формальной спецификации проектирование может быть сведено до последова­\nтельности пошаговых уточнений к проектированию логической схемы.\nБолее подробное описание формальных методов/средств приведено в ГОСТ Р МЭК 61160.\nБ.2.3 Полуформальные методы\nЦель: создание однозначных и согласованных частей спецификации с возможностью обнаружения оши­\nбок и пропусков.\nП р и м е ч а н и е  — На эти методы/средства дана ссылка в ГОСТ Р 53195.3 (таблицы Б.1, Б.2 и Б.6) и \nв ГОСТ Р 53195.4 (таблицы А.1. А.2 и А.4).\nБ.2.3.1 Общие положения\nЦель: удостовериться в том. что проект удовлетворяет своей спецификации.\nОписание: полуформальные методы представляют собой методы/средства создания описания системы на \nстадиях ее разработки, например при разработке спецификации, при проектировании или кодировании. Описа­\nние может быть в некоторых случаях проанализировано на ЭВМ или поддержано средствами анимации для \nотображения различных аспектов поведения системы. Анимация позволяет получить дополнительную уверен­\nность в том. что система удовлетворяет как реальным требованиям, так и специфицированным требованиям.\nДва полуформализованных метода описаны ниже.\nБ.2.3.2 Метод конечных авгоматов/диаграммы переходов состояний\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблицы Б.5 и Б.7).\nЦель: моделирование, подготовка спецификации или реализация структуры управления системы.\nОписание: системы могут быть описаны в выражениях, отображающих их состояния, данные на их входах \nи их действия. Находясь в состоянии С1 и при получении на входе данных, система может выполнить действие А \nи перейти в состояние С2. Путем описания системных действий для каждого входа в каждом состоянии можно \nописать систему полностью. Образуемая в результате модель системы является автоматом конечных состояний. \nОна может быть изображена в виде так называемой диаграммы переходов состояний, которая показывает, \nкаким образом система переходит из одного состояния в другое, или в виде матрицы, в которой по осям задаются \nсостояния и входы, а ячейки матрицы содержат действия по переходу в новое состояние.\nКогда система усложняется или имеет естественную структуру, это может быть отражено в уровневой струк­\nтуре автомата конечных состояний.\nСпецификация или проект, выраженный в виде автомата конечных состояний, может быть проверен:\n- на полноту (система должна иметь действие и новое состояние для каждого входа в каждом состоянии);\n- на согласованность (только одно изменение состояния описывается для каждой пары состояние/вход);\n- на достижимость (можно или нельзя перейти из одного состояния в другое при любой последовательно­\nсти входов).\nЭто важные свойства для критических систем. Инструменты для обеспечения этих проверок легко разрабо­\nтать. Существуют также алгоритмы, которые позволяют автоматически генерировать тестовые примеры для ве­\nрификации реализаций автомата конечных состояний или для анимации модели автомата конечных состояний.\nПодробное описание данных методов/средств приведено в [57—59].\n24"
        },
        {
            "page": 31,
            "page_content": "ГОСТР 53195.5—2010\nБ.2.3.3 Метод сетей Петри\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблицы Б.5 и Б.7).\nЦель: моделирование соответствующих аспектов поведения системы, оценка и, возможно, повышение ее \nбезопасности и рабочих характеристик путем анализа и повторного проектирования.\nОписание: сети Петри относятся к классу теоретических графовых моделей, используемых для представле­\nния информации и управления потоками в системах, процессы в которых конкурентны и асинхронны.\nСеть Петри — это сеть позиций и переходов. Позиции могут быть «маркированными» или «немаркирован­\nными». Переход «активизирован», когда все его входы маркированы. В активизированном состоянии позиции \nразрешается (но не требуется) быть «возбужденной». Если позиция «возбуждена», вход, поступающий на пере­\nход. становится немаркированным, а вместо этого каждый выход из перехода оказывается маркированным.\nПотенциальные опасности могут быть представлены в виде конкретных состояний (маркировок) в модели. \nМодель сетей Петри может быть расширена для обеспечения возможности синхронизации системы. И хотя \n«классические» сети Петри концентрируются на аспектах управления потоками, имеются некоторые расшире­\nния для включения потока данных в модель.\nПодробное описание сетей Петри приведено в [60—65].\nБ.2.4 Автоматизированные средства разработки спецификации\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б. 1 и Б.6) и \nв ГОСТ Р 53195.4 (таблицы А.1 и А.2).\nБ.2.4.1 Общие положения\nЦель: использование формальных методов/средств разработки спецификации для упрощения автомати­\nческого обнаружения неоднозначностей и полноты системы.\nОписание: метод/средство предусматривает создание спецификации в форме базы данных, которая может \nавтоматически анализироваться для оценки согласованности и полноты. Инструмент созданной таким образом \nспецификации предоставляет пользователю возможность применить анимацию различных аспектов специфи­\nцированной системы. В общем случае метод/средство поддерживает не только создание спецификаций, но и \nэтап проектирования, а также и другие этапы жизненного цикла. Инструменты спецификаций могут быть класси­\nфицированы в соответствии с пунктами, приведенными ниже.\nПодробное описание этих методов/средств приведено в [57—59].\nБ.2.4.2 Инструменты, не ориентированные на конкретный метод\nЦель: предоставление пользователю с помощью подсказок и формирования связей между соответствую­\nщими частями возможности составления правильной спецификации.\nОписание: инструменты, не ориентированные на конкретный метод, освобождают пользователя от рутин­\nной процедуры и поддерживают управление проектом. Они не формируют какую-либо конкретную методологию \nразработки спецификаций. Относительная независимость от метода позволяет пользователям быть более сво­\nбодными и одновременно дает им некоторую специализированную поддержку, необходимую при создании спе­\nцификаций. При этом усложняется освоение метода.\nПодробное описание этих методов/средств приведено в [57—59].\nБ.2.4.3 Процедура, ориентированная на модель с иерархическим анализом\nЦель: предоставление пользователю возможности создания правильной спецификации, обеспечив согла­\nсованность между описаниями действий и данных на различных уровнях абстрагирования.\nОписание: метод/средство дает функциональное представление о необходимой системе (структурный ана­\nлиз) на различных уровнях абстрагирования (степень точности). Анализ проводится на различных уровнях как с \nдействиями, так и с данными. Оценка неоднозначности и полноты спецификации возможна между иерархичес­\nкими уровнями, а также между двумя функциональными единицами (модулями) на одном и том же уровне.\nПодробное описание метода/средства приведено в [57—59].\nБ.2.4.4 Сущностные модели\nЦель: предоставление пользователю возможности создания правильной спецификации, фокусируя вни­\nмание на использовании сущностей внутри системы и взаимоотношений между ними.\nОписание: заданная система описывается в виде совокупности обьектов и взаимоотношений между ними. \nПрименение сущностных моделей позволяет определять, какие взаимоотношения могут интерпретироваться \nсистемой. В общем случае эти взаимоотношения позволяют описывать иерархическую структуру объектов, поток \nданных, взаимоотношения между данными и определять, какие данные являются предметом определенных \nтехнологических процессов. Классическая процедура расширяется применением управления процессами. Воз­\nможности обследования спецификации и поддержка пользователя зависят от разнообразия проиллюстриро­\nванных взаимоотношений. С другой стороны, множество представленных возможностей делает применение \nэтого метода сложным.\nПодробное описание метода/средства приведено в [66—68].\nБ.2.4.5 Стимул и отклик\nЦель: предоставление пользователю возможности создания правильной спецификации путем идентифи­\nкации взаимоотношений «стимул — отклик».\n25"
        },
        {
            "page": 32,
            "page_content": "ГОСТ Р 53195.5—2010\nОписание: взаимоотношения между объектами системы определены в нотациях «стимулы» и «отклики». \nИспользуется простой и легко расширяемый язык, который содержит элементы языка, представляющие объек­\nты. взаимоотношения, характеристики и структуры.\nПодробное описание данного метода/средства приведено в {69, 70].\nБ.2.5 Таблица контрольных проверок\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.1. Б.2 и Б.6)ив \nГОСТ Р 53195.4 (таблицы А. 10 и Б.8).\nЦель: сосредоточение внимания пользователя на всех важных аспектах системы на конкретной стадии \nжизненного цикла системы и управление критическими оценками, обеспечивая исчерпывающий охват без предъяв­\nления точных требований к системе.\nОписание: метод'средство включает в свой состав набор вопросов, на которые должно дать ответ лицо, \nзаполняющее таблицу контрольных проверок. Многие вопросы носят общий характер, и эксперт должен интер­\nпретировать их как наиболее подходящие к конкретной оцениваемой системе. Таблицу контрольных проверок \nможно использовать на всех этапах всего жизненного цикла СБЗС-системы. жизненных циклов аппаратных средств \nи программного обеспечения. Метод/средство полезно в качестве инструмента, способствующего оценке функци­\nональной безопасности.\nДля сокращения широкого разнообразия проходящих подтверждение соответствия систем большинство \nтаблиц контрольных проверок содержат вопросы, которые применимы ко многим типам систем. В результате \nв используемой таблице контрольных проверок может оказаться множество вопросов, которые не уместны \nв используемой системе и которые должны игнорироваться. В то же время для конкретной системы может \nвозникнуть необходимость дополнения стандартной таблицы контрольных проверок вопросами, специально \nориентированными на используемую систему.\nИспользование таблицы контрольных проверок в значительной степени зависит от экспертной оценки \nи суждения инженера, который выбирает и применяет таблицу контрольных проверок. В результате решения, \nпринятые инженером относительно выбранных(ой) таблиц(ы) контрольных проверок, и любые дополнительные \nвопросы должны быть полностью задокументированы и обоснованы. Цель состоит в гарантировании возможно­\nсти контроля применения таблиц контрольных проверок и того, что при использовании одних и тех же критериев \nбудут получены одни и те же результаты.\nОбъект в заполненной таблице контрольных проверок должен быть как можно более сжатым. При необхо­\nдимости исчерпывающего обоснования оно должно быть дано в виде ссылок на дополнительные документы. Для \nдокументирования результатов каждого вопроса должен использоваться ответ: «успешно», «безуспешно» или \n«не завершено» — либо некоторый аналогичный ограниченный набор ответов. Эта лаконичность существенно \nупрощает процедуру достижения общего заключения в виде результатов оценки таблицы контрольных проверок.\nБ.2.6 Экспертиза спецификации\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.1 и Б.6).\nЦель: исключение некомплектности и противоречивости спецификации.\nОписание: общий метод, с помощью которого оценивается спецификация с различных сторон независимой \nгруппой экспертов. Группа экспертов задает вопросы разработчику спецификации, который должен дать ей удов­\nлетворительные ответы. Анализ должен (по возможности) выполняться группой, которая не принимала участия \nв создании спецификации. Требуемая степень независимости определяется уровнями полноты безопасности, \nзадаваемыми для системы. Независимые эксперты должны быть способны реконструировать эксплуатацион­\nную функцию системы бесспорным способом без ссылок на любые последующие спецификации. Они должны \nтакже убедиться в том. что охвачены все уместные аспекты безопасности и технические аспекты в эксплуатацион­\nных и организационных средствах. Эта процедура доказала свою высокую эффективность на практике.\nБолее подробное описание метода/средства приведено в ГОСТ Р МЭК 61160.\nБ.З Проектирование и разработка СБЗС-систем\nГлобальная цель: создание проекта СБЗС-системы в соответствии со спецификацией.\nБ.3.1 Соблюдение стандартов и руководств\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица Б.2).\nЦель: рассмотрение стандартов сектора применения (не устанавливаемых в настоящем стандарте) на \nпредмет правильного их использования при разработке и проектировании СБЗС-системы.\nОписание: при проектировании СБЗС-системы должны составляться руководства. Эти руководящие мате­\nриалы должны, во-первых, приводить к созданию СБЗС-систем. которые практически свободны от ошибок, и. во- \nвторых. упрощать последующее подтверждение соответствия требованиям безопасности. Они могут быть универ­\nсальными. установленными только для данного проекта или установленными только для отдельного его этапа.\nБ.3.2 Структурное проектирование\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.2 и Б.6).\n26"
        },
        {
            "page": 33,
            "page_content": "ГОСТР 53195.5—2010\nЦель: снижение сложности спецификации требований путем создания иерархической структуры частичных \nтребований; исключение ошибок взаимосвязей между требованиями; упрощение верификации.\nОписание: при проектировании аппаратных средств должны использоваться конкретные критерии или \nметоды. Например, может потребоваться следующее:\n- проектирование иерархически структурированных схем:\n- использование изготовленных и прошедших тестирование частей схем.\nАналогично при проектировании программных средств использование структурных схем позволяет создать \nоднозначную структуру программных модулей. Эта структура показывает взаимосвязь модулей друг с другом, \nконкретные данные, которые передаются между модулями, и конкретное управление, существующее между \nмодулями.\nСтруктурное проектирование более подробно описано в [70. 71].\nБ.3.3 Использование надежно испытанных компонентов\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.2 и Б.6).\nЦель: снижение риска появления ряда необнаруживаемых отказов путем использования компонентов \nс конкретными характеристиками.\nОписание: выбор надежно испытанных компонентов для целей безопасности выполняется производите­\nлем в соответствии с надежностью компонентов (например, использование эксплуатационно-тестирувмых физи­\nческих модулей для удовлетворения высоких требований безопасности или хранение относящихся к безопасно­\nсти программ только в безопасной памяти). Обеспечение безопасности памяти может касаться устранения \nнесанкционированного доступа, влияний несанкционированной среды (электромагнитные воздействия, радиа­\nция и т. д.), а также отклика компонентов в случае обнаружения отказов.\nБолее подробное описание этого метода',средства приведено в [72].\nБ.3.4 Модульное проектирование\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.2 и Б.6).\nЦель: снижение сложности проектирования и исключение ошибок, связанных с интерфейсами между под­\nсистемами.\nОписание: каждая подсистема на всех уровнях проектирования четко определяется и ограничивается по \nразмеру (только небольшим набором функций). Интерфейсы между подсистемами поддерживаются как можно \nболее простыми, и пересечения (то есть разделяемые данные, обмен информацией) минимизируются. Слож­\nность отдельных подсистем также ограничивается.\nБолее подробное описание метода/средства приведено в [73. 74].\nБ.3.5 Средства автоматизированного проектирования\nП р и м е ч а н и е  — На эти средства дана ссылка в ГОСТ Р 53195.3 (таблицы Б.2 и Б.6) и в ГОСТ Р 53195.4 \n(таблица А.4).\nЦель: обеспечение наиболее систематического выполнения процедур проектирования. Включение в про­\nект подходящих автоматически спроектированных элементов, которые уже созданы и проверены.\nОписание: инструменты автоматизированного проектирования (САПР) должны использоваться в процессе \nпроектирования как АС. так и ПО во всех случаях, когда они доступны и обоснованы сложностью системы. Пра­\nвильность выбора таких инструментов должна быть продемонстрирована конкретным тестированием, обширной \nпредысторией удовлетворительного использования либо независимой верификацией результата их примене­\nния для конкретной проектируемой СБЗС-системы.\nБолее подробно методы/средства автоматизированного проектирования описаны в [75. 76].\nБ.3.6 Моделирование\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.2. Б.5 и Б.6).\nЦель: выполнение систематической и полной проверки электрических/электронных схем, их функциониро­\nвания. а также корректное задание размеров их компонентов.\nОписание: функция схемы, реализующая СБЗС-сисгему, имитируется на компьютере с помощью \nзапрограммированной модели ее поведения. Поведение каждого отдельного компонента схемы моделируется \nотдельно, и отклик схемы, в которую он входит, анализируется при задании предельных данных для каждого \nкомпонента.\nЭтот метод/средство более подробно описан в [75. 76].\nБ.3.7 Проверка (обзор и анализ)\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.2 и Б.6).\nЦель: выявление рассогласований между спецификацией и реализацией.\nОписание: заданные функции СБЗС-системы проверяют и оценивают для гарантирования того, что \nСБЗС-система соответствует требованиям, приведенным в спецификации. Все сомнительные вопросы относи­\nтельно реализации и использования системы документируются с целью их последующего разрешения. В отличие \nот сквозного анализа во время процедуры проверки автор пассивен, а эксперт активен.\n27"
        },
        {
            "page": 34,
            "page_content": "ГОСТ Р 53195.5—2010\nБ.3.8 Сквозной анализ\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ТОСТ Р 53195.3 (таблица Б.6).\nЦель: выявление рассогласования между спецификацией и реализацией.\nОписание: заданные функции СБЗС-системы оцениваются для гарантирования того, что СБЗС-система \nсоответствует требованиям, приведенным в спецификации. Все сомнительные вопросы относительно реализа­\nции и использования системы документируются с целью их последующего разрешения. В отличие от процедуры \nпроверки во время сквозного анализа автор проекта активен, а эксперт пассивен.\nБ.4 Процедуры эксплуатации и обслуживания СБЗС-систем\nГлобальная цель: разработка процедур, исключающих ошибки во время эксплуатации и обслуживания \nСБЗС-систем.\nБ.4.1 Инструкции по эксплуатации и обслуживанию\nП р и м е ч а н и е  — На этот мегофсредство дана ссылка в ГОСТ Р 53195.3 (таблица Б.4).\nЦель: минимизация ошибок во время эксплуатации и обслуживания СБЗС-систем.\nОписание: инструкции пользователя содержат важную информацию о способах использования и обслужи­\nвания систем. В особых случаях эти инструкции могут содержать также примеры общих способов установки \nСБЗС-систем. Все инструкции должны быть легко воспринимаемыми. Для описания сложных процедур и зависи­\nмостей должны использоваться рисунки и схемы.\nБ.4.2 Удобство общения пользователя с системой\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ТОСТ Р 53195.3 (таблица Б.4).\nЦель: снижение сложности действий, выполняемых оператором во время эксплуатации СБЗС-систем.\nОписание: правильность эксплуатации СБЗС-систем может зависеть в некоторой степени от оператора. \nРассматривая соответствующий проект системы и проект рабочего места, разработчик СБЗС-систем должен \nпредусмотреть меры, чтобы в период эксплуатации систем обеспечивалось следующее:\n- необходимость вмешательства оператора в действия системы была ограничена абсолютным мини­\nмумом:\n- необходимое вмешательство оператора было как можно более простым:\n- возможность ущерба от ошибок оператора была минимизирована;\n- средства вмешательства и средства индикации были спроектированы в соответствии с эргономическими \nтребованиями:\n- средства оператора были простыми, четко обозначенными и естественными для использования;\n- оператор не был перенапряжен даже в экстремальной ситуации:\n- обучение процедурам и средствам процесса вмешательства было адаптировано к уровню знаний и моти­\nвации обучаемого оператора (пользователя).\nБ.4.3 Удобство общения обслуживающего персонала с системой\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица Б.4).\nЦель: упрощение процедуры обслуживания СБЗС-системы и проектирование необходимых средств для \nэффективной диагностики и ремонта.\nОписание: профилактическое техническое обслуживание и ремонт СБЗС-системы часто производится в \nжестких временных рамках. Поэтому разработчик систем должен предусмотреть меры, чтобы в период эксплуа­\nтации обеспечивалось следующее:\n- средства, относящиеся к техническому обслуживанию СБЗС-системы, требовались как можно реже или в \nидеале вообще не требовались:\n- использовались достаточно чувствительные и легко управляемые диагностирующие инструменты для \nнеизбежных ремонтов, эти инструменты должны включать в себя все необходимые интерфейсы:\n- если отдельные инструменты диагностики должны быть разработаны или приобретены, то для этого \nдолжно быть достаточно времени.\nБ.4.4 Сокращение работ на стадии эксплуатации\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ТОСТ Р 53195.3 (таблицы Б.4 и Б.6).\nЦель: ограничение эксплуатационных возможностей для обычного пользователя.\nОписание: эксплуатационные возможности ограничивают путем:\n- ограничения числа требуемых операций в рабочих режимах, например благодаря применению пультов \nуправления;\n- ограничения числа используемых в работе элементов контроля и управления;\n- ограничения числа возможных в обьгнных условиях эксплуатации рабочих режимов.\n28"
        },
        {
            "page": 35,
            "page_content": "ГОСТР 53195.5—2010\nБ.4.5 Эксплуатация только квалифицированным оператором\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.4 и Б.6).\nЦель: исключение отказов, обусловленных ошибками оператора.\nОписание: оператор СБЗС-системы должен быть обучен до такой степени, которая соответствует сложно­\nсти и уровню безопасности СБЗС-системы. В обучение входит изучение основ технологического процесса эксплу­\nатации СБЗС-системы и взаимосвязей между СБЗС-системой и УО.\nБ.4.6 Защита от ошибок оператора\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица Б.6).\nЦель: защищенность системы от всех прогнозируемых видов ошибок оператора.\nОписание: ложные входные сообщения (о значениях параметров, времени и т. д.) обнаруживаются провер­\nками правильности работы или мониторингом УО. Для объединения этих возможностей в проекте на самом \nраннем этапе проектирования необходимо установить, какие из входных сообщений возможны и какие \nдопустимы.\nБ.4.7 Защита от модификаций\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица А.18).\nЦель, защита СБЗС-системы от модификаций аппаратных средств техническими средствами.\nОписание: модификации или манипуляции должны обнаруживаться автоматически, например проверка­\nми правильности сигналов от датчиков, техническим процессом и автоматическим запуском тестирования. При \nобнаружении модификации должен выдаваться сигнал аварии.\nБ.4.8 Подтверждение ввода\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы А.18 и А.19).\nЦель: обеспечение обнаружения ошибки во время работы самим оператором до активизации УО.\nОписание: ввод данных управления в УО через СБЗС-систему отображается оператору до передачи их в УО, \nс тем чтобы оператор имел возможность обнаружить и исправить ошибки. Проект системы должен как реагиро­\nвать на неправильные, неспровоцированные действия оператора, так и учитывать нижние/верхние пределы \nскорости и направление реакции человека. Этим можно исключить, например, более быстрое, чем предполага­\nется, нажатие клавиш оператором и настроить систему на восприятие двойного нажатия клавиши как одинарное \nили как повторное из-за того, что система (например, изображение на экране) слишком медленно реагирует на \nпервое нажатие клавиши. Последовательное нажатие одной и той же клавиши не должно действовать более \nодного раза при вводе критических данных; нажатие клавиши «ввод» (enter) или «да» (yes) неограниченное \nколичество раз не должно приводить к нарушению безопасности системы.\nДолжны быть предусмотрены процедуры временных пауз с возможностью выбора разных ответов \n(«да»/«нет» и т. п.), чтобы обеспечить возможность для размышления оператору, а системе — режим ожидания.\nНедостаточная способность к перезагрузке СБЗС-системы делает ее уязвимой, \nесли \nтолько про- \nграммные/аппаратные средства не спроектированы с учетом этой ситуации.\nЭтот метод/средство более подробно описан в [77].\nБ.5 Интеграция Е/Е/РЕ СБЗС-систем\nОбщая цель: исключение отказов на стадии интеграции и обнаружение любых отказов во время этой и \nпредыдущих стадий.\nБ.5.1 Функциональное тестирование\nП р и м е ч а н и е  — На этот метод/средство дана ссыпка в ГОСТ Р 53195.3 (таблица Б.3)ив ГОСТ Р 53195.4 \n(таблицы А.5 — А.7).\nЦель: обнаружение отказов на стадиях создания спецификации и проектирования. Исключение отказов во \nвремя реализации и интеграция программных и аппаратных средств.\nОписание: в процессе функционального тестирования определяется, достигнуты ли заданные характерис­\nтики системы. В систему поступают входные данные, которые адекватно характеризуют обычное выполнение \nопераций. Наблюдаемые выходные результаты сравниваются с результатами, заданными в спецификации. От­\nклонения от спецификации и указания на неполноту спецификации документируются.\nФункциональное тестирование электронных компонентов, предназначенных для многоканальной структу­\nры, обычно включает в себя тестирование и покупных промышленных компонентов, по каждому из которых про­\nизводитель (поставщик) уже провел тестирование и предварительно подтвердил соответствие. Помимо этого, \nрекомендуется, чтобы покупные промышленные компоненты были протестированы в сочетании с другими со­\nпрягаемыми компонентами той же партии для выявления неисправностей группового типа, которые в противном \nслучав могли бы остаться необнаруженными.\nВ целом для того, чтобы рабочие возможности системы были достаточными, следует выполнять рекомен­\nдации. приведенные в В.5.20 настоящего стандарта.\nБолее подробно этот метод/средство описан в [78—81].\n29"
        },
        {
            "page": 36,
            "page_content": "ГОСТ Р 53195.5—2010\nБ.5.2 Тестирование методом «черного ящика»\nП р и м е ч а н и е  — На этот метод/средство дана ссылка а ГОСТ Р 53195.3 (таблицы Б.З. Б.5иБ.6)ив \nГОСТ Р 53195.4 (таблицы А.5 — А.7).\nЦель: проверка динамического поведения системы в реальных условиях функционирования; выявление \nнесоответствия функциональной спецификации и оценка полезности и устойчивости.\nОписание: функции системы или программы выполняются в заданном окружении с заданными показате­\nлями тестирования, которые систематически формируются из спецификации в соответствии с установленными \nкритериями. Этим выявляется поведение системы и допускается возможность ее сравнения со спецификацией. \nПри проведении тестирования никакие сведения о внутренней структуре системы не используются. Проверкой \nопределяется правильность выполнения функциональным модулем всех функций, предусмотренных специфи­\nкацией. Метод формирования эквивалентных классов служит примером критерия тестирования данных методом \n«черного ящика». Массив входных данных подразделяется на конкретные диапазоны входных значений (эквива­\nлентные классы) на основе спецификации. После этого формируются тестовые примеры с использованием:\n- данных из допустимых диапазонов;\n- данных из недопустимых диапазонов:\n- данных предельных значений диапазонов:\n- экстремальных значений;\n- комбинаций перечисленных выше классов.\nЭффективными могут оказаться и другие критерии для выбора тестовых примеров в различных режимах \nтестирования (тестирование модуля, тестирование интеграции и тестирование системы). Например, критерий \n«экстремальные эксплуатационные условия» используется при тестировании системы в процессе подтвержде­\nния соответствия.\nБолее подробное описание этого метода/средства приведено в (62—64].\nБ.5.3 Статистическое тестирование\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.З. Б.5 и Б.6).\nЦель: проверка динамического поведения СБЗС-сисгемы и оценка ее полезности и устойчивости.\nОписание: статистическое тестирование выполняется с входными данными, выбранными в соответствии с \nоперационным (эксплуатационным) профилем, который отражает частоту выполнения пользователем различ­\nных операционных сценариев работы. Именно операционный профиль «руководит» выбором тестов, результаты \nкоторых образуют статистическую выборку для выполнения контроля. Это означает, что первыми будут обнаружи­\nваться отказы наиболее часто используемых компонентов системы и устраняться дефекты в наиболее часто \nвыполняемых фрагментах кода.\nБолее подробное описание этого метода/средства приведено в [84—87].\nБ.5.4 Натурные испытания\nП р и м е ч а н и я\n1 На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.З и Б.5).\n2 В контексте ПО см. также аналогичные средства в В.2.10 настоящего стандарта, а в приложении Г — \nстатистический подход.\nЦель: использование натурных (поповых) испытаний в качестве одного из средств исключения неисправ­\nностей во время интеграции СБЗС-систем и/или в процессе подтверждения соответствия требованиям безопас­\nности СБЗС-систем.\nОписание: применение компонентов или подсистем, которые при их использовании показали путем испы­\nтаний полное отсутствие ошибок или наличие только несущественных ошибок и несущественные их изменения в \nтечение достаточно длительного периода времени эксплуатации во многих различных применениях. В частности, \nдля сложных компонентов с множеством функций (например, операционные системы, интегральные схемы) \nразработчик должен обратить внимание на те функции, которые были фактически протестированы методом \nнатурных испытаний. Например, рассмотреть подпрограммы самотестирования для обнаружения неисправнос­\nтей при отсутствии в период эксплуатации неисправностей аппаратных средств. О подпрограммах нельзя ска­\nзать. что они протестированы, поскольку они никогда не выполняли функций обнаружения своих неисправностей.\nПри использовании натурных испытаний должны быть соблюдены следующие требования:\n- неизменность спецификации;\n- 10 систем в различных применениях;\n- 105 часов работы и по меньшей мере один год сервисной поддержки.\nНатурные испытания документируются производителем (поставщиком) и/или эксплуатирующей компани­\nей. Эта документация должна содержать, по меньшей мере, следующие данные;\n- точное обозначение (идентификацию) системы и ее компонентов, включая компоненты управления вер­\nсией АС;\n- сведения о пользователях и времени применения;\n- время наработки в часах:\n30"
        },
        {
            "page": 37,
            "page_content": "ГОСТР 53195.5—2010\n- процедуры выбора системы и прикладные программы, использованные при испытаниях;\n- процедуры обнаружения, регистрации и устранения неисправностей, а также процедуры устранения \nпоследствий и причин их возникновения.\nДанный метод/средство применим в большей степени к отдельным составляющим (подсистемам) \nСБЗС-систем. Его более подробное описание приведено в [88. 89].\nБ.6 Оценка соответствия СБЗС-системы требованиям безопасности\nГлобальная цель: оценка соответствия СБЗС-системы спецификации требований безопасности.\nБ.6.1 Функциональное испытание в условиях окружающей среды\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблица Б.5).\nЦель: оценка, защищена пи СБЗС-система от типичных воздействий окружающей среды.\nОписание: система подвергается воздействию окружающей среды при различных условиях.\nСтандартизованные требования к ряду воздействий подробно описаны в [58—60. 62. 90].\nБ.6.2 Испытание на устойчивость к пиковым выбросам внешних воздействий\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.5 и Б.6).\nЦель: проверка способности СБЗС-систем в условиях пиковых выбросов внешних электромагнитных воз­\nдействий.\nОписание: система загружается типичной прикладной программой, и все периферийные линии (все цифро­\nвые. аналоговые и последовательные интерфейсы, шины, источники питания и т. д.) подвергаются воздействию \nстандартных электромагнитных помех. Для получения количественной оценки целесообразно очень вниматель­\nно подходить к предельным значениям выбросов внешних воздействий. Выбранный класс помех окажется не­\nподходящим. если функция не выполняется.\nБ.6.3 Статический анализ\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.5 и Б.6) и в ГОСТ Р\n53195.4 (таблица А.9).\nЦель: исключение систематических неисправностей, которые могут приводить к отказам в тестируемой \nсистеме вначале или после многих пет эксплуатации.\nОписание: этот систематический и. по возможности, автоматизированный подход предусматривают иссле­\nдование конкретных статических характеристик опытных образцов составляющих системы для обеспечения пол­\nноты. согласованности, отсутствия неоднозначностей в сформулированных требованиях (например, в руководя­\nщих материалах по конструкции, системных спецификациях и в перечне данных о применении). Статический \nанализ воспроизводим. Он применим к опытному образцу, который воспроизводим и четко определяет заверша­\nющий этап. Примерами статического анализа АС и ПО являются:\n- анализ согласованности потока данных:\n- анализ управления потоком (определение маршрутов, определение кода недоступности):\n- анализ \nинтерфейсов \n(исследование \nпередачи \nпеременных \nмежду \nразличными \nпрограммными \nмодулями);\n- анализ потока данных для обнаружения вызывающих сомнения последовательностей по созданию, \nссылкам и удалению переменных;\n- применение тестирования к конкретным руководящим материалам (например, по вопросам: длина пути \nутечки тока и зазоры, расстояние между совокупностями модулей, расположение физических модулей, механи­\nчески чувствительные физические модули, индивидуальное использование физических модулей при их \nвнедрении).\nБ.6.4 Динамический анализ\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.5 и Б.6) и в ГОСТ Р\n53195.4 (таблицы А.5 и А.9).\nЦель: обнаружение ошибок в спецификации путем исследования динамического поведения опытных об­\nразцов, составляющих системы.\nОписание: динамический анализ СБЗС-систем выполняется, если подавать на вход близкой к эксплуатаци­\nонному образцу элемента (модуля) системы, связанной с безопасностью, входные данные, типичные для задан­\nного эксплуатационного окружения. Анализ признается удовлетворительным, если наблюдаемое поведение СБЗС- \nсистемы соответствует требуемому поведению. Любой отказ СБЗС-системы должен быть устранен, после чего \nследует проанализировать новые варианты эксплуатации.\nБ.6.5 Анализ отказов\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.5 и Б.6).\nБ.6.5.1 Виды отказов и анализ их последствий\nЦель: проведение анализа проекта системы с исследованием всех возможных источников отказов компо­\nнентов системы и определением влияния этих отказов на поведение и безопасность системы.\n31"
        },
        {
            "page": 38,
            "page_content": "ГОСТ Р 53195.5—2010\nОписание: анализ обычно производится совещанием инженеров. Каждый компонент системы анализиру­\nется по очереди для выявления набора режимов отказов, их причин и результатов, определения процедуры \nобнаружения и выдачи рекомендаций. При выдаче рекомендаций они документируются в виде корректирующих \nдействий.\nВиды отказов и анализ их последствий подробно описаны в [89—91].\nБ.6.5.2 Диаграммы последовательностей событий\nП р и м е ч а н и е  — На этот метод/средство дана ссыпка в ГОСТ Р 53195.4 (таблицы А. 10. Б.З и Б.4).\nЦель: моделирование СБЗС-системы с помощью диаграмм последовательностей событий для представ­\nления проекта системы в виде последовательности комбинаций базовых событий.\nОписание: это средство может рассматриваться как комбинация анализа на основе дерева неисправнос­\nтей и анализа на основе дерева событий. Начиная с критических событий, граф последовательностей причин \nпроходит в прямом и обратном направлениях. Прохождение в обратном направлении эквивалентно дереву неис­\nправностей. где критическое событие представлено в виде представленного верхнего события. Прохождение в \nпрямом направлении позволяет определять возможные последствия, возникающие из события. В узле графа \nмогут быть символы, которые описывают условия распространения причин по различным ветвям от этого узла. \nВременные задержки также могут учитываться. Эти условия также могут быть описаны с помощью деревьев \nнеисправностей. Чтобы диаграмма выглядела более компактной, пути распространения могут быть объединены \nс логическими символами. Для использования в диаграммах последовательностей причин используются стан­\nдартные символы. Такие диаграммы могут быть применены для вычисления вероятности появления определен­\nных критических последовательностей.\nДиаграммы последовательности событий более подробно описаны в [92. 93].\nБ.6.5.3 Анализ дерева событий\nП р и м е ч а н и е  — На этот метод/средство дана ссыпка в ГОСТ Р 53195.4 (таблица Б.4).\nЦель моделирование с помощью диаграмм последовательности событий, которая может возникать в \nсистеме после инициализирующего события, для установления серьезности возможных последовательностей.\nОписание: в верхней части диаграммы записывают последовательность условий, которая соответствует \nпоследовательности событий, происходящих после инициализирующего события. Начиная с инициализирующего \nсобытия, которое является целью анализа, проводят линию к первому условию последовательности. Наличие у \nдиаграммы ветвей «да» и «нет» указывает, каким образом будущие события зависят от условий. Каждая из этих \nветвей продолжается к следующему условию. Однако не все условия пригодны для всех ветвей. Какая-то из них \nпродолжится до окончания последовательности условий, но каждая ветвь дерева, сконструированная таким \nспособом, представляет возможную последовательность. Дерево событий может быть использовано для вычис­\nления вероятности различных последовательностей с учетом значений вероятности и числа условий в последо­\nвательности.\nБолее подробное описание этого метода'средства приведено в ГОСТ 27.310 и [94].\nБ.6.5.4 Виды неисправностей, анализ влияний и анализ критичности\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблицы А. 10 и Б.4).\nЦель: ранжирование критичности компонентов, могущих вызвать нарушения, повреждения или ухудшение \nработы СБЗС-системы при одиночных ошибках, для определения, каким компонентам может потребоваться \nособое внимание и какие средства управления необходимы для обеспечения процессов проектирования или \nэксплуатации.\nОписание: критичность компонентов может быть ранжирована многими способами. В процедуре ранжиро­\nвания критичности компонентов величина критичности для любого компонента зависит от числа определенного \nвида отказов, предполагаемых в процессе выполнения каждого миллиона операций, реализуемых в критичес­\nком режиме. Величина критичности является функцией девяти параметров, большинство из которых должны \nбыть измерены. Простой метод определения критичности состоит в умножении вероятности отказа компонента \nна ущерб, который может быть причинен этим отказом. Этот метод аналогичен простой оценке степени риска.\nБолее подробное описание данного метода/средства приведено в [95].\nБ.6.5.5 Анализ дерева неисправностей\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица Б.4).\nЦель: упрощение анализа событий или комбинаций событий, вызывающих опасности или серьезные по­\nследствия.\nОписание: начиная с события, которое может непосредственно вызвать опасность или серьезные послед­\nствия («вершины дерева событий»), анализ выполняют по ветвям дерева. Комбинации причины описываются \nлогическими операторами (И. ИЛИ, НЕ и т. п.). Затем анализируют промежуточные причины тем же способом \nи т. д „ возвращаясь к базовым событиям, по достижении которых анализ прекращают.\nЭтот метод является графическим, и для изображения дерева неисправностей используют набор стандар­\nтизованных символов. Метод предназначен в основном для анализа АС, но следует, по возможности, применять \nего к анализу отказов ПО.\nБолее подробное описание данного метода/средства приведено в [96].\n32"
        },
        {
            "page": 39,
            "page_content": "ГОСТР 53195.5—2010\nБ.6.6 Анализ наихудшего случая\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.5 и Б.6).\nЦель: исключение систематических ошибок, возникающих в результате неблагоприятных сочетаний усло­\nвий окружающей среды и допусков на компоненты.\nОписание: эксплуатационные возможности системы и параметры компонентов исследуются или вычисля­\nются теоретически. При этом для условий окружающей среды задаются их допустимые предельные значения. \nАнализируются и сопоставляются со спецификацией наиболее существенные характеристики системы.\nБолее подробное описание данного метода/средства приведено в [971.\nБ.6.7 Расширенные функциональные испытания\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.5 и Б.6).\nЦель: обнаружение неисправностей на стадиях составления спецификации, проектирования и разработки \nсистемы; проверка поведения СБЗС-системы в случаях ввода редко встречающихся или неспецифицированных \nвидов данных.\nОписание: расширенное функциональное тестирование обеспечивает проверку функционального поведе­\nния СБЗС-системы как реакцию на входные условия, которые ожидаются только в редких случаях (например, \nглобальный отказ) или которые не охватываются спецификацией СБЗС-системы (например, некорректные опе­\nрации). Для редко встречающихся условий наблюдаемое поведение СБЗС-системы сравнивается со специфика­\nцией. В тех случаях, когда реакция СБЗС-системы не специфицирована, следует убедиться в том. что заданная \nбезопасность сохранена в наблюдаемой реакции системы.\nБолее подробное описание данного метода/средства приведено в [98].\nБ.6.8 Испытание в наихудших случаях\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.5 и Б.6).\nЦель: тестирование ситуаций, специфицированных во время анализа наихудших случаев.\nОписание: эксплуатационные возможности СБЗС-системы и параметры компонентов тестируются в усло­\nвиях наихудших случаев. При этом для условий окружающей среды задаются их допустимые предельные значе­\nния. Анализируются и сопоставляются со спецификацией наиболее существенные характеристики системы.\nБ.6.9 Испытание с введением неисправностей\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.3 (таблицы Б.5 и Б.6).\nЦель: внесение отказов в АС системы или их имитация и документирование реакции системы.\nОписание: в настоящем стандарте представлен качественный метод оценки зависимости поведения систе­\nмы от внесенных или имитированных неисправностей. Для описания местоположения и типа неисправностей, \nа также способа их внесения обычно используют детализированные функциональные блоки, принципиальные \nи структурные схемы. Например, электропитание может не поступать в различные модули; линии электропита­\nния. линии общей шины или адресные линии могут быть разомкнуты или корогкозамхнуты; компоненты или их \nпорты могут быть разомкнуты или закорочены; реле могут быть замкнуты или разомкнуты, либо их действия могут \nвыполняться в неправильные моменты времени и т. д. Возникающие в результате отказы системы классифициру­\nют. например, как в МЭК 60812 (таблицы I и II). см. [99]. Обычно вводят одиночные неисправности в устойчивом \nсостоянии системы. Однако в случав, когда тестом встроенной диагностики неисправность не обнаруживается \nили оказывается неочевидной, она может сохраниться в системе и вызвать следующую неисправность. При этом \nчисло неисправностей может быстро возрасти до сотен.\nЭта работа проводится многопрофильным коллективом специалистов и в присутствии представителя по­\nставщика системы, который должен давать необходимые консультации. Для тех отказов, которые приводят к \nсерьезным последствиям, должно вычисляться и оцениваться среднее время наработки на отказ. Если это \nвремя малб, необходима модификация системы.\nБолее подробное описание данного метода/средства приведено в [90. 95].\n33"
        },
        {
            "page": 40,
            "page_content": "ГОСТ Р 53195.5— 2010\nПриложение В \n(справочное)\nМетодыУсредства для достижения полноты \nбезопасности программного обеспечения (см. ГОСТ Р 53195.4)\nВ.1 Общие положения\nМетоды/средства, содержащиеся в этом приложении, не следует рассматривать как полные или исчерпы­\nвающие. СБЗС-системы. средства программирования непрерывно развиваются, и методы/средства. предназна­\nченные для достижения полноты безопасности программного обеспечения, непрерывно совершенствуются. \nВ первую очередь следует ориентироваться на стандартизованные методы/средства. В случав применения \nновых методоа|'средств следует сформулировать и сохранить все доказательственные материалы, демонстри­\nрующие преимущество новых методов, средств перед методами/сред ствами, описанными в настоящем прило­\nжении.\nБолее подробное описание некоторых методое/средств приведено в (99—103].\nВ.2 Требования и детальное проектирование\nП р и м е ч а н и е  — Соответствующие методы/средства приведены в Б.2 настоящего стандарта.\nВ.2.1 Структурные методы\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблицы А.2 и А.4).\nВ.2.1.1 Общие положения\nЦель: обеспечение необходимого качества разработки ПО. Основное внимание уделено ранним стадиям \nжизненного цикла создаваемой системы. В структурных методах используются как точные, так и интуитивные \nпроцедуры и нотации (поддерживаемые компьютерами) для задания и документирования требований и обеспе­\nчения реализации программы в логической последовательности структурированным способом.\nОписание: существует ряд структурных методов. Некоторые из них спроектированы для выполнения тради­\nционных функций обработки данных и групповых операций, другие (MASCOT. JSD, Yourdon в режиме реального \nвремени) — в большей степени ориентированы на процессы управления и задачи реального времени (которые \nболее критичны с точки зрения безопасности).\nСтруктурные методы — это. в основном, «интеллектуальные инструменты*, предназначенные для обоб­\nщенного восприятия и декомпозиции задачи или системы. К их основным свойствам относятся:\n- логичность рассуждений и выводов, декомпозиция сложной задачи на управляемые стадии;\n- анализ и документирование общей системы, включая окружающую среду, а также разрабатываемую \nсистему;\n- декомпозиция данных и функций в разрабатываемой системе;\n- контрольные таблицы, то есть списки типов объектов, нуждающихся в анализе:\n- малая интеллектуальная перегрузка — просто, интуитивно, практично.\nНотации, используемые для анализа и документирования задач и объектов системы (например, на основе \nпроцессов и потоков данных), ориентированы на точность, однако нотации для выражения функций обработки, \nвыполняемых этими объектами, оказываются более неформальными. В то же время в некоторых методах час­\nтично используют (математически) формальные нотации (например, в JSD используют регулярные выражения, \nв Yourdon. SOM и SDL используют теорию конечных автоматов). Увеличение точности не только повышает уровень \nпонимания, но и обеспечивает возможность автоматизированной обработки.\nДругим преимуществом структурных нотаций является их наглядность, которая позволяет пользователю \nинтуитивно проверять возможности спецификации или проекта при неполной информации.\nНастоящий раздел содержит подробное описание пяти структурных методов: «Представление требова­\nний». «Разработка системы по Джексону», MASCOT. «Yourdon для систем реального времени» и «Методология \nструктурного анализа и проектирования (SADT)».\nБолее подробное описание данного метода/средства приведено в [104—106].\nВ.2.1.2 CORE — контролируемое представление требований\nЦель: обеспечение представления и формулирования всех требований.\nОписание: этот подход используют для улучшения взаимопонимания между потребителем/конечным пользо­\nвателем и аналитиком. Он не основан на математически строгой теории, а является средством коммуникации. \nМетод CORE создан для представления требований, а не спецификаций. Этот подход структурирован, все его \nпредставления проходят через различные уровни уточнений. Метод CORE используют для широкого круга задач. \nОн учитывает сведения об окружающей среде, в которой функционирует система, а также различные точки зре­\nния разных категорий пользователей. Метод CORE содержит руководящие материалы и тактические методы для \nухода от «грандиозного проекта». Аргументы такого ухода могут быть скорректированы либо явным образом \nидентифицированы и задокументированы. Таким образом, спецификации могут быть неполными, однако \nвыявленные нерешенные задачи и области высокого риска должны быть рассмотрены при последующем \nпроектировании.\nПодробное описание метода/средства приведено в [105— 110].\n34"
        },
        {
            "page": 41,
            "page_content": "ГОСТР 53195.5—2010\nВ.2.1.3 Разработка системы по Джексону — JSD\nЦель: разработка программной системы специально для реального времени, охватывающая стадии от \nразработки требований до кодирования.\nОписание: метод JSD (Jackson Structured Development), разработанный Майклом Джексоном в середине \n80-х годов, предлагает стиль разработки программных систем, отличный от стиля, принятого в методах SA^SD или \nОМТ. В методе JSD не делается различий между этапом анализа требований к системе и этапом ее разработки. \nОба этапа объединяются в один общий этап разработки спецификаций проектируемой системы. При этом этапе \nрешается вопрос «Что должно быть сделано?». Вопрос «Как это должно быть сделано?» решается на следую­\nщем этапе — этапе реализации системы. Метод JSD часто применяют для проектирования систем реального \nвремени. В нем использована система графических обозначений, хотя сам метод менее ориентирован на \nграфиху. чем методы SA/SD и ОМТ.\nРазработка модели JSD начинается с изучения объектов реального мира. Целью системы является обес­\nпечение требуемой функциональности, но сначала следует убедиться, что эта функциональность согласуется с \nреальным миром. Модель JSD описывает реальный мир в терминах сущностей (объектов), действий и порядка \nвыполнения действий. Разработка системы по методу JSD включает в себя следующие шесть этапов:\n- разработку действий и объектов:\n- разработку структуры объектов;\n- разработку исходной модели;\n- разработку функций;\n- разработку временных ограничений;\n- реализацию системы.\nНа этапе разработки действий и объектов разработчик, руководствуясь внешними требованиями к проек­\nтируемой системе, составляет перечень сущностей (объектов) и действий реального мира, связанных с этой \nсистемой. Так. например, при проектировании системы управления двумя лифтами в шестиэтажном доме \nможно выделить два объекта: «лифт» и «кнопка» — и три действия: «нажатие кнопки», «лифт приходит на \nэтаж л» и «лифт покидает этаж л». И объекты, и действия соответствуют реальной ситуации. Все действия \nявляются атомарными (неразложимыми на подцействия) и происходят в фиксированные моменты времени.\nНа этапе разработки структуры объектов действия каждого объекта частично упорядочиваются во времени. \nТак. в рассматриваемом примере действия «лифт приходит на этаж л» и «лифт покидает этаж л» должны чередо­\nваться: два действия «лифт приходит на этаж л» не могут идти одно за другим.\nЭтап разработки исходной модели связывает реальный мир с абстрактной моделью, устанавливая соот­\nветствие между вектором состояния и потоком данных. Вектор состояния обеспечивает «развязку» по управле­\nнию; так. в примере с лифтами первая же нажатая кнопка вверх установит значение переключателя (флажка), \n«вверх», после чего лифт не будет реагировать на дальнейшие нажатия кнопок вверх, так что нажатие кнопки \nвверх один или пять раз приведет к одинаковому результату. Аналогично поток данных позволяет обеспечить \n«развязку» по данным. Примером гложет служить буфер файла.\nНа этапе разработки функций с помощью специального псевдокода устанавливаются выходные данные \nкаждого действия. Для системы управления лифтами примером функции является переключение лампочек на \nпанели лифта при прибытии лифта на очередной этаж.\nНа этапе разработки временных ограничений решается вопрос о допустимых временных отклонениях \nсистемы от реального мира. В результате получается множество временных ограничений. В примере с лифтами \nодним из временных ограничений будет решение вопроса о том. как долго нужно нажимать на кнопку лифта, \nчтобы добиться его реакции.\nНаконец, на этапе реализации системы решаются проблемы управления процессами и распределения \nпроцессов по процессорам.\nМетод JSD может быть лишь условно назван объектно-ориентированным: в нем почти не рассматривается \nструктура объектов, недостаточно внимания уделено их атрибутам. Некоторые действия метода JSD являются, по \nсуществу, зависимостями между объектами по методологии ОМТ.\nТем не менее метод JSD гложет успешно применяться для проектирования и реализации следующих типов \nприкладных программных систем:\n- параллельные асинхронные программные системы, в которых процессы могут взаимно синхронизиро­\nвать друг друга;\n- программные системы реального времени; метод JSD ориентирован именно на такие системы;\n- программные системы для параллельных компьютеров; парадигма, принятая в методе JSD. гложет ока­\nзаться полезной для этого случая.\nМетод JSD плохо приспособлен для решения следующих задач:\n- высокоуровневый анализ, так как метод JSD не обеспечивает широкого понимания задачи; он не эффек­\nтивен для абстракции и упрощения задач;\n- разработка баз данных, так как это слишком сложная задача для метода JSD.\nПодробное описание метода/средства приведено в (111—113).\nВ.2.1.4 Модульный метод построения, эксплуатации и тестирования программных средств MASCOT\nЦель; обеспечение проектирования и реализации систем реального времени.\nОписание: MASCOT представляет собой программно поддерживаемый метод проектирования. Он позво­\nляет описывать структуры систем реального времени способом, не зависящим от типа аппаратных средств или \nязыка реализации. При его применении высокоорганизованно реализуется проектирование, приводящее к стро-\n35"
        },
        {
            "page": 42,
            "page_content": "ГОСТ Р 53195.5—2010\nго модульной структуре, и обеспечивается близкое соответствие между функциональными элементами проекта и \nэлементами АС. появляющимися при интеграции системы. Система представляется в виде сети конкурирующих \nпроцессов, которые взаимодействуют через каналы. Каналами могут быть совокупности файлов или очереди \n(конвейеры данных). Управление доступом к каналу описывается независимо от процессов в терминах механиз­\nмов доступа, которые активизируют также правила планирования процессов. Последняя версия MASCOT была \nспроектирована с учетом реализации ADA.\nMASCOT обеспечивает стратегию приемлемости, основанную на тестировании и верификации как отдель­\nных программных модулей, так и более крупных совокупностей функционально взаимосвязанных программных \nмодулей. Реализация MASCOT ориентирована на ядро MASCOT — набор примитивов планирования, которые \nлежат в основе реализации и обеспечивают механизмы доступа.\nБолее подробное описание данного метода/средства приведено в (114).\nВ.2.1.5 Метод Йордона (Yourdon) для систем реального времени\nЦель: обеспечение разработки спецификации и проектирования систем реального времени.\nОписание: схема разработки системы, лежащая в основе этого метода, включает в себя три стадии. На \nпервой стадии происходит создание «сущностной модели», которая описывает поведение системы. На второй \nстадии строится модель реализации, описывающая структуру и механизмы, которые, будучи реализованными, \nотражают требуемое поведение. На третьей стадии происходит фактическое построение АС и ПО системы. Три \nстадии строго соответствуют трем традиционным стадиям — спецификации, проектированию и разработке, но \nосновное внимание уделено тому, чтобы разработчик на каждой стадии активно занимался моделированием.\nСущностная модель состоит из двух частей:\n- модель окружающей среды, содержащая описание границ между системой и ее окружением, а также \nописание внешних событий, на которые должна реагировать система;\n- модель поведения, которая содержит схемы, описывающие преобразования, выполняемые системой в \nответ на события, и описание данных, которые система должна содержать для выдачи ответов.\nМодель реализации также подразделяется на две подмодели, описывающие распределение отдельных \nпроцессов в процессорах и декомпозицию процессов на программные модули.\nДля создания этих моделей рассматриваемый метод сочетает в себе множество хорошо известных мето­\nдов и средств, в том числе построение диаграмм потоков данных, преобразование графов, структурированный \nанглийский язык, диаграммы переходов состояний и сети Петри. Кролю того, этот метод предоставляет средства \nмоделирования предложенного проекта системы для описания на бумаге или автоматического построения из \nсоставленных моделей.\nБолее подробное описание данного метода/средства приведено в [106].\nВ.2.1.6 Методология структурного анализа и проектирования — SADT\nЦель: моделирование и анализ процессов принятия решений и задачи управления в сложных системах на \nуровне информационных потоков, представленных в виде диаграмм (схем).\nОписание: методология SADT представляет собой совокупность методов, правил и процедур для построе­\nния функциональной модели объекта какой-либо предметной области. Функциональная модель SADT отобра­\nжает функциональную структуру объекта, т. е. производимые им действия и связи между этими действиями.\nОсновные элементы этой методологии основываются на следующих концепциях:\n- графическое представление блочного моделирования (графика блоков и линий со стрелками SADT-схемы \nотображает функцию в виде блока действия, а интерфейсы входа/выхода представляются линиями, соответствен­\nно входящими в блок и выходящими из него). Взаимодействие блоков действия друг с другом описывается посред­\nством интерфейсных линий, выражающих «ограничения», которые, в свою очередь, определяют, когда и каким \nобразом функции выполняются и управляются;\n- строгость и точность (выполнение правил SADT требует достаточной строгости и точности, не накладывая \nв то же время чрезмерных ограничений на действия разработчика).\nПравила SADT включают 8 себя:\n- ограничение количества блоков на каждом уровне декомпозиции (как правило. 3—6 блоков действия);\n- связность диаграмм (номеров блохов);\n- уникальность меток и наименований (отсутствие повторяющихся имен);\n- синтаксические правила для графики (блоков действия и линий);\n- разделение входов и управлений (правило определения роли данных);\n- отделение организации от функции (т. е. исключение влияния организационной структуры на функцио­\nнальную модель).\nМетодология SADT может быть использована для моделирования широкого круга систем и определения \nтребований и функций, а также для разработки системы, которая удовлетворяет этим требованиям и реализует \nэти функции. Для уже существующих программных систем методология SADT может быть использована для \nанализа функций, выполняемых системой, а также для указания механизмов, посредством которых они осуще­\nствляются.\nРезультатом применения методологии SADT является модель, которая состоит из диаграмм, фрагментов \nтекстов и глоссария, имеющих ссылки друг на друга. Диаграммы — главные компоненты модели, все функции ИС \nи интерфейсы на них представлены как блоки действия и линии (рисунок В.1). Место соединения линии с блоком \nдействия определяет тип интерфейса. Линии обозначают следующее:\n- «Вход»: указывается линией со стрелкой, входящей в блок действия слева. Входы могут быть представле-\n36"
        },
        {
            "page": 43,
            "page_content": "ГОСТР 53195.5—2010\nны материальными или нематериальными объектами, и они предназначены для обработки одним или несколь­\nкими блоками действий:\n- «Управление»: обычно это инструкция, процедура, критерий выбора и т. п. Управление реализует выпол­\nнение действий и изображается линиями со стрелками сверху блока действия:\n- «Механизм»: ресурс (в виде персонала, организационного подразделения, компьютера, автоматизиро­\nванной системы или описания), необходимый действию для выполнения своих задач:\n- «Выход»: все, что вырабатывается в результате действия, изображается линией со стрелкой с правой \nстороны блока действия.\nОдной из наиболее важных особенностей методологии SADT является постепенное введение все больших \nуровней детализации по мере создания диаграмм, отображающих модель.\nJ __ L\nВХОДЫ\nт\nт\n-Вьахды\nРисунок В.1 — Функциональный блок действия и интерфейсные линии\nНа рисунке В.2. где приведены четыре диаграммы и их взаимосвязи, показана структура SADT-модели. \nКаждый компонент модели может быть декомпозирован на другой диаграмме. Каждая диаграмма иллюстрирует \n«внутреннее строение» блока действия на «родительской» диаграмме.\nРисунок В.2— Структура SADT-модели: декомпозиция диаграмм\n37"
        },
        {
            "page": 44,
            "page_content": "ГОСТ Р 53195.5—2010\nНа рисунках В.З — В.5 представлены различные варианты выполнения функций и соединения линий \nс блоками действия.\nРисунок В.З — Одновременное выполнение\nРисунок В.4 — Взаимосвязь диаграммы А12 с родительской диаграммой А1\nНекоторые линии присоединены к блокам действия диаграммы обоими концами, у других же один конец \nостается неприсоединенным. Неприсоединенные линии соответствуют входам, управлениям и выходам роди­\nтельского блока. Источник или получатель этих пограничных линий может быть обнаружен только на \nродительской диаграмме. Неприсоединенные концы должны соответствовать линиям на исходной диаграмме. \nВсе пограничные линии должны продолжаться на родительской диаграмме, чтобы она была полной и непроти­\nворечивой.\nНа SADT-диаграммах явно не указаны ни последовательность, ни время. Обратные связи, итерации, про­\nдолжающиеся процессы и перекрывающиеся (по времени) функции могут быть изображены с помощью пиний. \nОбратные связи могут выступать в качестве комментариев, замечаний, исправлений и т. д. (рисунок В.5).\n38"
        },
        {
            "page": 45,
            "page_content": "ГОСТР 53195.5— 2010\nРисунок В.5 — Пример обратной связи\nМеханизмы (пинии с нижней стороны) показывают средства, с помощью которых осуществляется выполне­\nние функций. Механизмом может быть человек, подразделение, компьютер или любое другое устройство, кото­\nрое помотает выполнять данную функцию (рисунок В.6).\nТУцянкк\nподачи\nЭрины ,\nI Рыночные \nусловия\nа тя я кп м нтя\nО ф орм лтиа м м м\nдля Й ирим\n|  БроСф\nКонтракт\nРисунок В.6 — Пример диаграммы (механизмом является брокер)\nКаждый блок действия на диаграмме имеет свой номер. Блок действия любой диаграммы может быть \nдалее описан диаграммой нижнего уровня, которая, в свою очередь, может быть далее детализирована с помо­\nщью необходимого числа диаграмм. Таким образом, формируется иерархия диаграмм.\nДля того чтобы указать положение любой диаграммы или блока действия в иерархии, используются номера \nдиаграмм. Например. А21 является диаграммой, которая детализирует блок действия 1 на диаграмме А2. Анало­\nгично А2 детализирует блок действия 2 на диаграмме АО. которая является самой верхней диаграммой модели. \nНа рисунке В.7 показано типичное дерево диаграмм.\nАО\nРвробогвть \nсфш иотфрнрр систему\nА1\nА2\nАЗ\nПгннирампл»\nРмрвОсгжть\nПостроить\nпроцесс\nграфик робот\nмодель системы\nА11\nA1Z\nА15\nПртчгпъ\nРвагнитвть\nУпивпьппян\nСтруктуру\nтрвбомшив.\nсопутствующие\nи метод\n«трвты, время\nкмршфиятмй\nизготовления\nне рекрабслту\nсистемы\nРисунок В.7 — Иерархия диаграмм\n39"
        },
        {
            "page": 46,
            "page_content": "ГОСТ Р 53195.5—2010\nОдним из важных моментов при проектировании ИС с помощью методологии SADT является точная согла­\nсованность типов связанности между функциями. Различают по крайней мере семь типов связанности, имеющих \nразличные значимости (таблица В.1).\nТ а б л и ц а  В.1 — Типы связанности\nТип связанности\nУровень значимости\nСлучайная\n0\nЛогическая\n1\nВременная\n2\nПроцедурная\n3\nКоммуникационная\n4\nПоследовательная\n5\nФункциональная\n6\nКаждый тип связанности кратко определен и проиллюстрирован ниже с помощью типичного примера из\nSADT.\nСлучайная связанность (тип 0) — наименее желательная.\nСлучайная связанность возникает, когда конкретная связь между функциями мала или полностью отсут­\nствует. Это относится к ситуации, при которой имена данных на SADT-линиях в одной диаграмме имеют малую \nсвязанность друг с другом. Крайний вариант этого случая показан на рисунке В.8.\nРисунок В.8 — Случайная связанность\nЛогическая связанность (тип 1) образуется тогда, когда данные и функции собираются вместе из-за того, что \nони попадают в общий класс или набор элементов, но необходимые функциональные отношения между ними не \nобнаруживаются.\nВременная связанность (тип 2) возникает вследствие того, что связанные по времени элементы представ­\nляют функции, связанные во времени, когда данные используются одновременно или функции включаются па­\nраллельно. а не последовательно.\nПроцедурная связанность (тип 3) — процедурно-связанные элементы появляются сгруппированными вме­\nсте вследствие того, что они выполняются в течение одной и той же части цикла или процесса. Пример процедур­\nно-связанной диаграммы приведен на рисунке В.9.\nРисунок В.9 — Процедурная связанность\n40"
        },
        {
            "page": 47,
            "page_content": "ГОСТР 53195.5—2010\nКоммуникационная связанность (тип 4) — блоки группируются вследствие того, что они используют одни и \nте же входные данные и/или производят одни и те же выходные данные (рисунок В.10).\nПоследовательная связанность (тип 5) — выход одной функции служит входными данными для следующей \nфункции. Связанность между элементами на диаграмме является более тесной, чем для рассмотренных выше \nтиповых связанностей, поскольку моделируются причинно-следственные зависимости (рисунок В. 11).\nРисунок В.10 — Коммуникационная связанность\nРисунок В. 11 — Последовательная связанность\nФункциональная связанность (тип 6) — при наличии полной зависимости одной функции от другой. \nДиаграмма, которая является чисто функциональной, не содержит чужеродных элементов, относящихся к \nпоследовательному или более слабому типу связанности. Одним из способов определения функционально­\nсвязанных диаграмм является рассмотрение двух блоков, связанных через управляющие линии, как показано на \nрисунке В. 12.\nРисунок В.12 — Функциональная связанность\nВ математических терминах необходимое условие для простейшего типа функциональной связанности, \nпоказанной на рисунке В.12. имеет следующий вид:\nC = g(B) = g(f(A)),\nгде д — функция, реализуемая блоком действия А.\n1 — функция, реализуемая блоком действия В.\nВ таблице В.2 представлены все типы связанностей, рассмотренные выше. Важно отметить, что уровни \n4—6 устанавливают типы связанностей, которые разработчики считают наиболее важными для получения диаг­\nрамм хорошего качества.\nТ а б л и ц а  В.2 — Характеристики связанностей\nУровень\nзначимости\nТип\nсвязанности\nДля функции\nДля данных\n0\nСлучайная\nСлучайная\nСлучайная\n1\nЛогическая\nФункции одного и того же множества \nили типа (например, «редактиро­\nвать все входы»)\nДанные одного и того же множе­\nства или типа\n2\nВременная\nФункции одного и того же периода \nвремени (например, «операции \nинициализации»)\nДанные, используемые в каком- \nлибо временном интервале\n41"
        },
        {
            "page": 48,
            "page_content": "ГОСТ Р 53195.5— 2010\nОкончание таблицы В. 2\nУровень\nзначимости\nТип\nсвязанности\nДля функций\nДля данных\n3\nПроцедурная\nФункции, работающие в одной и той \nже фазе или итерации (например, \n«первый проход компилятора»)\nДанные, используемые во время \nодной и той же фазы или итерации\n3\nПроцедурная\nФункции, использующие одни и те \nже данные\nДанные, на которые воздействует \nодна и та же деятельность\n4\nКоммуникационная\nФункции, выполняющие последова­\nтельные преобразования одних и \nтех же данных\nДанные, преобразуемые последо­\nвательными функциями\n5\nПоследовательная\nФункции, объединяемые для выпол­\nнения одной функции\nДанные, связанные с одной функ­\nцией\n6\nФункциональная\nВнутренняя функция является аргу­\nментом внешней функции\nДанные для внешней функции свя­\nзаны с внутренней функцией\nКогда действия сильно связаны между собой многими отношениями, то целесообразно объединить эти \nдействия в единую группу, поместить в один блок действия, не детализируя в дальнейшем еш содержание. Осно­\nвополагающий принцип группирования действий в блоки действия состоит в том. что образуемые в результате \nблоки действия должны соединяться между собой только небольшим числом отношений.\nДекомпозиция моделей диаграмм реализуется до тех пор. пока не потеряет смысл дальнейшая детализа­\nция блоков действия. Этот процесс завершается, когда действия внутри блоков действия становятся неразде­\nлимыми или когда последующая детализация действий внутри блоков действия выходит за область анализа \nсистемы.\nБолее подробное описание данного мвтода’средства приведено в [115. 116].\nВ.2.2 Диаграммы потоков данных\nП р и м е ч а н и е  — На этот метод/средсгво дана ссылка в ГОСТ Р 53195.4 (таблицы Б.5 и Б.7).\nЦель: программная поддержка описания потока данных в форме диаграмм.\nОписание: диаграммы потоков данных описывают преобразование входных данных в выходные для каждо­\nго компонента диаграммы, представляющего различные преобразования.\nДиаграммы потоков данных состоят из трех компонентов:\n- именованные стрелки — представляют поток данных, входящих и исходящих из блоков преобразования, \nс кратким описанием этих данных;\n- именованные кружки (эллипсы) — представляют блоки преобразования с кратким описанием преобразо­\nваний:\n- операторы («and», «хот») — используются для связи именованных стрелок.\nКаждый кружок на диаграмме потока данных может рассматриваться как самостоятельный блок, который \nпри появлении на его входах данных преобразует их в выходные. Одним из основных преимуществ диаграмм \nявляется то. что они показывают преобразования, не устанавливая, как они реализуются. Чистая диаграмма \nпотоков данных не включает в себя управляющую информацию или информацию о последовательности процес­\nса. ибо это реализуется в расширениях для реального времени, как в методе Yourdon для систем реального \nвремени (см. В.2.1.5).\nСоздание диаграмм потока данных является наилучшим подходом при анализе систем от входов к выхо­\nдам. Каждый кружок на диаграмме должен представлять разное преобразование — его выходы должны отли­\nчаться от его входов. Не существует правил определения общей структуры диаграммы, и создание диаграммы \nпотока данных является одним из творческих аспектов создания проекта системы. Подобно всем проектам, это \nитеративная процедура, уточняющая начальную диаграмму для создания конечной диаграммы.\nБолее подробное описание данного метода/средства приведено в [117. 118].\nВ.2.3 Структурные диаграммы\nП р и м е ч а н и е  — На этот метод/средсгво дана ссылка в ГОСТ Р 53195.4 (таблица Б.5).\nЦель: представление структуры программы в виде диаграммы.\nОписание: структурные диаграммы дополняют диаграммы потоков данных. Они описывают программируе­\nмую систему и иерархию ее компонентов, а также отображают их графически в виде дерева. Они описывают \nспособ реализации элементов диаграммы потоков данных в виде иерархии программных модулей.\n42"
        },
        {
            "page": 49,
            "page_content": "ГОСТР 53195.5— 2010\nСтруктурная схема показывает взаимоотношения между программными модулями, не указывая при этом \nпорядок активизации этих модулей. Структурные диаграммы изображаются с использованием следующих четы­\nрех символов:\n- прямоугольник с именем модуля;\n- линия, соединяющая эти прямоугольники, формирующие структуру;\n- стрелка, отмеченная кругом (без штриховки), с именем данных, передаваемых в направлении элементов \nструктурной схемы и обратно (обычно такая стрелка изображается параллельно с линиями, соединяющими \nпрямоугольники схемы);\n- стрелка, отмеченная кругом (заштрихованным), с именем сигнала управления, проходящего в структурной \nсхеме от одного модуля к другому, и эта стрелка также изображается параллельно линии, соединяющей два \nмодуля.\nИз любой нетривиальной диаграммы потока данных можно создать множество различных структурных\nсхем.\nДиаграммы потоков данных отображают взаимоотношение между информацией и функциями системы. \nСтруктурные схемы отображают способ реализации элементов системы. Оба метода представляют две действу­\nющие. хотя и различные, точки зрения на систему.\nБолее подробное описание данного метода/средства приведено в [116].\n8.2.4 Формальные методы\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.4 (таблицы А.1. А.2. А.4 и Б.5).\nВ.2.4.1 Общие положения\nЦель: разработка программных средств, основанных на математических принципах. К ним относятся мето­\nды формального проектирования и формального кодирования.\nОписание: на основе формальных методов разработаны средства описания системы для решения отдель­\nных задач на стадиях спецификации, проектирования или реализации. Создаваемое в результате описание \nпредставляет собой строгую нотацию, которая математически анализируется для обнаружения различных видов \nнесогласованностей или некорректностей. Более того, такое описание может быть в некоторых случаях проана­\nлизировано автоматически по аналогии с проверкой компилятором синтаксиса исходной программы или ис­\nпользована анимация для представления различных аспектов поведения описываемой системы. Анимация \nспособствует повышению уверенности в том. что система соответствует реальным и формально специфициро­\nванным требованиям, поскольку она улучшает восприятие человеком специфицированного поведения системы.\nФормальный метод, в основном, предлагает нотацию (в общем случав используется некоторый метод \nдискретной математики), метод вывода описания в этой нотации и различные виды анализа описания для про­\nверки корректности различных типов.\nП р и м е ч а н и е  — Приведенное выше описание содержится также в Б.2.2.\nРяд формальных методов (CCS. CSP. HOL. LOTOS. OBJ. временная логика. VDM и Z ) описан в следующих \nподразделах данного раздела. Другие методы, например метод конечных автоматов (см. Б 2.3.2) и сети Петри \n(см. Б.2.3.3), могут также рассматриваться как формальные методы в зависимости от корректности использова­\nния методов соответствующего строгого математического аппарата.\nБолее подробное описание данного метода/средства приведено в [119].\nВ.2.4.2 CCS — средства расчета взаимодействующих систем\nЦель: обеспечение описания и анализа поведения систем, реализующих параллельные коммуникацион­\nные процессы.\nОписание: CCS — это математический аппарат, описывающий поведение систем. Проект системы модели­\nруется в виде сети независимых процессов, реализующихся последовательно или параллельно. Процессы могут \nвзаимодействовать через порты (аналогичные каналам CSP). и коммуникация осуществляется, только когда оба \nпроцесса готовы к этому. Отсутствие детерминизма может быть смоделировано. Начиная с описания всей систе­\nмы на высоком уровне абстрагирования (известного как трассирование), можно выполнять пошаговое уточнение \nсистемы в рамках композиции коммуникационных процессов, общее поведение которых формирует и поведение \nвсей системы. В равной степени можно действовать и снизу вверх, комбинируя процессы и получая в результате \nнеобходимые свойства формируемой системы, используя правила вывода композиционного типа.\nБолее подробное описание данного метода/средства приведено в [120).\nВ.2.4.3 CSP — коммуникационные последовательные процессы\nЦель: предоставление способа спецификации конкурирующих программных систем, то есть систем, про­\nцессы которых реализуются одновременно.\nОписание: CSP предоставляет язык для системных спецификаций процессов и для подтверждения того, \nчто реализация процессов соответствует их спецификациям (описывается как трасса — допустимая последова­\nтельность событий).\nСистема моделируется в виде сети независимых процессов, составленных последовательно или парал­\nлельно. Каждый процесс описывается в терминах всех его возможных поведений. Процессы могут взаимодей-\n43"
        },
        {
            "page": 50,
            "page_content": "ГОСТ Р 53195.5— 2010\nствовать (действуя синхронно или обмениваясь данными) через каналы, и взаимодействие происходит только \nпри готовности обоих процессов. Может быть промоделирована относительная синхронизация событий.\nТеоретические положения метода/средства CSP были непосредственно включены в архитектуру транспью­\nтера INMOS. а язык OCCAM позволил непосредственно реализовывать на сетях транспьютеров системы, специ­\nфицированные в CSP.\nБолее подробное описание данного метода,'средства приведено в [121. 122).\nВ.2.4.4 HOL — логика высокого порядка\nЦель: предоставление формального языка, применяемого в качестве основы для спецификации и верифи­\nкации аппаратных средств.\nОписание: HOL представляет собой конкретную логическую нотацию и систему, которая ее автоматически \nподдерживает. Языки HOL были разработаны в компьютерной лаборатории Кембриджского университета. Логи­\nческая нотация взята в основном из простой теории типов Черча, а машинная реализация основана на теории \nLCF (логике вычислимых фуккциий).\nБолее подробное описание данного метода/средства приведено в [123].\nВ.2.4.5 LOTOS\nЦель: обеспечение описания и анализа поведения систем, реализующих параллельные коммуникацион­\nные процессы.\nОписание: LOTOS (язык для спецификации процессов, упорядоченных во времени) основан на CCS с до­\nполнительными возможностями из близких алгебраических теорий CSP и CIRCAL (теория цепей). Он. преодоле­\nвая недостатки языка CCS в управлении структурами данных и в представлении значений выражений, объединя­\nет его со вторым компонентом, основанным на языке абстрактных типов данных ACT ONE. Процесс описания \nкомпонентов в LOTOS может быть, однако, использован для других формальных методов при описании абстрак­\nтных типов данных.\nБолее подробное описание данного метода/средства приведено в [124].\nВ.2.4.6 Язык OBJ\nЦель: обеспечение точной спецификации системы при обратной связи с пользователем и подтверждение \nсоответствия системы до ее реализации.\nОписание: OBJ представляет собой алгебраический язык спецификаций. Пользователи определяют тре­\nбования в терминах алгебраических выражений. Системные аспекты — поведение или конструктивы — специфи­\nцированы в терминах операций, действующих над абстрактными типами данных (ADT). Язык ADT подобен языку \nADA. в котором поведение оператора наблюдаемо, однако подробности реализации скрыты.\nСпецификация OBJ и последующая пошаговая реализация подвергаются тем же формальным методам \nпроверки, что и в других формальных методах. Более того, поскольку конструктивные аспекты спецификации OBJ \nавтоматически исполнимы, существует непосредственная возможность подтверждения соответствия системы на \nоснове самой спецификации. Исполнение это. по существу, оценка функций путем подстановки (перезаписи) \nвыражений, которая продолжается до тех пор. пока не будут получены конкретные выходные значения. Это \nисполнение позволяет конечным пользователям рассматриваемой системы получать «облик» планируемой \nсистемы на этапе ее спецификации без необходимости знакомства с методами, лежащими в основе формальных \nспецификаций.\nКак и все другие средства ADT. язык OBJ применим только к последовательным системам или к последова­\nтельным аспектам параллельных систем. OBJ используется для спецификации как малых, так и крупных про­\nмышленных применений.\nБолее подробное описание данного метода/средства приведено в [125. 126].\nВ.2.4.7 Временная логика\nЦепь: непосредственное выражение требований к безопасности и эксплуатации, а также формальное \nпредставление сохранения этих качеств на последующих этапах разработки.\nОписание: стандартная предикатная логика первого порядка не содержит концепций времени. Временная \nлогика расширяет логику первого порядка добавлением модальных операторов (например, «с этого момента» и \n«случайно»). Эти операторы могут использоваться для уточнения суждений о системе. Например, свойства безо­\nпасности могут потребовать использовать ооератор «с этого момента», тогда как может потребоваться, чтобы \nдругие необходимые состояния системы были достигнуты «случайно» из некоторого другого начального состоя­\nния. Временные формулы интерпретируются последовательностями состояний (поведениями). Что такое «со­\nстояние». зависит от выбранного уровня описания. Оно может относиться ко всей системе, системным компонен­\nтам или компьютерной программе.\nЗадаваемые количественно (квонтифицированные) временные интервалы и ограничения во временной \nлогике не обрабатываются явно. Абсолютное время обрабатываются путем образования дополнительных вре­\nменных состояний как части описания состояния.\nБолее подробное описание данного метода/средства приведено в [127—129].\nВ.2.4.8 VDM, VDM++ — метод разработки Vienna\nЦель: систематическая спецификация и реализация последовательных (VDM) и параллельных (VDM++) \nпрограмм реального времени.\n44"
        },
        {
            "page": 51,
            "page_content": "ГОСТР 53195.5— 2010\nОписание: VDM — это математический метод спецификации и математический метод уточнения реализа­\nций. который позволяет доказать их корректность относительно спецификации.\nВ этом основанном на модели методе спецификации состояние системы моделируется в терминах теоре­\nтико-множественных структур, в которых описаны инварианты (предикаты), а операции над этим состоянием \nмоделируются путем определения их пред- и постусловий в терминах системных состояний. Операции могут \nпроверяться на сохранение системных инвариантов.\nВыполнение спецификаций осуществляется путем реализации состояния системы в терминах структур дан­\nных в заданном языке и путем уточнения операций в терминах программы на заданном языке. Этапы реализа­\nции и уточнения позволяют логически вывести свойства, которые устанавливают корректность этих этапов. Выпол­\nняются или не выполняются эти свойства, определяется разработчиком.\nVDM в принципе используется на этапе создания спецификации, но может также использоваться на этапах \nпроектирования и реализации исходного кода. Он может быть также применен к последовательно структуриро­\nванным программам или к последовательным процессам в параллельных системах.\nОбьектно-ориентированное и параллельное для реального времени расширения. VDM. VDM++ представ­\nляют собой язык формализованных спецификаций, основанный на языке VDM-SL. созданном е ISO. и на обьек- \nгно-ориен тированном языке Smalltalk.\nVDM++ имеет широкий диапазон конструкций, с помощью которых пользователь может формально специ­\nфицировать параллельные системы реального времени в объектно-ориентированней среде. В VDM++ полная \nформальная спецификация содержит совокупность спецификаций классов и отдельных характеристик рабочего \nпространства.\nК средствам описания реального времени в языке VDM++ относятся:\n- временные выражения, предусмотренные для представления как текущего момента, так и момента вызо­\nва метода внутри тепа метода:\n- выражение, описывающее синхронизирующий сигнал, которое может быть добавлено к методу для специ­\nфикации верхних (или нижних) пределов времени исполнения для корректности реализаций;\n- переменные непрерывного времени, которые должны быть введены. С условными операторами и опера­\nторами действия можно специфицировать отношения (например, дифференциальные уравнения) между этими \nвременнными функциями. Это свойство оказывается очень полезным при спецификации требований к систе­\nмам. которые действуют в среде с непрерывным временем. Уточняющие шаги приводят к дискретным программ­\nным решениям для систем подобного вида.\nБолее подробное описание данного метода/средства приведено в [130].\nВ.2.4.9 Z-метод\nЦель: предоставление нотации языка спецификаций для последовательных систем и метода проектирова­\nния. применяемого разработчиком на стадиях от составления спецификации на языке Z до разработки исполни­\nтельных алгоритмов, позволяющей при этом доказать их корректность по отношению к спецификации. Больше \nвсего он подходит для разработки последовательных систем, ориентированных на данные.\nОписание: как и в методе VDM. в этом основанном на модели Z-методв спецификации состояний системы \nмоделируется в терминах теоретико-множественных структур, в которых описаны инварианты (предикаты), \nа операции над этим состоянием моделируются путем определения их пред- и постусловий в терминах системных \nсостояний. Операции могут проверяться на сохранение системных инвариантов, демонстрируя тем самым их \nсогласованность. Формальная часть спецификации подразделяется на схемы, которые обеспечивают возмож­\nность структурирования спецификаций путем их усовершенствования.\nОбычно спецификация Z представляет собой сочетание формального Z-текста и неформального поясни­\nтельного текста на естественном языке. (Формальный текст сам по себе может оказаться слишком сжатым для \nпростого восприятия, и часто его смысл необходимо пояснять, тогда как неформальный естественный язык \nможет оказаться неоднозначным и неточным.)\nВ отличие от VDM язык Z представляет собой скорее нотацию, чем завершенный метод. Однако был разра­\nботан близкий метод (названный В-методом). который может быть использован в сочетании с языком Z. Метод В \nоснован на принципе пошагового уточнения.\nБолее подробное описание данного метода/средства приведено в [131].\nВ.2.5 Программирование с защитой\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.4 (таблица А.4).\nЦель, создание программ, которые во время их исполнения выявляют аномальные потоки сигналов управ­\nления. потоки данных или значения данных и реагируют на них заранее определенным и подходящим способом.\nОписание: в процессе разработки программ можно использовать много методов для проверки аномалий \nв сигналах управления или в данных. Эти методы/средства могут применяться систематически в процессе про­\nграммирования системы с целью уменьшения вероятности ошибочной обработки данных.\nИмеются два пересекающихся множества методов защиты. Внутренние методы/средства защиты от оши­\nбок проектируются в программных средствах для преодоления недостатков их проектирования. Эти недостатки \nмогут быть обусловлены ошибками при проектировании или кодировании либо ошибочными требованиями. Ниже \nперечислены некоторые из методов защиты:\n- проверка диапазона значений переменных:\n45"
        },
        {
            "page": 52,
            "page_content": "ГОСТ Р 53195.5—2010\n- по возможное™ проверка значений переменных на их достоверность:\n- на входе процедур проверка типа, размерности и диапазона значений параметров процедур.\nЭти три метода помогают гарантировать, что значения, которые обрабатываются в программах, допустимы \nс точки зрения как терминов программных функций, так и физических значений переменных.\nПараметры только для считывания и параметры для считывания-записи должны быть разделены, и доступ \nк ним должен проверяться. Функции должны рассматривать все параметры как параметры только для считыва­\nния. Буквенные константы не должны быть доступны для записи. Это помогает обнаруживать случайные переза­\nписи или ошибочное использование переменных.\nУстойчивые к ошибкам программные средства проектируются в «предположении», что ошибки существуют \nв собственной среде либо при использовании выходящих за номиналы или предполагаемых условий, и при этом \nведут себя заранее определенным образом. В таком случае используются следующие методы:\n- проверка на достоверность физических значений входных и промежуточных переменных;\n- проверка влияния выходных переменных, предпочтительно путем прямого наблюдения соответствующих \nизменений состояния системы:\n- проверка самими программными средствами своей конфигурации, включая наличие и доступность пред­\nполагаемых АС. а также завершенность самих программ — это особенно важно для поддержки полноты в про­\nцессе их эксплуатации.\nНекоторые из методов защиты программ, такие как проверки последовательности потока управления, \nтакже справляются с внешними ошибками.\nБолее подробное описание данного метода/средства приведено в [132—136].\nВ.2.6 Стандарты по проектированию и кодированию\nП р и м е ч а н и е  — На эти методьг'средства дана ссылка в ГОСТ Р 53195.4 (таблица А.4).\nВ.2.6.1 Общие положения\nЦель: упрощение верификации для поддержания группового объективного подхода и установления стан­\nдартного метода проектирования.\nОписание: в самом начале разработки между участниками создания системы должны быть согласованы \nнеобходимые правила. Они охватывают рассмотренные ниже методы проектирования и разработки (например, \nJSP. MASCOT, сети Петри и т. д.). а также соответствующие стандарты кодирования (см. В.2.6.2 настоящего прило­\nжения).\nЭти правила создаются для облегчения разработки, верификации, оценки соответствия и эксплуатации. \nПри этом должны учитываться доступные инструментальные средства, в частности для аналитиков, и развитие \nсредств проектирования.\nБолее подробное описание данного метода/средства приведено в [137].\nВ.2.6.2 Стандарты кодирования\nП р и м е ч а н и е  — На эти мегоды/средства дана ссылка в ГОСТ Р 53195.4 (таблица Б.1).\nЦель: упрощение верификации разработанного кода.\nОписание: до выполнения кодирования должны быть полностью согласованы подробные правила, кото­\nрых следует придерживаться. К этим правилам обычно относят:\n- наличие подробных сведений о модульности, например о виде интерфейса, о размерах программных \nмодулей;\n- использование инкапсуляции, наследования (ограниченного по глубине) и полиморфизма в случае обьек- \nтно-ориентированных языков:\n- исключение или ограниченное использование некоторых языковых конструкций, например, «goto», \n«equivalence», динамических объектов, динамических данных, структур динамических данных, рекурсии, указате­\nлей и т. п.;\n- ограничение прерываний, допустимых при выполнении критичного для безопасности кода;\n- распечатывание программного кода (формирование листинга);\n- исключение безусловных переходов (например, «goto») в программах на языках высокого уровня.\nЭти правила созданы для облегчения процессов тестирования программных модулей, верификации, оцен­\nки соответствия и обслуживания. При этом должны учитываться доступные инструментальные средства, в частно­\nсти для аналитиков.\nП р и м е ч а н и е  — Более подробная информация по этим вопросам приведена в В.2.6.3 — В.2.6.7.\nБолее подробное описание данного метода/средства приведено в [102. 137—142].\nВ.2.6.3 Отказ от динамических переменных или динамических объектов\nП р и м е ч а н и е  — На этот метод^средство дана ссылка в ГОСТ Р 53195.4 (таблица Б.1).\nЦель: исключение динамических и переменных объектов во избежание:\n- нежелательных или необнаруживаемых наложений в памяти:\n- узких мест ресурсов в процессе (связанном с безопасностью) выполнения программы.\n46"
        },
        {
            "page": 53,
            "page_content": "ГОСТР 53195.5— 2010\nОписание: в случав применения этого подхода динамические переменные и динамические объекты \nоказываются переменными и объектами, которые имеют свои определенные и абсолютные адреса в памяти, \nустанавливаемые во время выполнения программы. Объем распределяемой памяти и ее адреса зависят от \nсостояния системы в момент распределения памяти, а это означает, что они не могут быть проверены компиля­\nтором или любым другим автономным инструментом.\nТак как число динамических переменных и объектов и существующее свободное пространство памяти для \nразмещения новых динамических переменных или объектов зависят от состояния системы в момент размеще­\nния. то возможны сбои при размещении или при использовании переменных или объектов. Например, если \nобъем свободной памяти для распределяемой переменной системы не достаточен, то содержимое другой пере­\nменной в памяти может быть нечаянно стерто. Если динамические переменные или объекты не используются, \nто появление этих сбоев исключено.\nВ.2.6.4 Проверка создания динамических переменных или динамических объектов при выполнении про­\nграммы\nП р и м е ч а н и е  — На этот метод'средстэо дана ссылка в ГОСТ Р 53195.4 (таблица Б.1).\nЦель: убедиться в том. что память, в которой должны быть размещены динамические переменные и объекты, \nсвободна до ее загрузки, гарантируя при этом, что размещение в ней динамических переменных и объектов во \nвремя выполнения программы не повлияет на уже существующие в ней переменные, данные или коды.\nОписание: в случае применения этих методоа/средств к динамическим переменным относят переменные, \nимеющие свои определенные и абсолютные адреса в памяти, устанавливаемые во время выполнения програм­\nмы (в этом смысле переменные являются также атрибутами экземпляров объектов).\nАппаратными либо программными средствами память проверяется на то, что она свободна до размеще­\nния в ней динамических переменных или объектов (например, для того, чтобы исключить переполнение стека). \nЕсли размещение не разрешается (например, если памяти по определенному адресу недостаточно), должны \nбыть предприняты соответствующие действия. После использования динамических переменных или объектов \n(например, после выхода из подпрограммы) вся используемая ими память должна быть освобождена.\nП р и м е ч а н и е  — Альтернативой служит статическая демонстрация того, что память будет адекватной во \nвсех случаях.\nВ.2.6.5 Ограниченное использование прерываний\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица Б.1).\nЦель: сохранение верифицируемости и тестируемости ПО.\nОписание: использование прерываний должно быть ограничено. Прерывания могут использоваться, если \nони упрощают систему. Использование программных средств для обработки прерываний должно быть запреще­\nно в критических ситуациях для выполняемых функций (например, при критичности по времени, критичности \nизменения данных). Если прерывания все же используются, то непрерываемые фрагменты должны иметь опре­\nделенное максимальное время вычисления, на основании которого определяется максимальное время, в тече­\nние которого прерывание запрещено. Использование прерываний и их маскирование должно четко документи­\nроваться.\nВ.2.6.6 Ограниченное использование указателей\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица Б.1).\nЦель: исключение проблем, связанных с доступом к данным без предварительной проверки типа и диапа­\nзона указателя; обеспечение возможности модульного тестирования и верификации программных средств; сни­\nжение тяжести последствий отказов.\nОписание: в прикладных программных средствах указатель арифметических действий может быть исполь­\nзован на уровне исходного кода только в том случае, когда тип и диапазон значений указателя данных будут про­\nверены перед доступом (для гарантирования того, что ссыпка указателя находится внутри корректного адресного \nпространства). Связи между задачами в прикладных программах не должны осуществляться с помощью непос­\nредственных ссылок между задачами. Обмен данными должен осуществляться через операционную систему.\nВ.2.6.7 Ограниченное использование рекурсий\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица Б.1).\nЦель: исключение использования вызовов неверифицируемых и нетестируемых подпрограмм.\nОписание: при использовании рекурсии должен быть установлен четкий критерий, обеспечивающий пред­\nсказуемость глубины рекурсии.\nВ.2.7 Структурное программирование\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица А.4).\nЦель: проектирование и реализация программы с использованием практического анализа программы без \nее выполнения. Программа может содержать только абсолютный минимум статистически нетестируемого пове­\nдения.\n47"
        },
        {
            "page": 54,
            "page_content": "ГОСТ Р 53195.5—2010\nОписание: для минимизации структурной сложности следует применять следующие принципы и действия:\n- разделять программу на подходящие небольшие программные модули, гарантируя при этом, что они \nявляются минимально связанными, насколько возможно, и что все взаимодействия явные;\n- составлять поток управления программными модулями с использованием структурированных конструк­\nций. таких как последовательности, итерации и выбор:\n- обеспечивать небольшое количество возможных путей через программные модули и как можно более \nпростые отношения между входными и выходными параметрами;\n- исключать сложные ветвления и. в частности, исключать безусловные переходы («goto*) при использова­\nнии языков высокого уровня:\n- по возможности, связывать ограничения на цикл и ветвление с входными параметрами:\n- исключать использование сложных вычислений в ветвлении и цикле.\nСвойства языков программирования, которые способствуют указанному выше подходу, следует использо­\nвать. предпочитая их другим свойствам, которые более эффективны, но за исключением тех случаев, когда эффек­\nтивность приобретает абсолютный приоритет (например, для некоторых критичных к безопасности систем).\nБолее подробное описание данного метода|'средства приведено 8 [102. 137, 138, 141, 143-149].\nВ.2.8 Ограничение доступа / инкапсуляция информации\nП р и м е ч а н и е  — На этот мещфсрвдство дана ссылка в ГОСТ Р 53195.4 (таблица Б.9).\nЦель: предотвращение непреднамеренного доступа к данным или процедурам, и тем самым обеспечение \nкачественной структуры программных средств.\nОписание: общедоступные для всех программных компонентов данные могут быть случайно или некоррек­\nтно модифицированы любым из этих компонентов. Любые изменения этих структур данных могут потребовать \nподробной проверки программного кода и серьезных исправлений.\nОграничение доступа представляет собой общий подход к минимизации указанных проблем. Ключевые \nструктуры данных «скрыты», и с ними можно работать, только применив определенный набор процедур доступа. \nЭто позволяет модифицировать внутренние структуры или добавлять новые процедуры, не оказывая влияния \nпри этом на функциональное поведение остальных программных средств. Например, имя директории может \nиметь процедуры доступа «вставить», «удалить» и «найти». Процедуры доступа и структуры внутренних данных \nмогут быть изменены (например, при использовании различных методов просмотра или для сохранения имен на \nжестком диске), не оказывая влияния на логическое поведение остальных программных средств, использующих \nэти процедуры.\nВ таком случае следует использовать концепцию абстрактных типов данных. Если непосредственная про­\nверка не предусмотрена, гложет оказаться необходимой проверка того, что абстрагирование не было непредна­\nмеренно разрушено.\nБолее подробное описание данного метода/средствз приведено в [150. 151].\nВ.2.9 Модульный подход\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблицы А.4 и Б.9).\nЦель: декомпозиция программной системы на небольшие ясные для понимания модули для упрощения \nсистемы.\nОписание: модульный подход, или модуляризация, включает в себя несколько различных правил для \nстадий проектирования, кодирования и эксплуатации разработанных программных средств. Эти правила меня­\nются в соответствии с реализуемым методом проектирования. Большинство же методов содержат следующие \nправила:\n- программный модуль должен выполнять одну четко сформулированную задачу или функцию:\n- связи между программными модулями должны быть ограничены и строго определены, уровень связанно­\nсти каждого программного модуля должен быть высоким:\n- совокупности подпрограмм должны строиться так. чтобы обеспечивать несколько уровней программных \nмодулей;\n- размеры подпрограмм следует ограничить некоторыми конкретными значениями, обычно от двух до \nчетырех размеров экрана.\n- подпрограммы должны иметь только один вход и один выход:\n- программные модули должны взаимодействовать с другими программными модулями через свои интер­\nфейсы, где используются глобальные или общие переменные, которые должны быть хорошо структурированы, \nдоступ к ним должен быть контролируемым и их использование в каждом конкретном случае должно быть \nобосновано;\n- все интерфейсы программных модулей должны быть полностью документированы:\n- все интерфейсы программных модулей должны содержать только те параметры, которые необходимы \nдля их функционирования.\nБолее подробное описание данного метода^средства приведено в [70. 138. 152].\n48"
        },
        {
            "page": 55,
            "page_content": "ГОСТР 53195.5—2010\nВ.2.10 Использование заслуживающих доверия,'проверенных программных модулей и их компонентов\nП р и м е ч а н и я\n1 На этот метод/средсгво дана ссылка в ГОСТ Р 53195.4 (таблица А.4).\n2 Некоторые математические методы, обеспечивающие последующие численные оценки, приведены в \nприложении Г. Аналогичные средства и статистический подход изложены также в Б.5.4.\nЦель: исключение вариантов проектирования компонентов программных модулей и АС. предусматриваю­\nщих необходимость их интенсивных повторных проверок или перепроектирования для каждого нового приме­\nнения: использование преимуществ проектов, которые не были формально или строго проверены, но для кото­\nрых имеются продолжительные эксплуатационные предыстории.\nОписание: применение таких модулей и компонентов гарантирует, что программные модули и компоненты \nдостаточно свободны от систематических ошибок проектирования и/или эксплуатационных отказов. Использо­\nвание заслуживающих доверия программных модулей и компонентов (то есть проверенных в эксплуатации) \nможет быть достаточным в качестве единственной меры, гарантирующей достижение необходимого уровня \nполноты безопасности, лишь в редких случаях. Для сложных компонентов со многими возможными функциями \n(например, операционной системы) важно установить, какая из функций реально достаточно проверена при ее \nиспользовании. Например, в тех случаях, когда используется процедура самотестирования для обнаружения \nсбоев АС и когда в период эксплуатации никаких отказов АС не случилось, процедуру самотестирования на обна­\nружение сбоев нельзя рассматривать как проверенную на практике.\nКомпонент или программный модуль может быть в достаточной мере заслуживающим доверия, если он \nуже проверен для требуемого уровня полноты безопасности или если он соответствует следующим критериям:\n- спецификация не изменялась:\n- системы использовались в различных применениях:\n- имеется по меньшей мере один год предыстории работы:\n- время эксплуатации соответствует уровню полноты безопасности или соответствующему числу запросов; \nдемонстрируются не связанные с безопасностью частоты отказов, меньшие чем:\n- 10\"2 отказов на запрос (в год) с уверенностью 95 % при требуемом числе эксплуатационных прогонов \n(в год) 30;\n- 10~5 отказов на запрос (в год) с уверенностью 99.9 % при требуемом числе эксплуатационных прогонов \n(в год) 690 000:\n- весь опыт эксплуатации должен быть соотнесен с известным профилем запросов функций программного \nмодуля для гарантирования того, что увеличивающийся опыт эксплуатации действительно приводит к увеличению \nсведений о поведении программного модуля, связанного с соответствующим профилем запроса;\n- отказы, не связанные с безопасностью.\nП р и м е ч а н и е  — Отказ, который может быть некритичным для безопасности в одном контексте, может \nоказаться критичным для безопасности в другом контексте, и наоборот.\nЧтобы обеспечить достоверность того, что компонент или программный модуль соответствует критерию, \nдолжно быть задокументировано следующее:\n- точная идентификация каждой системы и ее компонентов, включая номера версий (как для ПО. так и \nдля АС);\n- идентификация пользователей и время применения;\n- время эксплуатации:\n- процедура вьбора систем, применяемых пользователями, и случаев применения.\n- процедуры обнаружения и регистрации отказов и устранения сбоев.\nБолее подробное описание данного метода'средства приведено в [148, 150. 153].\nВ.З Структурное проектирование\nВ.3.1 Обнаружение и диагностика сбоев\nП р и м е ч а н и е  — На этот метод! средство дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: обнаружение сбоев в системе, которые могут привести к отказам, и тем самым обеспечение основы \nдля мер по минимизации последовательностей ошибок.\nОписание: обнаружение сбоев представляет собой действие по проверке системы на наличие ошибочных \nсостояний (обусловленных сбоями в проверяемой системе или подсистеме), предпринимаемое для предотвра­\nщения появления неверных результатов. Система, действующая в сочетании с параллельными компонентами, \nостанавливающая управление при обнаружении некорректности ее собственных результатов, называется само- \nпроверяемой.\nОбнаружение сбоев основывается на принципах избыточности (в основном при обнаружении сбоев АС — \nсм. ГОСТ Р 53195.3, приложение А) и разнообразия (программные сбои). Для определения корректности \nрезультатов требуется некоторый вид голосования. Могут быть применены определенные специальные методы, \nк которым относятся: программирование утверждений, метод программирования N-версий и так называемая\n49"
        },
        {
            "page": 56,
            "page_content": "ГОСТ Р 53195.5— 2010\n«подушка безопасности» (см. В.3.4 настоящего приложения): а для АС — применение дополнительных сенсоров, \nконтуров регулирования, кодов, обнаруживающих ошибки, и др.\nОбнаружение сбоев может обеспечиваться проверками в области значений или во временнбй области на \nразличных уровнях, особенно на физическом уровне (температура, напряжение и т. п.), на логическом (коды, \nобнаруживающие ошибки), на функциональном (утверждения) или на внешнем (проверки достоверности) уровне. \nРезультаты этих проверок могут быть сохранены и увязаны с влияющими данными для обеспечения возможности \nотслеживания отказов.\nСложные системы состоят из подсистем. Эффективность обнаружения сбоев, диагностики и компенсации \nсбоев зависит от сложности взаимодействия между подсистемами, которые влияют на распространение сбоев.\nДиагностику сбоев следует применять на уровне самых малых подсистем, поскольку подсистемы меньших \nразмеров допускают бопве детальную диагностику сбоев (обнаружение ошибочных состояний).\nИнтегрированные информационные системы (например, уровня предприятия) могут обычным способом \nпередавать состояния безопасности системы, включая информацию диагностического тестирования, другим уп­\nравляющим системам. При обнаружении некорректного поведения оно гложет быть выделено и использовано \nдля запуска корректирующих действий до возникновения опасной ситуации. В конце концов, при появлении инци­\nдента документирование таких отклонений может способствовать последующему анализу.\nБолее подробное описание данного мвтодэ/средства приведено в (153].\nВ.3.2 Обнаружение и исправление ошибок\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: обнаружение и исправление ошибок в чувствительной к ним информации.\nОписание: для информации, состоящей из п битов, генерируется закодированный блок из к битов, который \nпозволяет обнаруживать и исправлять г ошибок. Примерами служат код Хэмминга и полиномиальные коды.\nСледует заметить, что в системах, связанных с безопасностью, лучше уничтожить ошибочные данные, \nчем пытаться исправлять их, поскольку лишь заранее определенная часть ошибок может быть правильно ис­\nправлена.\nБолее подробное описание данного метода/средства приведено в [154].\nВ.3.3 Программирование с проверкой ошибок\nП р и м е ч а н и е  — На этот метод/средство дана ссыпка в ГОСТ Р 53195.3 (таблица А.18) и в ГОСТ Р 53195.4 \n(таблица А.2).\nЦель: обнаружение ошибок, оставшихся при проектировании ПО в процессе выполнения программ для \nпредотвращения критичных для безопасности отказов систем и продолжения выполнения программы с высокой \nнадежностью.\nОписание: в методе программирования утверждений заложена идея проверки предусловий (до выполне­\nния последовательности операторов начальные условия проверяются на соответствие) и постусловий (проверя­\nются результаты после выполнения последовательности операторов). Если предусловия или постусловия не \nсоблюдаются, то выдается сообщение об ошибке.\nПример\nassert < pre-condition>: \naction 1;\naction x;\nassert < post-condition>.\nБолее подробное описание данного метода/средства приведено в [155 — 157).\nВ.3.4 Методы «подушки безопасности*\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: защита от необнаруженных на этапах спецификации и реализации ошибок в ПО. неблагоприятно \nвлияющих на безопасность.\nОписание: «подушка безопасности» представляет собой внешний монитор, реализованный на независи­\nмом компьютере в другой спецификации. Эта «подушка безопасности» касается исключительно гарантии того, \nчтобы главный компьютер выполнял безопасные, не обязательно корректирующие, действия. Она непрерывно \nконтролирует главный компьютер. «Подушка безопасности» предотвращает вхождение системы в небезопасное \nсостояние. Кроме того, если обнаружится, что главный компьютер вошел в потенциально опасное состояние, \nсистема должна возвратиться обратно в безопасное состояние с помощью либо «подушки безопасности», либо \nглавного компьютера.\nАС и ПО «подушки безопасности» следует классифицировать и квалифицировать в соответствии с подходя­\nщим уровнем полноты безопасности SIL.\nБолее подробное описание данного метода/средства приведено в [158— 160).\n50"
        },
        {
            "page": 57,
            "page_content": "ГОСТР 53195.5— 2010\nВ.3.5 Многовариантное программирование\nП р и м е ч а н и е  — На этот метод/средство дана ссыпка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: обнаружение и наложение маски при выполнении программ на не выявленные на этапах проектиро­\nвания и реализации ошибки ПО для предотвращения критичных для безопасности отказов системы и для про­\nдолжения ев работы с высокой надежностью.\nОписание: при многовариантном программировании заданная спецификация ПО проектируется и реали­\nзуется различными способами N раз. Одни и те же входные значения поступают в N версий, и результаты, \nвыданные N версиями, сравниваются. Если определяется, что результат правильный, он поступает на выходы \nкомпьютера.\nN версий могут выполняться параллельно на различных компьютерах, либо все версии могут выполняться \nна одном и том же компьютере, и результаты будут обработаны внутренним голосованием. Для этих N резуль­\nтатов в зависимости от применяемых требований могут быть использованы различные стратегии голосования \nследующим образом:\n- если система находится в безопасном состоянии, можно потребовать полного согласия (все N согласны), \nв противном случае используется выходное значение, которое заставит систему перейти в безопасное состояние. \nДля простых пошаговых систем голосование может происходить в направлении безопасности. В этом случае \nбезопасное действие может быть разбито по шагам, если какая-либо версия реализует пошаговые операции. \nЭтот подход обычно используется только для двух версий (N = 2):\n- для систем, находящихся в небезопасном состоянии, могут быть реализованы стратегии мажоритарного \nголосования. В тех случаях, когда отсутствует общее согласив, могут использоваться вероятностные подходы, \nс тем чтобы максимизировать вероятность выбора правильного значения, например принять среднее значе­\nние, временно зафиксировать выходы, пока не будет достигнуто согласие, и т. п.\nЭтот метод не устраняет ошибки, не выявленные при проектировании программ, а также не устраняет \nошибки в интерпретации спецификации, однако он является средством для обнаружения и маскирования оши­\nбок. прежде чем они смогут повлиять на безопасность.\nБолев подробное описание данного метода/средства приведено в (160— 162].\nВ.3.6 Блоки восстановления\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: повышение вероятности выполнения программой своих заданных функций.\nОписание: некоторые различные разделы программы, часто разработанные независимо, предназначены \nдля выполнения одной и той же требуемой функции. Окончательная программа конструируется из таких разде­\nлов. Первый раздел, называемый первичным, выполняется первым. Далее происходит тестирование его резуль­\nтатов. Если тест проходит, результат принимается и передается последующим разделам программы. Если тест \nне проходит, то все побочные эффекты первого раздела сбрасываются и выполняется второй раздел, называ­\nемый первой альтернативой. За ним также следует тест, который выполняется, как и в первом случав. При необ­\nходимости могут быть предусмотрены вторая, третья и так далее альтернативы.\nВ.3.7 Восстановление предыдущего состояния\nП р и м е ч а н и е  — На этот метод’средство дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: обеспечение исправления функциональных операций при наличии одного или нескольких сбоев.\nОписание: при обнаружении сбоя система возвращается в первоначальное внутреннее состояние, согла­\nсованность которого была подтверждена ранее. Этот метод предполагает частое сохранение внутреннего состо­\nяния в так называемых четко определенных контрольных точках. Метод может быть применен глобально (для \nвсей базы данных) или частично (для изменений только между контрольными точками). По завершении опера­\nции система должна устранить изменения, которые произошли за это время, путем занесения в журнал (аудитор­\nское отслеживание действий), компенсацией (все результаты этих изменений аннулируются) или внешним (руч­\nным) способом.\nБолее подробное описание данного метода/средства приведено в (163. 164].\nВ.3.8 Прямое восстановление функций\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: обеспечение исправления функциональных операций при наличии одного или нескольких сбоев.\nОписание: при обнаружении сбоя текущее состояние системы обрабатывается для достижения состояния, \nкоторое через некоторое время будет согласовано. Эта концепция особенно подходит для систем реального \nвремени с небольшой базой данных и с высокой скоростью изменения внутреннего состояния. Предполагается, \nчто по меньшей мере часть системного состояния может влиять на окружение, и только на часть системных \nсостояний влияет окружение.\nБолее подробное описание данного метода/средства приведено в [165].\nВ.3.9 Методы повторных попыток восстановления неисправностей\nП р и м е ч а н и е  — На эти методы/средства дана ссылка в ГОСТ Р 53185.4 (таблица А.2).\n51"
        },
        {
            "page": 58,
            "page_content": "ГОСТ Р 53195.5— 2010\nЦель: функциональное восстановление системы из состояния обнаруженного сбоя с помощью методов \nповторных попыток.\nОписание: в случае обнаружения сбоя или ошибочного условия предпринимаются попытки восстановле­\nния ситуации путем повторного выполнения того же кода. Восстановление с помощью повторной попытки может \nбыть полным в виде перезагрузки и повторного пуска процедуры, либо небольшим в виде перепланирования \nи повторного пуска задачи после выполнения блокировки по времени программы или управляющего действия \nзадачи. Методы повторной попытки широко используются при коммуникационных сбоях или при восстановле­\nнии от ошибок, и условия повторной попытки могут быть отделены флажками от ошибки протокола связи \n(контрольная сумма и т. д.) или от подтверждающего ответа блокировки по времени коммуникации.\nБолее подробное описание данного метода^средства приведено в [165].\nВ.3.10 Сохранение достигнутых состояний\nП р и м е ч а н и е  — На этот метод/средство дана ссыпка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: заставить программу безопасно прекратить работу, если она попытается выполнить неразрешенное \nдействие.\nОписание: все соответствующие подробные сведения о каждом выполнении программы документируются. \nПри нормальной работе каждое выполнение программы сравнивается с ранее задокументированными сведе­\nниями. При обнаружении различий выполняются действия по безопасности.\nДокументация о выполнении может содержать последовательность индивидуальных шагов вот решения \nк решению*, или последовательность отдельных обращений к массивам, записям или томам, либо к тому и \nдругому.\nВозможны различные методы хранения сведений о последовательностях шагов выполнения программы. \nМогут быть использованы методы хэш-кодирования для отображения этих последовательностей в виде одного \nбольшого числа или последовательности чисел. При нормальной работе перед выполнением выходной опера­\nции значения чисел, отображающих последовательности шагов выполнения программы, должны быть сопостав­\nлены со значениями, сохраненными в памяти.\nПоскольку возможные комбинации таких последовательностей шагов при выполнении одной программы \nполучаются достаточно большими, гложет оказаться невозможным рассматривать программы как единое целое. \nВ этом случае метод гложет быть применен на уровне программных модулей.\nВ.3.11 Постепенное отключение функций\nП р и м е ч а н и е  — На этот метод'средство дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: обеспечение возможности выполнения наиболее критичных системных функций, несмотря на отка­\nзы. путем игнорирования наименее критичных функций.\nОписание: этот метод предоставляет приоритеты различным функциям, выполняемым системой. Проект \nгарантирует, что в случав недостаточности ресурсов для выполнения всех системных функций функции высшего \nприоритета будут выполнены в предпочтение функциям более низкого приоритета. Например, функции регистра­\nции ошибки и события могут оказаться более низкого приоритета, чем системные функции управления, и в этом \nслучае управление системой будет продолжаться, даже если аппаратные средства из-за регистрации ошибки \nокажутся неработоспособными. Более того, если аппаратные средства управления системой окажутся неисправ­\nными. а аппаратные средства реже грации ошибок останутся работоспособными, то аппаратные средства регис­\nтрации ошибок возьмут на себя функцию управления.\nЭти соображения относятся в основном к аппаратным средствам, но они применимы также и ко всей \nСБЗС-системе. Они должны учитываться начиная с самых ранних этапов проектирования.\nБолее подробное описание данного метода'средства приведено в [166— 168].\nВ.3.12 Исправление ошибок методами искусственного интеллекта\nП р и м е ч а н и е  — На эти метады/средства дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: обеспечение способности системы гибко реагировать на возможные опасности с использованием \nсочетания методов данных, модели процессов и анализа надежности СБЗС-системы.\nОписание: прогнозирование ошибок (вычисление трендов), исправление ошибок, техническое обслужива­\nние и контролирующие действия могут быть с большой эффективностью поддержаны системами, основанными \nна искусственном интеллекте, в различных каналах СБЗС-системы. поскольку правила ее поведения могут быть \nполучены непосредственно из спецификации и проверены на соответствие им.\nДля различных каналов связи системы прогнозирование ошибок (вычисление тенденций), исправление \nошибок, обслуживание и контролирующие действия могут достаточно эффективным способом поддерживаться \nсистемами, основанными на методах искусственного интеллекта (AI). Это связано с тем. что правила для таких \nсистем могут быть образованы непосредственно из спецификаций и проверены на соответствие. На основе этого \nподхода могут быть эффективно исключены некоторые общие ошибки, уже внесенные в спецификацию, путем \nкосвенного изучения некоего уже имеющегося проекта и получения представления о возможных правилах пове­\nдения системы, особенно в случае применения комбинации моделей и методов в функциональной и описатель­\nной формах.\n52"
        },
        {
            "page": 59,
            "page_content": "ГОСТР 53195.5— 2010\nМетоды выбираются таким образом, что ошибки могли быть устранены и влияние отказов могло быть \nминимизировано для получения требуемой полноты безопасности.\nП р и м е ч а н и е  — Должны быть учтены предупреждения об исправлении ошибочных данных, приведен­\nные в В.3.2. и об отрицательных рекомендациях применения этого метода, приведенные в ГОСТ Р 53195.4 \n(таблица А.2. пункт 5).\nБолее подробное описание данного метода'средства приведено в [169).\nВ.3.13 Динамическая реконфигурация\nП р и м е ч а н и е  — На этот метод/средство дана ссылка в ГОСТ Р 53195.4 (таблица А.2).\nЦель: обеспечение функционирования системы, несмотря на внутренний сбой.\nОписание: логическая архитектура системы должна быть такой, чтобы ев можно было отобразить в под­\nмножестве доступных ресурсов системы. Архитектура должна быть способна к обнаружению отказа на физичес­\nком уровне и далее к повторному преобразованию логической архитектуры в ограниченные функционирующие \nресурсы. Несмотря на то что эта концепция, в основном, традиционно ограничена только восстановлением неис­\nправных модулей АС. она применима также к сбоям в ПО при наличии достаточной «избыточности времени \nпрогона» для повторного выполнения программы или наличии достаточных избыточных данных, которые обес­\nпечивают незначительное влияние отдельного и изолированного отказа.\nЭтот метод должен рассматриваться на первом этапе проектирования системы.\nБолее подробное описание данного мвгода/средства приведено в [169].\nВ.4 Инструменты разработки и языки программирования\nВ.4.1 Строго типизированные языки программирования\nП р и м е ч а н и е  — Ссыпка на данные методы^средства приведена в ГОСТ Р 53195.4 (таблица А.З).\nЦель: снижение вероятности ошибок путем использования языка, который обеспечивает высокий уровень \nпроверки компилятором.\nОписание: если скомпилирован строго типизированный язык программирования, то проводится много \nпроверок по использованию типов переменных, например в вызовах процедур и доступе к внешним данным. \nКомпиляция может оказаться безуспешной, и будет выдано сообщение об ошибке при любом использовании \nтипа переменных, которое не соответствует заранее установленным правилам.\nПодобные языки обычно позволяют определять установленные пользователем типы данных на основе \nтипов данных базового языка (например, целое число, реальное число). Затем эти типы могут быть использованы \nтакже, как и базовый тип. Вводятся строгие проверки для гарантирования использования правильного типа. Эти \nпроверки проводятся для всей программы, даже если она построена из отдельных скомпилированных модулей. \nДанные проверки гарантируют также, что число и тип аргументов конкретной процедуры соответствуют числу и \nтипу аргументов при ее вызове, даже если к ней обращаются из отдельно скомпилированных программных \nмодулей.\nСтрого типизированные языки обычно обеспечивают другие аспекты проверенной на практике техники \nпроектирования ПО, например легко анализируемые структуры управления («if», «then»», «else», «do», «while» \nи т. n.). которые приводят к четко структурированным программам.\nТипичными примерами строго типизированных языков являются С ++. Delphi. Java. ML. Pascal. ADA. \nModula 2.\nБолее подробное описание данного метода/средства приведено в [170— 173].\nВ.4.2 Подмножество языка\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А.З).\nЦель: снижение вероятности внесения программных ошибок и повышение вероятности обнаружения ос­\nтавшихся ошибок.\nОписание: проводится исследование языка для определения программных конструкций, подверженных \nошибкам либо сложных для анализа, например при использовании методов статического анализа. После этого \nопределяется языковое подмножество, которое исключает такие конструкции.\nБолее подробное описание данного метода/средства приведено в [173].\n£3.4.3 Сертифицированные средства\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А.З).\nЦель: предоставление разработчику на различных этапах разработки ПО необходимых сертифицирован­\nных инструментальных средств для обеспечения конкретной степени уверенности в корректности результатов.\nОписание: сертификацию инструментальных средств в общем случав допускается проводить независимо, \nкак правило, в национальных органах по сертификации по независимому набору критериев, установленных обыч­\nно в национальных или международных стандартах. В идеальном случае инструментальные средства, применя­\nемые на всех стадиях разработки (спецификация, проектирование, кодирование, тестирование и оценка соответ­\nствия). а также используемые а управлении конфигурацией, должны быть сертифицированы.\n53"
        },
        {
            "page": 60,
            "page_content": "ГОСТ Р 53195.5— 2010\nВ настоящее время регулярным процедурам сертификации подвергаются только компиляторы (транслято­\nры): сертификация проводится национальными органами по сертификации. Она заключается в проверке компи­\nляторов (трансляторов) на соответствие национальным (международным) стандартам, например, для языков \nADA или Pascal и в подтверждении соответствия.\nВажно отметить, что сертифицированные инструментальные средства и сертифицированные трансляторы \nобычно сертифицируются только на соответствие стандартам на определенный язык или процесс. Обычно они \nникак не сертифицируются на соответствие стандартам по безопасности.\nБолее подробное описание данного метода/средства приведено в [174. 175).\nВ.4.4 Инструментальные средства, заслуживающие доверия на основании опыта использования\nП р и м е ч а н и е  — Ссылка на данные мегоды'средства приведена в ГОСТ Р 53195.4 (таблица А.З).\nЦель: исключение проблем, обусловленных ошибками транслятора, которые могут появиться во время \nразработки, верификации и эксплуатации ПО.\nОписание: транслятор используется в тех случаях, когда неправильное исполнение многих предыдущих \nпроектов неочевидно. Если отсутствует опыт эксплуатации трансляторов или в них обнаружены любые известные \nсерьезные ошибки, то от таких трансляторов следует отказаться при отсутствии других гарантий корректной \nработы транслятора (см. В.4.4.1).\nЕсли в трансляторе выявлены небольшие недостатки, то соответствующие языковые конструкции фиксиру­\nются и в проектах СБЗС-систем не применяются.\nДругим вариантом исключения проблем, обусловленных ошибками транслятора, является ограничение \nязыка до конструкций, признанных общепринятыми.\nДоказано, что недоработанные трансляторы служат серьезным препятствием в любой разработке ПО. \nТакие трансляторы в общем случае делают невозможной разработку ПО СБЗС-систем.\nВ настоящее время не существует методов подтверждения корректности всего транслятора или отдельных \nего частей.\nВ.4.5 Сравнение исходных программ и исполнимых кодов\nЦель: удостовериться в том. что инструменты, используемые для создания образа PROM, не вносят в него \nникаких ошибок.\nОписание: образ PROM преобразуется обратно в совокупность «объектных» модулей, а эти «обьектныв» \nмодули преобразуются обратно в скомпонованные файлы языка, которые затем с помощью подходящих мето­\nдов сравниваются с фактическими исходными файлами, первоначально использованными для разработки PROM.\nОсновное преимущество данного метода состоит в том. что инструменты (компиляторы, редакторы связей \n(компоновщики) и т. п.). используемые для разработки образа PROM, не требуют подтверждения соответствия. \nЭтим методом проверяют правильность преобразования исходного файла, используемого для конкретной СБЗС- \nсистемы.\nБолее подробное описание данного метода/средства приведено в [176— 178].\nВ.4.6 Библиотека проверенных/верифицированных модулей и компонентов\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А.З).\nЦель: исключение необходимости многократных повторных проверок или перепроектирования компонен­\nтов ПО и АС при каждом новом применении: содействие созданию проектов, которые не были формально или \nстрого проверены, но относительно которых имеется значительная предыстория эксплуатации.\nОписание: хорошо спроектированные и структурированные СБЗС-системы строятся из множества компо­\nнентов и модулей АС и ПО. которые четко различаются и которые взаимодействуют друг с другом строго специфи­\nцированным способом.\nРазличные СБЗС-системы. созданные для различных применений, могут содержать большое число одина­\nковых или очень схожих между собой программных модулей или компонентов. Создание библиотеки таких обще­\nприменимых программных модулей позволяет использовать большую часть ресурсов, необходимых для под- \nтверхщения соответствия проекта, одновременно для нескольких применений.\nКроме того, использование подобных программных модулей для многих применений дает практическое \nподтверждение их успешной эксплуатации. Это практическое подтверждение увеличивает доверие пользовате­\nлей к программным модулям.\nОдин из подходов, в соответствии с которым программному модулю можно доверять при его практическом \nиспользовании, описан в В.2.10.\nБолее подробное описание данного метода/средства приведено в [179. 180).\nВ.4.7 Выбор соответствующего языка программирования\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А.З).\nЦель: обеспечение в максимальной степени требований настоящего стандарта для специального защища­\nющего программирования, строгой типизации, структурного программирования и. возможно, суждений. Выбран­\nный язык программирования должен обеспечить легко верифицируемый код и простые процедуры разработки, \nверификации и эксплуатации ПО.\n54"
        },
        {
            "page": 61,
            "page_content": "ГОСТР 53195.5—2010\nОписание: язык программирования должен быть полностью и однозначно определен. Язык должен быть \nориентирован на пользователя или задачу, а не на процессор или платформу. Широко используемые языки \nпрограммирования или их подмножества должны быть предпочтительнее языков специального применения.\nЯзыки программирования также должны обеспечивать:\n- блоковую структуру организации программ:\n- проверку времени трансляции:\n- проверку типа и границы массива во время выполнения программы.\nЯзык программирования должен обеспечивать:\n- использование небольших и управляемых программных модулей:\n- ограничение доступа к данным в конкретных программных модулях:\n- определение поддиапазонов переменных:\n- любые другие виды конструкций, ограничивающих ошибки.\nЕсли действия системы по обеспечению безопасности зависят от ограничений реального времени, то язык \nпрограммирования должен обеспечивать также обработку исключений и/или прерываний.\nЖелательно, чтобы язык программирования обеспечивался соответствующим транслятором, подходящи­\nми библиотеками с заранее созданными программными модулями, отладчиком и инструментами для управле­\nния и разработки.\nВ настоящее время еще не ясно, будут ли объектно-ориентированные языки программирования предпоч­\nтительнее других общепринятых языков.\nК свойствам, которые усложняют верификацию и поэтому должны быть исключены, относятся:\n- безусловные переходы (за исключением вызовов подпрограмм);\n- рекурсии;\n- указатели, динамически распределяемые области памяти или любые типы динамических переменных \nили обьектов;\n- обработка прерываний на уровне исходного кода;\n- множественность входов или выходов в циклах, блоках или подпрограммах;\n- инициализация или декларация неявных переменных;\n- вариантные записи и эквивалентность:\n- процедурные параметры.\nЯзыки программирования низкого уровня, в частности ассемблеры, обладают недостатками, связанными \nс их жесткой ориентацией на процессор машины или на определенную платформу.\nЖелательным свойством языка программирования является его пригодность к созданию программ, вы­\nполнение которых предсказуемо. Если используется подходящий конкретный язык программирования, то в нем \nдолжно существовать подмножество, которое гарантирует, что выполнение программы предсказуемо. Это под­\nмножество не может быть (в общем случае) статически определено, несмотря на то что многие статические \nограничения помогают гарантировать предсказуемое выполнение. Обычно это может потребовать демонстра­\nцию того, что индексы массива находятся в установленных пределах и что числовое переполнение не может \nвозникнуть, и т. п.\nРекомендации по применению некоторых языков программирования приведены в таблице В.З. Обозначе­\nния рангов применимости языков программирования следующие:\nКР (HR) — крайне рекомендуемый для данного уровня полноты безопасности. Если его не используют, \nто на этапе планирования должно быть дано подробное обоснование отказа от его применения, согласованное \nс экспертом:\nР (R) — рекомендуемый для данного уровня полноты безопасности. Степень обязательности его приме­\nнения ниже, чем в случае рекомендации КР (HR);\n-  — отсутствие рекомендаций по применению или неприменению;\nHP (NR) — нерекомендуемый к применению для данного уровня полноты безопасности. Если его применя­\nют. то на стадии планирования должно быть приведено подробное обоснование его применения, согласованное \nс экспертом.\nТ а б л и ц а  В.З — Рекомендации по применению языков программирования\nНаименование, обозначение \nязы ка програм м ирования\nРанг применимости языка дпя\nSIL1\nS L 2\nStt.3\nSIL4\n1 ADA\nКР (HR)\nКР (HR)\nP(R)\nP(R)\n2 ADA с подмножеством\nКР (HR)\nКР (HR)\nКР (HR)\nKP (HR)\n3 MODULA-2\nКР (HR)\nКР (HR)\nP(R>\nP(R)\n4 MODULA с подмножеством\nКР (HR)\nКР (HR)\nKP (HR)\nKP (HR)\n55"
        },
        {
            "page": 62,
            "page_content": "ГОСТ Р 53195.5—2010\nОкончание таблицы В.З\nНаименование, обозначение \nязы ка програм м ирования\nРанг применимости языка для\nSILT\nSIL2\nStL3\nSIL4\n5 PASCAL\nКР (HR)\nKP (HR)\nP(R)\nP(R)\n6 PASCAL с подмножеством\nКР (HR)\nKP (HR)\nKP (HR)\nKP (HR)\n7 FORTRAN 77\nр  (R)\nP(R>\np  (R)\np  (R)\n8 FORTRAN 77 с подмножеством\nКР (HR)\nKP (HR)\nKP (HR)\nKP (HR)\n9 С\nP(R)\n-\nHP (NR)\nHP (NR)\n10 Язык С с подмножеством и стандартом кодирова­\nния. а также использование инструментов статического \nанализа\nКР (HR)\nKP (HR)\nKP (HR)\nKP (HR)\n11 PL/M\nP(R)\n-\nHP (NR)\nHP (NR)\n12 PL/М с подмножеством и стандартом кодирования\nКЗ (HR)\nP(R)\np  (R)\nP(R)\n13 Ассемблер\nP(R)\nP(R)\n-\n-\n14 Ассемблер с подмножеством и стандартом кодиро­\nвания\nP(R)\nP(R)\nP(R)\nP(R)\n15 Многоступенчатые диаграммы\nP(R)\nP(R>\nP(R)\nP(R)\n16 Многоступенчатая \nдиаграмма с определенным \nподмножеством языка\nKP (HR)\nKP (HR)\nKP (HR)\nKP (HR)\n17 Диаграмма функциональных блоков\nP(R)\nP (R)\nP(R)\nP(R)\n18 Диаграмма функциональных блоков с определен­\nным подмножеством языка\nKP (HR)\nKP (HR)\nKP (HR)\nKP (HR)\n19 Структурированный текст\nP(R)\nP(R)\nP(R)\nP(R)\n20 Структурированный текст с определенным подмно­\nжеством языка\nKP (HR)\nKP (HR)\nKP (HR)\nKP (HR)\n21 Последовательная функциональная диаграмма\nP(R)\nP(R>\nP(R)\nP(R)\n22 Последовательная \nфункциональная \nдиаграмма \nс определенным подмножеством языка\nKP (HR)\nKP (HR)\nKP (HR)\nKP (HR)\n23 Список команд\nP(R)\n-\nHP (NR)\nHP (NR)\n24 Список команд с определенным подмножеством \nязыка\nKP (HR)\nP(R)\nP(R)\np  (R)\nП р и м е ч а н и я\n1 Системное программное обеспечение включает в себя операционную систему, драйверы, встроенные \nфункции и программные модули, являющиеся частью системы. ПО обычно обеспечивается поставщиком \nСБЗС-систем (подсистем). Подмножество языка следует выбирать очень внимательно, с тем чтобы исключить \nсложные структуры, которые могут образоваться в результате ошибок реализации. Следует проводить провер­\nки. чтобы убедиться в правильном использовании подмножества языка программирования.\n2 Прикладная программа представляет собой программу, разработанную для конкретного применения \nСБЗС-системы. Во многих случаях такая программе разрабатывается конечным пользователем либо подряд­\nчиком. ориентированным на разработку прикладных программ. В тех случаях, когда ряд языков программиро­\nвания поддерживают одни и те же рекомендации, разработчику следует выбрать тот язык, который повсемес­\nтно используется персоналом в конкретной промышленности или отрасли. Подмножество языка программи­\nрования следует выбирать с особым вниманием, чтобы исключить сложные структуры, которые могут привести \nк ошибкам реализации.\n3 Если конкретный язык программирования не представлен в настоящей таблице, то это не означает, \nчто он исключен. Этот конкретный язык программирования должен соответствовать требованиям настоящего \nстандарта.\n4 О пунктах 15—24 см. ГОСТ Р 53195.4.\nБолее подробное описание данного метода'средства приведено в (181).\n56"
        },
        {
            "page": 63,
            "page_content": "ГОСТР 53195.5—2010\nВ.5 Верификация и модификация\nВ.5.1 Вероятностное тестирование\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблицы А.5. А.7 и А.9).\nЦель: получение количественных показателей надежности исследуемой программы.\nОписание: количественные показатели могут быть получены с учетом относительных уровней доверия и \nзначимости. В их состав входят:\n- вероятность ошибки при запросе:\n- вероятность ошибки в течение определенного периода времени:\n- вероятность последствий ошибки.\nИз этих показателей могут быть получены другие показатели, например:\n- вероятность безошибочной работы:\n- вероятность живучести;\n- доступность:\n- среднее время наработки на отказ (MTBF) или частота отказов;\n- вероятность безопасного исполнения.\nВероятностные показатели основываются либо на статистических испытаниях, либо на опыте эксплуата­\nции. Как правило, число тестовых примеров или наблюдаемых практических примеров очень велико. Обычно \nтестирование в режиме запросов занимает значительно меньше времени, чем в непрерывном режиме работы.\nДля формирования входных данных тестирования и управления выходными данными тестирования обыч­\nно используются инструменты автоматического тестирования. Крупные тесты прогоняются на больших централь­\nных компьютерах с имитацией соответствующей периферии. Тестируемые данные выбираются с учетом как сис­\nтематических. так и случайных ошибок АС. Например, общее управление тестированием гарантирует профиль \nтестируемых данных, тогда как случайный выбор тестируемых данных может управлять отдельными тестовыми \nпримерами болев детально.\nИндивидуальные средства для тестирования, выполнение тестирования и управление тестированием \nопределяются детализированными целями тестирования. Другие важные условия задаются математическими \nпредпосылками, которые должны быть соблюдены, если оценка тестирования удовлетворяет заданным целям \nтестирования.\nИз опыта эксплуатации также могут быть получены вероятностные представления поведения любого тести­\nруемого обьекта. Если соблюдаются одинаковые условия, то к оценкам результатов тестирования может быть \nприменен одинаковый математический аппарат.\nПри использовании этих методов достаточно сложно продемонстрировать на практике сверхвысокие \nуровни надежности.\nБолее подробное описание данного метода.'средства приведено в [182. 183].\nВ.5.2 Регистрация и анализ данных\nП р и м е ч а н и е  — Ссылка на данный метод/средсгео приведена в ГОСТ Р 53195.4 (таблицы А.5 и А.8).\nЦель, документирование всех данных, решений и разумного обоснования программных провхтов для обес­\nпечения верификации, оценки, подтверждения соответствия и эксплуатации.\nОписание: в процессе всего проектирования разрабатывается подробная документация, в которую входят:\n- тестирование, выполняемое на каждом программном модуле;\n- решения и их обоснования.\n- проблемы и их решения.\nВ процессе проектирования и по завершении проекта эта документация может быть проанализирована \nна наличие широкого набора информации. В частности, такая информация, использовавшаяся в качестве обо­\nснования три принятии конкретных решений в процессе разработки проекта и очень важная для обслуживания \nвычислительных систем, не всегда известна инженерам по эксплуатации.\nБолее подробное описание данного метода/средства приведено в [184].\nВ.5.3 Тестирование интерфейса\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А.5).\nЦель: обнаружение ошибок в интерфейсах подпрограмм.\nОписание: возможно применение нескольких уровней детализации или полноты тестирования. К наибо­\nлее важным уровням относится тестирование:\n- всех интерфейсных переменных с их предельными значениями:\n- всех отдельных интерфейсных переменных с их предельными значениями с другими интерфейсными \nпеременными с их нормальными значениями;\n- всех значений предметной области каждой интерфейсной переменной с другими интерфейсными пере­\nменными с их нормальными значениями;\n- всех значений всех переменных в разных комбинациях (возможно только для небольших интерфейсов):\n- каждого вызова каждой подпрограммы, уместного при специфицированных условиях тестирования.\n57"
        },
        {
            "page": 64,
            "page_content": "ГОСТ Р 53195.5— 2010\nЭти тестирования особенно важны, если интерфейсы не обладают способностью обнаруживать непра­\nвильные значения параметров. Такие тестирования также важны при генерации новых конфигураций ранее \nсуществовавших подпрограмм.\nБолее подробное описание данного метода/средства приведено в [185].\nВ.5.4 Анализ граничных значений\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблицы Б.2. Б.З и Б.8).\nЦель: обнаружение программных ошибок при предельных и граничных значениях параметров.\nОписание: предметная входная область программы разделяется на множество входных классов в соответ­\nствии с отношениями эквивалентности (см. В.5.7). Тестирование должно охватывать границы и экстремальные \nзначения классов. Данное тестирование проверяет совпадение границы предметной входной области в специ­\nфикации с границами, установленными программой. Использование нулевого значения в непосредственных \nи в косвенных преобразованиях часто приводит к ошибкам. Особого внимания требуют:\n- нулевой делитель;\n- знаки пробела ASCII;\n- пустой стек или элемент списка;\n- заполненная матрица;\n- ввод нулевой таблицы.\nОбычно границы входных значений напрямую соотносятся с границами выходных значений. Для установ­\nления выходных параметров в их предельные значения необходимо записывать специальные тестовые приме­\nры. Следует также по возможности рассмотреть спецификацию такого тестового примера, который побуждает \nвыходное значение превысить установленные спецификацией граничные значения.\nЕсли выходные значения являются последовательностью данных, например таблица, то особое внимание \nследует уделить первому и последнему элементам, а также спискам, содержащим либо ни одного, либо один, \nлибо два элемента.\nБолее подробное описание данного метода/средства приведено в [186].\nВ.5.5 Предположение ошибок\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблицы Б.2 и Б.8).\nЦель: исключение ошибки программирования.\nОписание: опыт тестирования и интуиция в сочетании со сведениями и заинтересованностью относительно \nтестируемой системы могут добавить некоторые неклассифицированные тестовые примеры к набору заданных \nтестовых примеров.\nСпециальные значения или комбинации значений могут быть подвержены ошибкам. Некоторые вызываю­\nщие интерес тестовые примеры могут быть получены из анализа контрольных списков. Следует также рассмот­\nреть. является ли система достаточно устойчивой. Например: следует ли нажимать клавиши на передней панели \nслишком бьгстро или слишком часто: что произойдет, если две клавиши нажать одновременно.\nБолее подробное описание данного метода/средства приведено в [187].\nВ.5.6 Введение ошибок\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.2).\nЦель: подтверждение адекватности набора тестовых примеров.\nОписание: некоторые известные типы ошибок вводятся (подмешиваются) в программу, и программа вы­\nполняется с тестовыми примерами в режиме тестирования. При обнаружении только некоторых подмешанных \nошибок тестовый пример становится неадекватным. Отношение числа обнаруженных подмешанных ошибок к \nобщему числу подмешанных ошибок оценивается как отношение числа обнаруженных реальных ошибок к обще­\nму числу реальных ошибок. Это дает возможность оценить число остаточных ошибок и. тем самым, остальную \nработу по тестированию.\nОбнаруженные подмешанные ошибки _ Обнаруженные реальные ошибки \nОбщее число подмешанных ошибок \nОбщее число реальных ошибок\nОбнаружение всех подмешанных ошибок может указывать либо на адекватность тестового примера, либо \nна то. что подмешанные ошибки было слишком легко найти. Ограничениями данного метода являются: порядок \nполучения любых полезных результатов, типы ошибок. Также необходимо, чтобы позиции подмешивания ошибок \nотражали статистическое распределение реальных ошибок.\nБолее подробное описание данного метода/средства приведено в [186 — 189].\nВ.5.7 Классы эквивалентности и разделенное тестирование входов\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблицы Б.2 и Б.З).\nЦель: адекватное тестирование программных средств с использованием минимума тестируемых данных. \nТестируемые данные образуются путем выбора частей входных данных предметной области, требующихся для \nанализа программных средств.\nОписание: применяемая стратегия испытаний базируется на отношении эквивалентности входов, которое \nопределяет разделение входной области.\n58"
        },
        {
            "page": 65,
            "page_content": "ГОСТР 53195.5—2010\nТестовые примеры выбираются с учетом охвата всех предварительно специфицированных разбиений. Из \nкаждого класса эквивалентности выбирается по меньшей мере один тестовый пример.\nСуществуют следующие основные возможности разбиения входных данных:\n- классы эквивалентности, образованные из спецификации (интерпретация спецификации может быть \nориентирована либо на вход, например, когда выбранные значения считаются одинаковыми, либо на выход, \nнапример, когда набор значений приводит к одному и тому же функциональному результату);\n- классы эквивалентности, образованные в соответствии с внутренней структурой программы (результаты \nкласса эквивалентности определяются из статического анализа программ, например, набор значений обрабаты­\nвается одним и тем же способом).\nБолее подробное описание данного метода/средства приведено в [190— 194].\nВ.5.8 Структурное тестирование\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.2).\nЦель: применение тестов, анализирующих определенные подмножества структуры программы.\nОписание: на основе анализа программы определяется набор входных данных так. чтобы мог быть проана­\nлизирован достаточно большой (часто с заранее заданным назначением) процент программных кодов. Средства \nохвата программы, в зависимости от степени требуемой строгости могут быть различными:\n- утверждение — это наименее строгий тест, поскольку можно выполнить все закодированные утверждения \nбез анализа обеих ветвей условного утверждения.\n- ветвление — следует проверять обе стороны каждой ветви (это может оказаться непрактичным для \nнекоторых типов кодов защиты);\n- составные условия — анализируется каждое условие в составной ветви (связанное оператором И/ИЛИ) \n(см., например, охват решения модифицированными условиями MCDC, который означает, что каждая точка вхо­\nда и выхода в программе была задействована по меньшей мере один раз. что любое решение в программе \nполучило все возможные результаты по крайней мере один раз и что для каждого условия в решении был показан \nнезависимый результат, влияющий на результирующее решение). Для каждого набора переменных (внутри логи­\nческого выражения), как истинных, так и ложных, должны быть разработаны Булевы таблицы истинности;\n- LCSAJ — последовательность линейного кода и переходов представляет собой любую линейную после­\nдовательность закодированных утверждений, включая условные утверждения, заканчивающиеся переходом. \nМногие потенциальные подпоследовательности могут оказаться невыполнимыми из-за ограничений, которые \nналагаются на входные данные в результате выполнения предыдущего кода;\n- поток данных — выполняющиеся последовательности выбираются на основе используемых данных; \nнапример, последовательность, где одна и та же переменная и записывается, и считывается;\n- граф вызовов — программа, состоящая из подпрограмм, которые могут быть вызваны из других \nподпрограмм. Этот граф вызовов представляет собой дерево вызовов подпрограмм в программе. Тесты \nдолжны охватывать все вызовы в дереве;\n- базовая последовательность — одна из минимального набора конечных последовательностей от начала \nдо конца, когда охвачены все дуги (перекрывающиеся комбинации последовательностей в этом базовом \nнаборе могут сформировать любую последовательность через эту часть программы). Тесты всех базовых после­\nдовательностей показали свою эффективность при обнаружении ошибок.\nБолее подробное описание данного метода/средства приведено в [195—200].\nВ.5.9 Анализ потоков управления\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.8).\nЦель: обнаружение низкокачественных и потенциально некорректных структур программ.\nОписание, анализ потока управления представляет собой метод статического тестирования для нахожде­\nния подозреваемых областей программы, которые не соответствуют оправдавшей себя практике программиро­\nвания. Программа анализируется, формируя направленный граф, который может быть проанализирован на \nналичие:\n- недоступных фрагментов программы, например безусловных переходов, хоторые делают фрагменты \nпрограммы недостижимыми:\n- запутанных кодов. Хорошо структурированный код имеет управляющий граф, допускающий сокращение \nпутем последовательного сокращения графа до одного узла. В отличие от этого плохо структурированный код \nможет быть сокращен только до группы, состоящей из нескольких узлов.\nБолее подробное описание данного метода/средства приведено в [201. 202].\nВ.5.10 Анализ потоков данных\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.8).\nЦель: обнаружение низкокачественных и потенциально некорректных структур программ.\nОписание: анализ потока данных представляет собой метод статического тестирования, объединяющий \nинформацию, полученную из анализа потока управления, с информацией о том. какие переменные считываются \nили записываются в различных частях кода. Данный метод может проверять:\n- переменные, которые могут быть считаны до присвоения им значений. Такую ситуацию можно исключить, \nесли всегда присваивать значение при объявлении новой переменной;\n59"
        },
        {
            "page": 66,
            "page_content": "ГОСТ Р 53195.5—2010\n- переменные, записанные несколько раз. но не считанные. Такая ситуация может указывать на пропущен­\nный код:\n- переменные, которые записаны, но никогда не считываются. Такая ситуация может указывать на избыточ­\nный код.\nАномальный поток данных не всегда непосредственно соответствует программным ошибкам, но если ано­\nмалии исключены, то маловероятно, что код будет содержать ошибки.\nБолее подробное описание данного метода/средства приведено в [201—203].\nВ.5.11 Выявление скрытых схем исполнения\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.8).\nЦель: обнаружение неожидаемых путей или логических потоков в системе, в конкретных условиях иниции­\nрующих нежелательные функции или запрещающих выполнение необходимых функций.\nОписание: путь паразитной схемы может содержать аппаратные, программные средства, операторы дей­\nствий или комбинации этих элементов. Паразитные схемы не являются результатом неисправностей аппаратных \nсредств, а представляют собой скрытые условия невнимательного проектирования системы или кодирования \nприкладных программ, что при определенных условиях может привести к неправильному функционированию \nсистемы.\nПаразитные схемы разделяют на следующие категории\n- паразитные пути, вызывающие потоки тока, энергии или логических последовательностей по неожидае- \nмому пути или в незаданном направлении:\n- паразитная синхронизация, при которой события происходят в неожидаемой или противоречивой после­\nдовательности;\n- паразитная индикация, вызывающая неоднозначные или ложные изображения условий эксплуатации \nсистемы, что может привести к нежелательным действиям оператора;\n- паразитные метки, некорректно или неточно размечающие системные функции, например системные \nвходы, коды управления, изображения, шины и т. д.. что может ввести в заблуждение оператора, который может \nвыполнить в системе некорректные действия.\nАнализ паразитных схем основывается на распознавании базовых топологических комбинаций в аппарат­\nной или программной структуре. Анализ осуществляется с помощью контрольного списка вопросов об использо­\nвании базовых топологических компонентов и отношениях между ними.\nБолее подробное описание данного метода/средства приведено в [204. 205].\nВ.5.12 Тестирование на символьном уровне\nП р и м е ч а н и е  — Ссылка на данный метод'средство приведена в ГОСТ Р 53195.4 (таблица Б.8).\nЦель: показать соответствие между исходным кодом и спецификацией.\nОписание: переменные программы оцениваются после замены во всех операторах присваивания левой \nего части на правую. Условные ветви и циклы преобразуются в булевы выражения. Окончательный результат \nпредставляет собой символьное выражение для каждой переменной программы. Оно может быть проверено \nотносительно предполагаемого символьного выражения.\nБолее подробное описание данного метода/средства приведено в [206. 207].\nВ.5.13 Формальное доказательство\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А.9).\nЦель: верификация (путем доказательства) корректности программ или спецификаций без их исполнения, \nиспользуя теоретические и математические модели и правила.\nОписание: ряд утверждений устанавливается в различных точках программы, и они используются в каче­\nстве предусловий и постусловий для различных путей программы. Доказательство демонстрирует, что программа \nпреобразует предусловия в постусловия в соответствии с набором логических правил и завершается.\nВ настоящем стандарте описаны различные формальные методы, например CCS, CSP. HOL. LOTOS. OBJ. \nвременная логика. VDM и Z (см. В.2.4).\nАльтернативным методу формального доказательства является «строгий аргумент». Подготавливается \nпроцедура формального доказательства, в которой представлены основные этапы, но включены не все матема­\nтические подробности. Метод «строгий аргумент» является более слабым методом верификации, устанавливаю­\nщим. что доказательство было бы возможным, если бы к этому были предприняты попытки.\nБолее подробное описание данного метода/средства приведено в [207—210].\nВ.5.14 Метрики сложности программного обеспечения\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблицы А.9 и А.10).\nЦель: прогнозирование характеристик программ исходя из свойств самих программ или их разработки \nлибо предыстории тестирования.\nОписание: данные методы оценивают некоторые структурные свойства программных средств и их огноше-\n60"
        },
        {
            "page": 67,
            "page_content": "ГОСТР 53195.5—2010\nния к требуемым характеристикам, например надежность или сложность. Для оценки большинства средств \nтребуются программные инструменты. Некоторые применяющиеся метрики перечислены ниже:\n- теоретическая сложность графа. Эта метрика может быть применена на раннем этапе жизненного цикла \nдля оценки компромиссных решений и основана на величине сложности графа управления программы, пред­\nставленной ее цикломатическим числом;\n- число способов активизации некоторых программных модулей (доступность) — чем больше программных \nмодулей может быть доступно, тем должна быть ббльшая вероятность их отладки;\n- теория метрик Холстеда. При помощи этих средств вычисляют длину программы путем подсчета числа \nоператоров и операндов; данная метрика дает меру сложности и размеры, которые формируют основу для \nсравнений при оценке будущих разрабатываемых ресурсов;\n- число входов и выходов на программный модуль. Сведение к минимуму числа точек входов/выходов явля­\nется ключевой особенностью методов структурного проектирования и программирования.\nБолее подробное описание данного метода/средства приведено в [211—213].\nВ.5.15 Инспекция программ\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.8).\nЦель: обнаружение ошибок на всех этапах разработки программ.\nОписание: формальный аудит гарантирующих качество документов, направленный на отыскание ошибок. \nПроцедура инспекции (проверки) состоит из пяти этапов: планирование, подготовка, исследование, анализ и учет. \nКаждый из этих этапов имеет свои конкретные цели. Должна быть проанализирована вся разработка системы \n(спецификация, проектирование, кодирование и тестирование).\nБолее подробное описание данного метода/средсгва приведено в [214. 215].\nВ.5.16 Сквозной контроль/анализ проекта\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.8).\nЦель: обнаружение ошибок в различных частях проекта с высокой оперативностью и экономичностью.\nОписание: в МЭК опубликовано руководство по общему представлению формального анализа проектов, \nкоторое содержит общее описание представления формального анализа проектов, его цели, подробные сведе­\nния о различных типах анализа проекта, состав группы анализа проекта и относящиеся к ним обязанности и \nответственности. Это руководство содержит также общие руководящие материалы по планированию и выполне­\nнию формального анализа проектов, а также конкретные подробные сведения, относящиеся к роли независи­\nмых специалистов в группе по анализу проекта. Например, помимо прочего, в функции специалистов входят \nнадежность, поддержка обслуживания и доступность.\nВ упомянутом выше руководстве МЭК рекомендуется, чтобы формальный анализ проекта проводился для \nвсех новых изделий/процессов, применений и при пересмотрах существующих изделий и производственных про­\nцессов. влияющих на функции, производительность, безопасность, надежность, способность анализировать об­\nслуживание. доступность, способность к экономичности и другие характеристики, влияющие на конечные изде- \nлия/процессы. пользователей или наблюдателей.\nЗакодированный сквозной контроль состоит из группы сквозного контроля, выбирающей небольшой набор \nизложенных на бумаге тестовых примеров, представляющих наборы входных данных и соответствующие предпо­\nлагаемые выходы для программы. После этого тестовые данные вручную трассируются через логику программы.\nБолее подробное описание данного метода/средсгва приведено в [200. 216. 217].\nВ.5.17 Макетирование/анимация\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблицы Б.З и Б.5).\nЦель, проверка возможности реализации системы при наличии заданных ограничений. Увязка интерпре­\nтации разработчика спецификации системы с ее потребителем для исключения непонимания между ними.\nОписание: выделяются подмножество системных функций, ограничения и требования к рабочим парамет­\nрам. С помощью инструментов высокого уровня строится макет. На данном этапе не требуется рассмотрение \nограничений (например, используемый компьютер, язык реализации, обьем программ, обслуживание, надеж­\nность и доступность). Макет оценивается по критериям потребителя, и системные требования могут быть моди­\nфицированы в свете этой оценки.\nБолее подробное описание данного метода/средства приведено в [218—220].\nВ.5.18 Моделирование процесса\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.З).\nЦель: тестирование функции программной системы вместе с ее интерфейсами во внешнем окружении, не \nдопуская модификации реального окружения.\nОписание: создание системы только для целей тестирования, имитирующей поведение управляемого обо­\nрудования (УО).\nИмитация может осуществляться только программным обеспечением либо сочетанием ПО и АС. Она \nдолжна:\n- обеспечить входы, эквивалентные входам, которые могут быть при фактической установке УО.\n61"
        },
        {
            "page": 68,
            "page_content": "ГОСТ Р 53195.5—2010\n- реагировать на выходные результаты тестирования программных средств способом, точно отражающим \nобьект управления:\n- обладать средствами для входных данных оператора, обеспечивающими любые нарушения, с которыми \nдолжна справиться тестируемая система.\nПо завершении тестирования ПО созданная система может тестировать АС с их входами и выходами.\nБолее подробное описание данного метода'средсгва приведено в [221. 222J.\nВ.5.19 Требования к реализации\nП р и м е ч а н и е  — Ссылка на данный метод|’средство приведена в ГОСТ Р 53195.4 (таблица Б.6).\nЦель: установление демонстрируемых требований к рабочим характеристикам системы ПО.\nОписание: выполняется анализ как системы, так и спецификаций требований к ПО для спецификации всех \nобщих и конкретных, явных и неявных требований к функционированию.\nКаждое требование к функционированию анализируется по очереди для определения:\n- критериев успешности результата, который следует получить;\n- возможности получения меры критерия успешности:\n- потенциальной точности таких результатов измерения:\n- этапов проектирования, на которых эти результаты измерения могут быть оценены:\n- этапов проектирования, на которых могут быть получены эти результаты измерений.\nЗатем анализируется целесообразность каждого требования к функционированию для получения списка \nтребований к рабочим характеристикам, критериев успешности результата и возможных результатов измерений. \nОсновными целями являются.\n- связь каждой рабочей характеристики по крайней мере с одной мерой:\n- выбор (по в о з м о ж н о с т и ) т о ч н ы х  и  эффективных мер. которые могут быть использованы на самых ранних \nстадиях разработки:\n- спецификация важных и факультативных рабочих характеристик и критериев успешности результата:\n- использование (по возможности) преимуществ применения одной меры для нескольких рабочих характе­\nристик.\nБолее подробное описание данного метода/средствз приведено в [222—224].\nВ.5.20 Моделирование реализации\nП р и м е ч а н и е  — Ссылка на данный метод/'средство приведена в ГОСТ Р 53195.4 (таблицы А.5, Б.2 и Б.5).\nЦель: достижение достаточной для удовлетворения специфицированных требований рабочей производи­\nтельности системы.\nОписание: спецификация требований включает в себя требования к пропускной способности и реакции \nконкретных функций, возможно, объединенных с ограничениями на использование общих системных ресурсов. \nПредложенный проект системы сравнивается с установленными требованиями следующим путем:\n- создание модели процессов системы и их взаимодействий:\n- определение ресурсов, используемых каждым процессом (время процессора, полоса пропускания кана­\nла связи, обьем памяти и т. п.);\n- определение распределения запросов, выдаваемых системе при средних и наихудших условиях:\n- вычисление средних и наихудших случаев значений величин пропускной способности и времени отклика \nдля конкретных функций системы.\nДля простых систем может оказаться достаточным аналитическое решение, тогда как для более сложных \nсистем более подходящей для получения точных результатов является создание модели системы.\nПеред детальным моделированием может быть использована более простая проверка «бюджета ресур- \nсово, которая суммирует требования к ресурсам всех процессов. Если сумма этих требований к системе превыша­\nет возможности спроектированной системы, проект считается нереализуемым. Даже в случав, если проект про­\nходит эту простую проверку, моделирование выполнения может показать, что слишком большие задержки и \nвремена откликов происходят из-за недостатка ресурсов. Для исключения такой ситуации инженеры часто проек­\nтируют системы, использующие только часть (например. 50 %) общих ресурсов для уменьшения вероятности \nнехватки ресурсов.\nБолее подробное описание данного мвтода|'срвдства приведено в [222. 225. 226].\nВ.5.21 Проверка на критические и напряженные нагрузки\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.3 (таблица Б.6).\nЦель: подвержение тестируемого объекта исключительно высокой нагрузке для демонстрации, что тести­\nруемый обьект будет легко выдерживать нормальную рабочую нагрузку.\nОписание: существует множество тестов для проверки на критические и напряженные нагрузки, например:\n- при работе объекта в режиме упорядоченного опроса он подвергается тестированию в единицу времени \nгораздо чаще, что приводит к ббльшим входным изменениям, чем при нормальных условиях;\n- при работе обьехта по запросам число запросов к тестируемому объекту увеличивают в единицу времени \nпо сравнению с нормальными условиями:\n62"
        },
        {
            "page": 69,
            "page_content": "ГОСТР 53195.5—2010\n- если объем базы данных играет важную роль, то этот объем увеличивают относительно объема при \nнормальных условиях:\n- устройства, имеющие решающее влияние, настраивают на их максимальные или минимальные скорости \nсоответственно:\n- для экстремальных тестов все факторы, имеющие решающее влияние, по возможности вводят одновре­\nменно в граничные условия.\nДля указанных выше тестов может быть оценено поведение во времени тестируемого объекта. Можно \nтакже исследовать изменения нагрузки и проверить размер внутренних буферов или динамических переменных, \nстеков и т. п.\nБолее подробное описание данного метода/средства приведено в [227. 228].\nВ.5.22 Ограничения на время реакции и объем памяти\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица Б.6).\nЦель: обеспечение соответствия системы требованиям к параметрам времени и памяти.\nОписание: спецификация требований к системе и программному обеспечению включает в себя требования \nк памяти и времени выполнения системой конкретных функций, возможно, объединенных с ограничениями на \nиспользование общих системных ресурсов.\nДанный метод выполняется для установления распределения запросов при средних и наихудших условиях. \nРассматриваемый метод требует оценки используемых ресурсов и затраченного времени каждой функцией сис­\nтемы. Такие оценки могут быть получены различными способами, например сравнением с существующей систе­\nмой или макетированием и дальнейшим сравнением времени реакции с критическими системами.\nБолее подробное описание данного мет од а^сред ст ва приведено в (227. 229-232].\nВ.5.23 Анализ влияния\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А.8).\nЦель: определение влияния, изменяющего или расширяющего программную систему, которому могут под­\nвергаться также и другие программные модули в данной программной системе, а также другие системы.\nОписание: перед выполнением модификации или расширения программного обеспечения следует опре­\nделить влияние модификаций или расширений на программное обеспечение, а также определить, на какие \nпрограммные системы и программные модули это повлияет.\nДалее принимается решение о повторной верификации программной системы. Это зависит от числа под­\nвергнувшихся воздействию программных модулей, их критичности и характера изменений. Возможными решени­\nями могут быть:\n- повторная проверка только изменений программного модуля:\n- повторная проверка всех подвергнувшихся воздействию программных модулей;\n- повторная проверка всей системы.\nБолее подробное описание данного метода.'средства приведено в [200. 233].\nВ.5.24 Управление конфигурацией программного обеспечения\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А.8).\nЦель: обеспечение согласованности результатов работы групп поставщиков составляющих проекта, \nа также изменений в этих поставках. В общем случав управление конфигурацией применимо к разработке как \nАС. так и ПО.\nОписание: управление конфигурацией ПО представляет собой метод, используемый в течение всей разра­\nботки. В сущности, он требует документирования разработки каждой версии, каждой значимой ее поставки и \nкаждой взаимосвязи между различными версиями разработки различных поставщиков. Полученная документа­\nция позволяет разработчику определять, как влияет на другие поставки изменение в первой поставке (особенно \nодного из его компонентов). В частности, системы или подсистемы могут надежно компоноваться (конфигуриро­\nваться) из согласованных наборов версий компонентов.\nБолее подробное описание данного метода/средства приведено в [234. 235].\nВ.6 Оценка функциональной безопасности\nП р и м е ч а н и е  — Соответствующие методы и средства см. также в Б.6 настоящего стандарта.\nВ.6.1 Таблицы решений и таблицы истинности\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблицы А.10 и Б.7).\nЦель: обеспечение ясных и согласующихся спецификаций и анализа сложных логических комбинаций и их \nотношений.\nОписание: в данном методе используют бинарные таблицы для точного описания логических отношений \nмежду булевыми переменными программы.\nИспользование таблиц и точность метода позволили применить его в качестве средства анализа сложных \nлогических комбинаций, выраженных в бинарных кодах.\n63"
        },
        {
            "page": 70,
            "page_content": "ГОСТ Р 53195.5—2010\nРассматриваемый метод достаточмо легко автоматизируется, поэтому его можно использовать в качестве \nсредства спецификации систем.\nВ.6.2 Исследование опасности и работоспособности (HAZOP)\nЦель: определение угроз безопасности в предлагаемой или существующей системе, их возможных причин \nи последствий, а также рекомендуемых действий по минимизации вероятности их появления.\nОписание: фулпа специалистов в области создаваемой системы принимает участие в структурном анализе \nпроекта системы путем ряда запланированных совещаний. Они рассматривают как реализацию функций проекта \nсистемы, так и способы работы системы на практике (включая действия персонала и процедуры эксплуатации \nсистемы). Руководитель группы специалистов инициирует ее участников создавать потенциальные опасности и \nуправляет этой процедурой, описывая каждую часть системы в сочетании с отдельными ключевыми словами: \n«отсутствует», яболее», «менее», «часть целого», «больше чем» (или «так же как и») и «иначе чем». Каждое \nприменимое условие или режим отказа рассматривается с точки зрения реализуемости, причин возникновения, \nвозможных последствий (появляется ли опасность), способа устранения и. в случае устранения, выбора наибо­\nлее целесообразного метода.\nЗатем часто возникает необходимость провести дальнейшее исследование опасностей (методом вероят­\nностной или количественной оценки риска) с целью их более подробного рассмотрения.\nИсследование опасностей может выполняться на разных стадиях разработки проекта, однако наиболее \nэффективным такое исследование может быть на начальных стадиях, с тем чтобы как можно раньше \nповлиять на основные решения по проектированию и работоспособности системы. Полезно в графике выполне­\nния проекта определить фиксированное время для совещаний продолжительностью не менее половины дня \nи не болве четырех раз в неделю с тем чтобы рассматривать весь поток сопроводительной документации. \nСопроводительная документация, выработанная на совещаниях, должна составлять существенную часть \nдосье об опасности/безопасности системы.\nМетод HAZOP создавался для производственных процессов, и без модификации его сложно применить \nк программным элементам программируемых электронных систем (РЕ-систем — PES). Были разработаны раз­\nличные производные методы PES HAZOP (или Computer HAZOPs — «CHAZOPs»). которые сопровождались \nновыми руководящими материалами и/или реализовывали способы систематического охвата системной и про­\nграммной архитектур.\nБолее подробное описание данного метода/средства приведено в (236. 237).\nВ.6.3 Анализ отказов по общей причине\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А. 10).\nЦель: определение возможных отказов в нескольких системах или нескольких подсистемах, которые могут \nсвести к нулю преимущества избыточности из-за одновременного появления одних и тех же отказов во многих \nчастях системы.\nОписание: системы, ориентированные на безопасность обьекта. часто используют избыточность аппарат­\nных средств и мажоритарный принцип голосования. Этот подход исключает случайные отказы в компонентах или \nподсистемах аппаратных средств, которые могут помешать корректной обработке данных.\nОднако некоторые отказы могут оказаться общими для нескольких компонентов или подсистем. Напри­\nмер. если система установлена в одном помещении, то недостатки вентиляции могут снизить преимущества \nизбыточности. Это может оказаться верным и для других внешних влияний на систему (например, пожар, затоп­\nление. электромагнитные влияния, трещины в печатных платах и землетрясение). Система может быть также \nподвержена воздействиям, относящимся к ее функционированию и эксплуатации. Поэтому важно, чтобы в рабо­\nчих инструкциях были предусмотрены адекватные и хорошо задокументированные процедуры по функциониро­\nванию и эксплуатации системы, а обслуживающий персонал был хорошо обучен.\nВнутренние причины также вносят большой вклад в общее число отказов. Их основой могут являться ошиб­\nки проектирования общих или идентичных компонентов и их интерфейсов, в том числе и устаревших компонентов. \nАнализ отказов по общей причине должен отыскивать также общие дефекты в системе. К методам анализа \nотказов по обшей причине относятся:\n- общее управление качеством:\n- анализ проектов:\n- верификация и тестирование независимой группой:\n- анализ реальных ситуаций, полученных из опыта работы аналогичных систем.\nОднако область применения такого анализа выходит за рамки только АС. Даже если разные программы \nиспользуются в разных каналах избыточных систем, возможна некоторая общность в программных подходах, \nкоторая может привести к росту отказов по общей причине (например, ошибки в общей спецификации).\nЕсли отказы по общей причине не появляются точно в одно и то же время, то должны быть предприняты \nмеры предосторожности путем сравнения методов, применяемых в различных каналах. При этом использование \nкаждого метода должно приводить к обнаружению отказа до того, как он окажется общим для всех каналов. При \nанализе отказов по общей причине следует использовать этот подход.\nБолее подробное описание данного метода/средства приведено в [238. 239).\n64"
        },
        {
            "page": 71,
            "page_content": "ГОСТР 53195.5—2010\nВ.6.4 Модели Маркова\nЦель: оценка надежности, безопасности и доступности систем.\nОписание: строится граф системы, представляющий состояния системы, связанные с ее отказами (состоя­\nния отказов представляются узлами графов). Связи между узлами, представляющие собой события-отказы или \nсобытия-восстановления, имеют весовые коэффициенты, соответствующие частотам отказов или частотам вос­\nстановлений. Предполагается, что переход из состояния N в последующее состояние N + 1 не зависит от преды­\nдущего состояния N -  1. Следует заметить, что события, состояния и частоты отказов могут быть детализированы \nтак. что может быть получено точное описание системы, например обнаруженные или необнаруженные отказы, \nобнаружение наибольшего отказа и т. п.\nМетод Маркова подходит для моделирования многих систем, уровень избыточности которых изменяется со \nвременем вследствие нахождения компонента в состоянии отказа или восстановления. Другие классические \nметоды, например FMEA и FTA. не могут быть адаптированы к моделированию влияний отказов в течение жизнен­\nного цикла системы, поскольку не существует простой комбинаторной формулы для вычисления соответствующих \nвероятностей.\nВ простейших случаях такую формулу, описывающую вероятности системы, можно найти в литературе или \nвывести самостоятельно. В более сложных случаях существуют методы упрощения (то есть сокращение числа \nсостояний). Для очень сложных случаев результаты могут быть вычислены с помощью моделирования графа на \nкомпьютере.\nБолее подробное описание данного метода/средства приведено в [240—244].\nВ.6.5 Структурные схемы надежности\nП р и м е ч а н и е  — Ссылка на данный метод/средство приведена в ГОСТ Р 53195.4 (таблица А. 10).\nЦель: моделирование в форме диаграмм набора событий, которые должны происходить, и условий, кото­\nрые должны быть удовлетворены для успешного выполнения операций системы или задач.\nОписание: данный метод позволяет сформировать успешный маршрут, состоящий из блоков, линий и логи­\nческих переходов. Такой успешный маршрут начинается от одной стороны диаграммы и проходит через блоки и \nлогические переходы до другой стороны диаграммы. Блок представляет ообой условие или событие, маршрут \nпроходит через него, если условие истинно или событие произошло. Когда маршрут подходит к логическому пере­\nходу. то он продолжается, если критерий логического перехода выполняется. Если маршрут достигает какой-либо \nвершины, то он может продолжаться по всем исходящим из нее путям. Если существует по меньшей мере один \nуспешный маршрут через всю диаграмму, то цель анализа считается достигнутой.\nБолее подробное описание данного метода/срвдства приведено в [245. 246].\nВ.6.6 Моделирование методом Монте-Карло\nП р и м е ч а н и е  — Ссылка на данный метад'средство приведена в ГОСТ Р 53195.4 (таблица Б.4).\nЦель: моделирование ситуаций реального мира с помощью программных средств методом генерации \nслучайных чисел.\nОписание: моделирование методом Монте-Карло используется для решения двух классов задач:\n- вероятностных, в которых для генерации стохастических ситуаций используются случайные числа:\n- детерминистических, которые математически преобразуются в эквивалентную вероятностную форму.\nПри методе Монте-Карло формируются потоки случайных чисел, с тем чтобы генерировать шум при анали­\nзе сигналов или добавлять их в случайные смешения или допуски.\nДанный метод гарантированно обеспечивает нахождение смещений, допусков или шума в приемлемых \nдиапазонах.\nОбщие принципы моделирования методом Монте-Карло заключаются в переформулировании задачи так. \nчтобы полученные результаты были как можно более точными, что позволяет отказаться от решения проблемы \nв ее исходной постановке.\nБолее подробное описание данного метода/срвдства приведено в [247. 248].\n65"
        },
        {
            "page": 72,
            "page_content": "ГОСТ Р 53195.5—2010\nПриложение Г \n(справочное)\nМетоды оценки.\nВероятностный подход к определению полноты безопасности \nпредварительно разработанных программных средств\nГ.1 Общие положения\nНастоящее приложение содержит исходные руководящие материалы по использованию вероятностного \nподхода к определению полноты безопасности ПО СБЗС-систем для предварительно разработанных программ \nна основе их опыта эксплуатации. Вероятностный подход является наиболее подходящим для оценки операци­\nонных систем, библиотечных компонентов, компиляторов и других программных систем. Настоящее приложение \nсодержит также описание возможностей вероятностного подхода, однако его следует использовать только спе­\nциалистам. компетентным в статистическом анализе.\nПредложенные в настоящем приложении методы могут быть также использованы для демонстрации рос­\nта уровня полноты безопасности программных средств, которые некоторое время успешно эксплуатировались. \nНапример, программные средства, созданные в соответствии с требованиями ГОСТ Р 53195.4 для SIL1, после \nсоответствующего периода успешной работы в большом числе применений могут продемонстрировать соответ­\nствие уровню полноты безопасности SIL2.\nЧисло запросов без отказов при испытании или число часов, необходимое для работы без отказов, для \nопределения конкретного уровня полноты безопасности представлено в таблице Г.1. В таблице Г.1 также обоб­\nщены результаты, приведенные в Г.2.1 и Г.2.3 настоящего приложения.\nОпыт эксплуатации может быть выражен математически, как показано в Г.2. для дополнения или замены \nстатистического тестирования, а опыт эксплуатации, полученный из нескольких мест эксплуатации, может быть \nобъединен путем добавления конкретного числа обработанных запросов или часов работы в течение эксплуата­\nции. но только в случае, если:\n- программная версия, подлежащая использованию в Е/ЕУРЕ СБЗС-системе. будет идентична версии, для \nкоторой предъявлен результат опыта ее эксплуатации;\n- их эксплуатационный профиль и входные условия схожи,\n- существует эффективная система уведомлений и документирования отказов:\n- справедливы принятые в Г.2 предположения.\nТ а б л и ц а  Г.1 — Необходимая предыстория для определения уровня полноты безопасности\nУ р о в е н ь\nполноты\nб е зо па сно ­\nс ти\nЗначение вероятности \nотказа при выполнении \nпланируем ы х ф ункций \nпо запросу {режим \nработы с низкой интеи \nсиамостью  запросов)\nЧисло реальных \nзапро сов\nЗначение вероятности \nопасного отказа в час \n{реж им  с вы сокой \nи н те нси вн о стью  \nзапросов или иепре \nры пиы м  запросом )\nО бщ ее число часов \nэкспл уатации\n1 - а « 0.99\n1 - а  *  0.95\n1 -  в  » 0,99\n1 -  а « 0.9S\nSIL 4\nОт 10'5 включ. до 10'4\n4.6 х 105\n3 X 10*\nОт 10‘9 ВКЛЮЧ. ДО 10“®\n4.6 х 10э\n3 х 10е\nSIL3\nOr 10\"4 включ. до 10‘3\n4.6 X 104\n3 X 104\nОт 10\"8 включ. до 10-7\n4.6 X 10®\n3 х 10в\nSIL2\nОт 10-3 включ. до 10\"2\n4.6 X 103\n3 X 103\nОт 10-7 включ. до 10-6\n4.6 X 107\n3 X 107\nSIL 1\nОт 10~2 включ. до 10-1\n4.6 X 10*\n3 X 102\nОт 10-® включ. до 10\"5\n4.6 X 10е\n3 X 106\nПримечания\n1 Величина 1 -  а представляет собой уровень доверия.\n2 Предпосылки и описание процедур получения числовых значений в настоящей таблице см. в Г.2.1 и \nГ.2.3 настоящего приложения.\nГ.2 Формулы статистического тестирования и примеры их использования\nГ.2.1 Простой статистический тест для режима работы с низкой интенсивностью запросов\nГ.2.1.1 Исходные предпосылки\nТест применим при следующих предпосылках:\n- распределение тестовых данных равно распределению запросов при выполнении операций в режиме \nон-лайн;\n- прохождения тестов статистически не зависят друг от друга в отношении причины отказа;\n66"
        },
        {
            "page": 73,
            "page_content": "ГОСТР 53195.5—2010\n- для обнаружения любых отказов, которые могут появиться, существует адекватный механизм:\n- число тестовых примеров л > 100:\n- во время прогона л тестовых примеров отказы отсутствуют.\nГ.2.1.2 Результаты\nВероятность отказа р (на один запрос) при уровне доверия 1 — ос определяется из выражения\nПРИМЕР\nр<. 1- \nили п г “\n!пп\nР '\nТ а б л и ц а  Г.2 — Вероятности отказа при режиме работы с низкой \nинтенсивностью запросов\nЗначение уровня доверия 1 -  а\nВероятность отказов р\n0,95\nЗ/П\n0,99\n4,6/п\nДля вероятности отказа при запросе для уровня полноты безопасности SIL3 при уровне \nдоверия 95 % применение указанной формулы дает 30 000 тестовых примеров при выполнении \nусловий принятых предпосылок. Результаты для каждого уровня полноты безопасности объедине­\nны в таблице Г. 1.\nГ.2.2 Тестирование входного массива (предметной области) для режима работы с низкой интенсив­\nностью запросов\nГ.2.2.1 Исходные предпосылки\nЕдинственная исходная предпосылка состоит в том. что тестируемые данные выбираются так. чтобы обес­\nпечить случайное унифицированное распределение по входному массиву (предметной области).\nГ.2.2.2 Результаты\nНеобходимо определить число тестов л. которые требуются, исходя из порога точности S. входов для тести­\nруемой функции с низкой интенсивностью запросов (например, безопасное отключение).\nТ а б л и ц а  Г.З — Средние расстояния между двумя точками тестирования\nРазмер предм етною  \nп р о стр а н ств а\nС реднее расстояние между двумя точками\n1\n6= Мп\n2\n6= ^?7л\n3\ns=  У м п\nк\n6= VT77T\nП р и м е ч а н и е  — к гложет быть любым положительным целым числом. \nЗначения 1.2 и 3 приведены только в качестве примеров.\nПРИМЕР\nРассмотрим безопасное отключение, которое зависит только от переменных А и В. Если \nпроверкой было установлено, что пороговые значения, которые разделяют входную пару перемен­\nных А и В, определены с точностью до1 % диапазона измерения А или В. то число равномерно распреде­\nленных тестовых примеров, требуемое в области А и В, будет равно\nп = 1 & 2 = 10*.\nГ.2.3 Простой статистический тест для режима с высокой интенсивностью запросов или непрерыв­\nного режима работы\nГ.2.3.1 Исходные предпосылки\nТест применим при следующих предпосылках:\n- распределение тестовых данных такое же. как и распределение данных при выполнении операций \nв режиме с внешним управлением он-лайн;\n67"
        },
        {
            "page": 74,
            "page_content": "ГОСТ Р 53195.5— 2010\n- относительное уменьшение вероятности отсутствия отказа пропорционально продолжительности \nрассматриваемого интервала времени и постоянно в противном случав;\n- для обнаружения любых отказов, которые могут появиться, существует адекватный механизм;\n- тест выполняется 8 течение времени тестирования t:\n- во время тестирования t никаких отказов не происходит.\nГ.2.3.2 Результаты\nСоотношение между интенсивностью отказовX, уровнем доверия 1- а  и временем тестирования I име­\nет вид\nХ = - ^\n.  \nt\nИнтенсивность отказов обратно пропорциональна среднему времени наработки на отказ (MTBF):\nт = __ 1__\nм т в г\nП р и м е ч а н и е  — В настоящем стандарте не делается различий между интенсивностью отказов в час \nи частотой отказов 8 час. Строго говоря, вероятность отказа F связана с частотой отказов f выражением \nF = 1 -  е~(1, однако область применения настоящего стандарта охватывает частоту отказов менее 10*® 1/ч, а для \nнебольших значений частоты справедливо F -  f  t.\nПРИМЕР\nТ а б л и ц а  Г.4 — Вероятности отказа для режима с высокой интенсив­\nностью запросов или непрерывным запросом\nЗначение уровня доверия 1 -  а\nВероятность отказов в час у\n0,95\n3 t\n0,99\n4,6/t\nДля подтверждения того, что среднее время наработки на отказ составляет по меньшей \nмере 10s час. с уровнем доверия 95 %, требуется время тестирования 3x10s ч и должны быть соблю­\nдены исходные предпосылки. Число тестов, необходимое для каждого уровня полноты безопаснос­\nти, — в соответствии с таблицей Г.1.\nГ.2.4 Полное тестирование\nПрограмму можно рассматривать как урну, содержащую N шаров. Каждый шар представляет собой конк­\nретное свойство программы. Шары извлекаются случайно и заменяются после проверки. Полное тестирование \nдостигается, если все шары извлечены.\nГ.2.4.1 Исходные предпосылки\nТест применим при следующих предпосылках;\n- распределение тестируемых данных таково, что каждое из N свойств программы тестируется с равной \nвероятностью;\n- тесты проводятся независимо друг от друга;\n- каждый появляющийся отказ обнаруживается;\n- число случаев тестирования n »  N;\n- во время п случаев тестирования отказы не появляются;\n- каждый прогон теста контролирует одно свойство программы (свойство программы — это то, что может \nбыть протестировано во время одного прогона теста).\nГ.2.4.2 Результаты\nВероятность тестирования всех свойств программы р определяется выражением\nР =\nр ^ 1т-\n*  \nЛ\nПри оценке этого выражения обычно только первые его члены имеют значение, поскольку в реальных \nусловиях выполняется соотношение п »  N. что делает все члены этого выражения при большом значении j  \nнесущественными. Это видно из таблицы Г.5.\n68"
        },
        {
            "page": 75,
            "page_content": "ГОСТР 53195.5—2010\nПРИМЕР\nРассмотрим программу, которая имела несколько инсталляций в течение нескольких лет. За это \nвремя она выполнялась по меньшей мере 7,5x10е раз. Предположим, что каждое 100-е выполнение про­\nграммы соответствует перечисленным выше исходным предпосылкам (см. Г.2.4.1). Поэтому для ста­\nтистической оценки могут быть приняты 7,5x10* выполнений программы. Если предположить, что \n4000 тестовых прогонов программы могут выполнить исчерпывающее тестирование, считая такую \nоценку консервативной, то в соответствии с таблицей Г.5 вероятность того, что не все будет проте­\nстировано, составляет 2,87х10~5.\nПри N = 4000 значения первых членов в зависимости от п представлены в таблице Г.5.\nТ а б л и ц а  Г.5 — Вероятность тестирования всех свойств программы\nЧисло случаев тестирования п\nВероятность тестирования всех \nсвойств програииы р\n5 X 1 0 *\n1 - 1 ,9  X 10-2 + 1,10x10-*-...\n7,5 X 10*\n1 -2 .8 7  X 1 P S + 4Х10-10-...\n1 X 10s\n1 — 5.54 х 1СГ* + 1,52x10~1s~...\n2 X 105\n1 -  7,67 х 1 fr19 + 2.9Х10-37 -...\nНа практике такие оценки должны быть консервативными.\nБолее подробные сведения по оценке полноты безопасности ПО систем приведены в [88. 148. 249, 250].\n69"
        },
        {
            "page": 76,
            "page_content": "ГОСТ Р 53195.5—2010\nБиблиография\n[1] \nЛарионов А. М.. Майоров С. А.. Новиков Г. И. Вычислительные комплексы, системы и сети. Л.: Ленинград­\nское отделение ЭНЕРГОАТОМИЗДАТ, 1987. http://sergey.weblab.ru/AVSiS/book/ Larionov-VKSiS.htm (дата \nобращения 30.06.2009)\n[2] \nДенисенко В. В. Компьютерное управление технологическим процессом, экспериментом, оборудованием. \nМ.: Горячая линия-Телеком. 2009. 608 с., ил.\n[3] \nСети \nхранения \nданных \nFibre Channel. \nАппаратные \nсредства технологии Fibre Channel, http:// \nwww.fibfechannel.ru/app.htm (дата обращения 29.06.2009)\n[4] \nКомпания Backhoff. Комплексная система противоаварийной защиты Tv/inSAFE // Автоматизация в про­\nмышленности. Июнь 2006. с. 31—34\n[5] \nКомпания Backhoff. «Желтые» модули противоаварийной защиты работают по промышленной шине//Авто- \nматизация в промышленности. Январь 2005. с. 36—38\n[6] \nДудкин А. В. (Backhoff GmbH) ПО TwinCAT CNT решает сложные задачи движения по заданной траекто­\nрии //Автоматизация в промышленности. Май 2004, с. 52—54\n[7] \nЖуков В. В.. Лабковский М. Д. Регулировка электромеханических и радиотехнических приборов и систем: \nУчеб, пособ. для сред., проф.-техн. училищ. М.: Высш. шк.. 1984. 200 с., ил. (Профессионально-техническое \nобразование)\n[8] \nПлатунов А., Постников Н„ Чистяков А. Механизм граничного сканирования в неоднородных микропроцес­\nсорных системах, http://www.chipnew-s.nj/html.cgi/arhiv/00_10/stat_8.htm (дата обращения 27.03.2009)\n[9] \nГрушвицкий R. Ильин И.. Михайлов М. Метод граничного сканирования для смешанных сигналов //Компо­\nненты и технологии. № 8. 2006\n[10] \nГрушвицкий Р.. Ильин И.. Михайлов М. \nМетод граничного сканирования для смешанных сигналов. \nhttp://www.kit-e.ruiarticles/plis/2006_8_118.php (дата обращения 27.03.2009)\n[11] \nСистема безопасного отключения для MOVIDRIVES MDX60B/61B — Условия применения. \nИздание \n«SEWEurudrive» — On-line. 03.2004. http://www.sew-eurodrive.ru/files/pdf/11255064.pdf (дата обращения\n06.07.2009)\n[12] \nПрименение сертифицированных устройств безопасности производства немецкой компании WIELAND \nELECTRIC GMBH на российских предприятиях. Информационно-консультативное издание «Технадзор». \nМай 2007. Nv 6\n[13] \nБрагин Г. Безопасность и сертификация, http://www.safemar.ru/articles.php7id::: 10 (дата обращения 06.07.2009)\n[14] \nСистема безопасного отключения для MOVIDRIVE® MDX60B/61B — Условия применения. Издание \nSEWEurudrive. 03.2004. (дата обращения 06.07.2009). http://www.sew-eurodrive.rU/files/pdf/11255064.pdf (дата \nобращения 06.07.2009)\n[15] \nПрименение сертифицированных устройств безопасности производства немецкой компании WIELAND \nELECTRIC GMBH на российских предприятиях. Информационно-консультативное издание «Технадзор». \nМай 2007. № 6\n[16] \nХотекМ. Методы достижения высокой отказоустойчивости: Windows &. NET Magazine/RE. Открытые \nсистемы. http://www.rnivc.kis.ru/?id=420 (дата обращения 27.03.2009). Постоянный адрес статьи: http:// \nwwvr.osp.ru/v/in2000/sql/312_4.htm\n[17] \nНеплохое И. Мировые тенденции развития адресно-аналоговых систем пожарной сигнализации, http:// \narticles.security-brrdge.com/articles/13/11792 (дата обращения 27.03.2009)\n[18] \nЩербина В. И. Комплексные системы безопасности высотных и многофункциональных зданий и сооруже­\nний. Построение систем, технические средства, рекомендации по применению. М.: Изд-во УКСБиИО. 2006. \n216 с., ил. (Учебно-методическое, справочное пособив)\n[19] \nХарченко В.. Юрченко Ю. IOTS-подход: анализ вариантов структур отказоустойчивых бортовых комплексов \nпри использовании электронных компонентов Industry // Технология и конструирование в электронной ап­\nпаратуре. 2003. № 2\n[20] \nХарченко В.. Юрченко Ю. IOTS-подход: анализ вариантов структур отказоустойчивых бортовых комплексов \nпри использовании электронных компонентов Industry, http://www.chipinfo.ru/literature /chipnews/200307/7.html \n(дата обращения 12.07.2009)\n[21] \nВернер М. Основы кодирования: Учебник для вузов. М.: Техносфера. 2004. 286 с\n[22] \nБлох Э. Л.. Зяблов В. В. Обобщенные каскады-коды: алгебраическая теория и сложность реализации. М.: \nСвязь. 1976\n[23] \nБлох Э. Л.. Зяблов В. В. Линейные каскады-коды. М.: Наука. 1982\n[24] \nПитерсон У., Уэлдон Э. Коды, исправляющие ошибки. Пер. с англ. Изд. 2-е. М.: Мир. 1976. 596 с.\n[25] \nКонопелько В. К.. Липницкий В. А. Теория норм синдромов и перестановочное декодирование помехоус­\nтойчивых кодов. М.: Эдиториал УРСС. 2004.176 с.\n[26] \nЖирнов М. Н. Анализ методов и синтез программно-технического комплекса для диагностирования \nдискретных систем на основе эталонных моделей. Вологодский государственный технический университет. \nhttp://nit.miem.edu.nj/2006/sb/section1/112.htm (дата обращения 28.03.2009)\n70"
        },
        {
            "page": 77,
            "page_content": "ГОСТР 53195.5—2010\n[27] \nМногопроцессорные системы. Классификация систем параллельной обработки данных, http://www.lcard.ruf \n-nail/database/skbd/glava_10.htm (дата обращения 07.07.2009)\n[28] \nКалядин А. Отладчики микроконтроллеров и их применение в разработке микроконтроллерных приложе­\nний. Мир компьютерной электроники/МКА — On-Line. http://www.mka.ru/7ps42051 (датаобращения 12.07.2009)\n[29] \nВстраиваемый контроллер самотестирования памяти ARM 11. Техническое руководство (ARM 11 Memory \nBuilt-In Self Test ControBer Technical Reference Manual) www.htmldatasheeLru/pdf/ arm/arm11.pdf (дата обра­\nщения 28.03.2009)\n[30] \nИнтеллектуальные САПР. Таганрог, Известия ЮФУ. Технические науки — тематический сборник. Сентябрь \n2008. N? 9. http://yandex.iu'yandsearch?p=2&text=recTnpoBaH>ie%2003y%20H%20n3y.TecT%20Abraham (дата \nобращения 12.07.2009)\n[31] \nМетоды и алгоритмы тестирования памяти ЭВМ с обнаружением кратных функциональных неисправнос­\nтей: Автореф. диссертация канд. техн. наук (05.13.15 — вычислительные машины и системы) / Новиков А. С.; \nНауч. рук. Шаршунов С. Г. — Владивосток: ДВГТУ. [s. п.]. 2002. 18 с.\n[32] \nХаркевич А. А. Борьба с помехами. М.: Наука, гл. ред. физ.-мат. лит.. 1965\n[33] \nХемминт Р. В. Теория кодирования и теория информации. М.: Мир. 1983\n[34] \nПитерсон У.. Уэлдон Э. Коды, исправляющие ошибки: Пер. с англ. / Под ред. Р. Л. Добрушина и С. И. Самой- \nленко. М.: Мир. 1976. 594 с.\n[35] \nМорелос-Сарагоса Р. Искусство помехоустойчивого кодирования. Методы, алгоритмы, применение. М.: Тех­\nносфера. 2005\n[36] \nХмельное А. Е. Организация ввода'вывода. Страница Хмельнова Алексея Евгеньевича — On-Line, http:// \nhmelnov.icc.ru/stud/lit/ Shnitman/143-2.html (дата обращения 12.07.2009)\n[37] \nХмельное А. Е. Системы высокой готовности и отказоустойчивые системы. \nСтраница Хмельнова \nАлексея Евгеньевича — On-Line. http://hmelnov.icc.ru/stud/lit/Shnitman/143-4.html (дата обращения 12.07.2009)\n[38] \nRAID. Глоссарий промышленной компании «СПЛАЙН». httpi/iVvww.spline.ru'informabon/reviews/interface/ \nSCSI_glossary (дата обращения 12.07.2009)\n[39] \nИнтеллектуальный дисковый массив RAID 6. Портал «NStor». http://www.n8tDr.ru/ru/catalog/76/88.html (дата \nобращения 12.07.2009)\n[40] \nВатье Ж.-К. Таблицы принятия решений: техника проведения тестирования с использованием Functional \nTester от IBM Rational. Software Services. IBM: Пер. с англ. http:.Vwww.interface.ru/home.asp?artld=1170 (дата \nобращения 07.07.2009)\n[41] \nЕматин В., Закис А.. Новичков А.. Шкляева Н„ Подоляк О. Автоматизация процесса тестирования при помо­\nщи методологии и инструментальных средств IBM Rational. Ч. 1. http://www.software-testing.ru/library/7-vendor- \npapers/156-ibm-rational (дата обращения 08.06.2009)\n[42] \nНовичков А. Автоматизация процесса тестирования при помощи методологии и инструментальных средств\nIBM Rational. Ч. 2. http://www.software-testing.ru'library/7-vendor-papers/155--------- ibm-rational-2- (дата обра­\nщения 08.07.2009)\n[43] \nНовичков А. Автоматизация процесса тестирования при помощи методологии и инструментальных средств\nIBM Rational. Ч. 3. http://www.software-testing.ru/library/vendors/154----------ibm-rational--3- (дата обращения\n08.06.2009) .\n[44] \nДенисенко В. В. Компьютерное управление технологическим процессом, экспериментом, оборудованием. \nМ.: Горячая линия-Телеком. 2009. 608 с., ил.\n[45] \nШнитман В. 3.. Кузнецов С. Д. Серверы корпоративных баз данных. Информационно-аналитические мате­\nриалы. Портал «Сервер» On-Line. http://www.ods.com.ua/win/rus/db/skbd/contents.htm. (дата обращения\n12.07.2009)\n[46] \nFAQ по активному воздушному охлаждению. Портал «Перегрева НЕТ!» http://www.peregreva.neti'fan_basics1 .html \n(дата обращения 15.07.2009)\n[47] \nБаранов В. Термоэлектрический кулер Titan Amanda ТЕС. Портал «3DNews». http://www.3dnews.nj/cooling/ \ntitan_amanda_tec/ (дата обращения 14.07.2009)\n[48] \nНовый твердотельный вентилятор посрамляет традиционные кулеры! http://glamurnenko.com/archives/173 \n(дата обращения 15.07.2009)\n[49] \nЗадерновский А. А., Ривлин Л. А. Лазерное охлаждение полупроводника (оптическая тепловая машина) // \nКвант. Электроника. 1996. № 23 (12). с. 1131—1133\n[50] \nМетрологическое оборудование для контактных и бесконтактных средств измерений температуры, тепло- \nфизических и линейно-угловых измерений. Портал ОАО «Эталон». http://www.omsketa!on .ru/?action=poverka \n(дата обращения 14.07.2009)\n[51] \nЭталонные датчики. Портал «Элемер». http://www.elemer.ru/files/ articles/listovka_pkds_210.pdf. (дата об­\nращения 14.07.2009)\n[52] \nЛукьянченко А.. Федоров А.. Соколов Д.В.. Ломаев Е.Н.. Донг Хынг Ч. Газовые пожарные извещатели. Теоре­\nтические основы и практическое применение II Системы безопасности. 2007, № 6. http://daily.sec.rn/ \ndailypbl show.cfm?rid=6&pid=20660&pos=2&stp=25 (дата обращения 14.07.2009)\n[53] \nОхранный извещатель Bosch Blue Line Р1-Р. http://www.fbgroup.ru/ indexshop.php?scid=1164&sgid=8372. \n(дата обращения 14.07.2009)\n71"
        },
        {
            "page": 78,
            "page_content": "ГОСТ Р 53195.5—2010\n[54] \nРоэдинИ.А. Безопасность производства и труда на химических предприятиях. М.: Колосс. 2006, 254 с. \n(Серия: Учебники и учебные пособия для высших учебных заведений)\n[55] \nISO/IEC 15289:2006 Systems and software engineering — Content of systems and software life cycle process \ninformation products (Documentation)\n[56] \nISO/IEC 90003:2004Software engineering — Guidelines for the application of ISO 9001:2000 to computer software\n[57] \nШалыто A. A. SWITCH-технология. Алгоритмизация и программирование задач логического управления. \nСПб.: Наука. 1998. 628 с.\n[58] \nШалыто А. А. Логическое управление. Методы аппаратной и программной реализации алгоритмов. СПб.: \nНаука. 2002, 784 с.\n[59] \nКрасилов А. А. Информатика в семи томах. Т. 6. Методы информатики (Изобретение, проектирование, \nразработка и сопровождение). М., 1997, 2003\n[60] \nСети Петри. Отчет паб. 11 СИАПУ ДВО РАН. http://www.iacp.dvo.ru/ lab 11/otchet/ot2000/pn3.html (дата обра­\nщения 06.04.2009)\n[62] \nПростые сети Петри. Отчет лаб. 11 СИАПУ ДВО РАН. http:/,'www.iacp.dvo.ru/lab 11/otchet/ot2000/pn3.htmJ#simple \n(дата обращения 06.04.2009)\n[63] \nЦветные сети Петри. Отчет лаб. 11 СИАПУ ДВО РАН. http://www.iacp. dvo.ru/lab 11/otchet/ot2000/pn3.html#cotor \n(дата обращения 06.04.2009)\n[64] \nЯзык предписаний. Отчет лаб. 11 СИАПУ ДВО РАН. http://www.iacp. dvo.ru/lab 11/otchet/ot2000/lnscriptions.html \n(дата обращения 06.04.2009)\n[65] \nГоленков Е. А., Соколов А. С. Метод автоматического построения модели параллельной программы в \nтерминах сетей Петри. Вычислительные методы и программирование. Т. 6. № 2. Изд-во Московского уни­\nверситета. 2005. с. 77—82\n[66] \nПрозоров А. Лекция 4. Моделирование сущностей http://rUab.ru/ lections/ Iec04 (дата обращения 07.04.2009)\n[67] \nКонстантайн Л.. Локвуд Л. Разработка программного обеспечения. СПб.: Питер. 2000, 592 с.\n[68] \nТрахтенгерц Э. А  \nКомпьютерная \nподдержка \nпринятия решений. \nМ.: Наука, 1998. http:// \nwww.masters.donntu.edu.ua/2004/kita/peftov/ library/lecl.htm (дата обращения 16.07.2009)\n[69] \nЧекинов Г. П„ Чекинов С. Г. Применение технологии многоагентных систем для интеллектуальной поддер­\nжки принятия решения (ИППР). Сетевой электронный научный журнал «СИСТЕМОТЕХНИКА». 2003, № 1. \nhttp://systech.miem.edu.ru/2003/n1/Chekinov.htm (дата обращения 07.04.2009)\n[70] \nЙордон Э., Аргила С. Структурные модели в объектно-ориентированном анализе и проектировании. М.: \nЛори. 1999. 288 с.\n[71] \nДубинин В. Н.. Зинкин С. А. Языки логического программирования в проектировании вычислительных сис­\nтем и сетей: Учеб, пособие. Пенза: Изд-во Пенз. гос. техн. ун-та, 1997, 88 с.\n[72] \nЛарман К. Применение UNL2.0 и шаблонов проектирования. Пер. с англ. А. Ю. Шелесгова. Изд. 3-е. \nИздательский дом «Вильямс», 2009, 727 с.\n[73] \nЗлатин И. Л. Systemview 6.0 (SystemVue). Системное проектирование радиоэлектронных устройств. М.: \nГорячая линия-Телеком. 2006. 424 с.\n[74] \nЗагидулпин Р. Ш.. Стешенко В. Б.. Карутин С. Н. SystemView. Системотехническое моделирование устройств \nобработки сигналов. М.: Горячая линия-Телеком. 2005. 294 с.\n[75] \nПотапов Ю. В. Protel DSP. М.: Горячая линия-Телеком. 2006, 276 с., ил. (Серия «Инструменты разработ­\nчика»)\n[76] \nMultisim, LabVIEW и Signal Express. Практика автоматизированного проектирования электронных устройств / \nР. Ш. Загидулпин. М.: Горячая линия-Телеком. 2009. 366 с., ил. (Серия «Современная электроника») http:// \nwvvr.altium.com/products/altium-designer/en/ altium-designer_home.cfm (дата обращения 07.04.2009)\n[77] \nБашлы П. Н. Информационная безопасность: Учеб, пособив. М.: Феникс. 2006. 253 с., ил.\n[78] \nГалле К. Полезные советы по разработке и отладке электронных схем. М.: ДМК Пресс. 2008. 208 с.\n[79] \nБек К. Экстремальное программирование: разработка через тестирование. СПб.: Питер. 2003. 224 с.\n[80] \nКанер С.. Фолк Д., Енг Кек Нгуен. Тестирование программного обеспечения. М.: ДиаСофт, 2001, 538 с.\n[81] \nДюваль П.. Гловер Э. Непрерывная интеграция. Улучшение качества программного обеспечения и сниже­\nние риска. М.: «Вильямс», 2008. 240 с.\n[82] \nБейэер Б. Тестирование черного ящика. Технологии функционального тестирования программного обес­\nпечения и систем. СПб.: Питер, 2004, 320 с.\n[83] \nСиницын С. В.. Налютин Н. Ю. Верификация программного обеспечения. М.: Бином. Лаборатория знаний \n«Интуит». 2008, 368 с.\n[84] \nТэллес М„ Хсих Ю. Наука отладки. КУДИЦ — ОБРАЗ. 2003. 560 с.\n[85] \nТерехов С. А. Нейросетевые аппроксимации плотности распределения вероятности в задачах информа­\nционного моделирования. Научная сессия МИФИ-2002. IV Всероссийская науч.-техн. конф. «Нейроинфор­\nматика-2002»: Лекции по нейроинформатике. Ч. 2. М.: МИФИ. 2002. 172 с.\n[86] \nКазиев В. М., Казиев К. В. Информатика: Задачи и тесты. М.: Просвещение. 2007, 191 с.\n[87] \nКазиев В. М. Введение в практическое тестирование: Курс Интернет-университета информационных техно­\nлогий (ИНТУИТ.ру) http://www .intuit.ru/department/infDnnaUcs/practest (дата обращения 02.05.2009)\n72"
        },
        {
            "page": 79,
            "page_content": "ГОСТР 53195.5—2010\n[88] \nКазарин О. В. Безопасность программного обеспечения компьютерных систем. М.: МГУЛ, 2003. 212 с. \nhttp://scanner.narod.ni/link/Safe/ bezopasnost programmnogo obespecheniya1.htm \n(дата \nобращения\n27.06.2009)\n[89] \nТехника анапиза надежности систем. Метод анализа вида и последствий отказа, http://wwiv.standards.ru/ \ndoc.aspx?catalogid=mec& cfassid=-1&search=60812%962006 (дата обращения 07.11.2009)\n[90] \nАнализ видов и последствий потенциальных отказов (FMEA) (Potential Failure Mode and Effects Analysis). \nПер. с англ. M.: Приоритет. 2003. 84 c.\n[91] \nAMDEC. Анализ видов и последствий потенциальных дефектов продукции / системы. Руководство SOGEDAC- \nIV-1-12. 1994. Пер. с франц. Н. Новгород: СМЦ Приоритет. 2001,16 с.\n[92] \nЛеоненков А. Самоучитель UML. Изд. 2-е. СПб.: БХВ-Петербург. 2004. 432 с.\n[93] \nТрофимов С. А. CASE-технологии: практическая работа в Rational Rose. Изд. 2-е, СПб.: Бином. Торговый \nДом. 2002. 288 с.\n[94] \nАлымов В. Т., Тарасова Н. П. Техногенный риск: анализ и оценка. М.: ИКЦ Академкнига. 2007. 118 с.\n[95] \nМЭК 60812—2006 Техника анализа надежности систем. Метод анализа вида и последствий отказа, http:// \nwww.standards.m/doc. aspx?catalogid=mec&dassid=-1&search=60812 (дата обращения 07.11.2009)\n[96] \nМушик Э.. Мюллер П. Методы принятия технических решений. Пер. с нем. М.: Мир. 1990. 208 с.\n[97] \nМакконелл Д. Анализ алгоритмов. Вводный курс. М.: Техносфера. 200. 304 с.\n[98] \nШафер Д. Ф.. Фатрелл Р. Т.. Шафер Л. И. Управление программными проектами: достижение оптимально­\nго качества при минимуме затрат. Пер. с англ. М.: Издательский дом «Вильямс». 2004, 1135 с., ил.\n[99] \nКазарин О. В. Безопасность программного обеспечения компьютерных систем. М.: МГУЛ. 2003. 212 с.\n[100] \nПлатонов В. В. Программно-аппаратные средства обеспечения информационной безопасности вычис­\nлительных сетей. М.: Академия. 2006, 240 с.\n[101] \nШнайер Б. Секреты и ложь. Безопасность данных в цифровом мире. СПб.: Питер. 2003. 368 с.\n[102] \nЛипаев В. Функциональная безопасность программных средств. Информационный бюллетень «Jet Info» \n08(135)/2004. Публикация от 27.01.2005\n[103] \nЛипаев В. \nФункциональная \nбезопасность \nпрограммных \nсредств, \nhttp://daily.sec.ru/ \ndailypblshow.cfm?rid=45&pid=11751&pos=7&stp=10&cd=18&cm=5&cy=2005 (дата обращения 05.05.2009)\n[104] \nСостав нормативной базы, регламентирующей процесс разработки, эксплуатации, сопровождения и раз­\nвития информационной системы железнодорожного транспорта. Информационная система железнодо­\nрожного транспорта. Системный проект. Кн. 2 (приложение 2). тема 10.00.76/95.00.00 НИОКР МПС № 29 \nот 29.01.96 г. М.: НИИЖА. 1997\n[105] \nBS EN 50128:2001 Системы телекоммуникационные, сигнализационные и системы для обработки дан­\nных. применяемые на железных дорогах. Программное обеспечение для систем управления и защиты на \nжелезных дорогах. Пер. с англ. (Railway applications. Communications, signalling and processing systems. \nSoftware for railway control and protection systems) http://emc.belsut.infa/docs/slandards/DIN_EN./ EN_50128.pdf \n(дата обращения 05.05.2009)\n[106] \nЙордан Э. Путь камикадзе. Как разработчику выжить в безнадежном море проектов. М.: Лори. 2000. \n255 с.\n[107] \nЗотов В. Формирование описаний компонентов для внутрикристальной отладки цифровых устройств и \nвстраиваемых микропроцессорных систем на основе программируемых модулей Xinix CORE Generator \nTool // Компоненты и технологии. 2008. N? 11\n[108] \nЗотов В. Формирование описаний компонентов для внутрикристальной отладки цифровых устройств и \nвстраиваемых микропроцессорных систем на основе программируемых модулей Xinix CORE Generator \nTool. Ч. 2 // Компоненты и технологии. 2008. No 12\n[109] \nЗотов В. Формирование описаний компонентов для внутрикристальной отладки цифровых устройств и \nвстраиваемых микропроцессорных систем на основе программируемых модулей Xinix CORE Generator \nTool. Ч. 2 // Компоненты и технологии. 2009, N? 2\n[110] \nЗотов В. Формирование описаний компонентов для внутрикристальной отладки цифровых устройств и \nвстраиваемых микропроцессорных систем на основе программируемых модулей Xinix CORE Generator \nTool. Ч. 2 II Компоненты и технологии. 2009. № 3\n[111] \nМейер Б. Обьектно-ориентированное конструирование программных систем. М.: Издательско-торговый \nдом «Русская Редакция». «Интернет-университет информационных технологий». 2005. 1232 с., ил.\n[112] \nГайсарян С. С. Обьектно-ориентированные технологии проектирования прикладных программных си­\nстем. http://wm-help.net/books-online/pfint-page/55841/55841.html (дата обращения 16.07.2009)\n[113] \nМетодология JSD. http://wm-help.net/books-online/print-page/55841/55841-37.html \n(дата \nобращения\n15.05.2009)\n[114] \nПайл Я. Ада — язык встроенных систем / Пер. под ред. А. А. Красилова. М.: Мир. 1984\n[115] \nВендровА. Case-технологии. Современные методы и средства проектирования информационных си­\nстем. М.: Финансы и статистика.1998.176 с.\n[116] \nМарка Д.-А.. Мак Гоуэн К. Методология структурного аннализз и проектирования SADT (Structured \nAnalysis & Design Technique). Электронная библиотека. http://www.interface.ru/fset.asp?Url=/CASE/ prw.htm \n(дата обращения 15.05.2009)\n73"
        },
        {
            "page": 80,
            "page_content": "ГОСТ Р 53195.5—2010\n[117] \nЛеоненков А. В. UML 2 Самоучитель. СПб.: БХВ-Петербург. 2007. 576 с.\n[118] \nЭнсор Д.. Стивенсон Й. Oracle. Проектирование баз данных. BHV-Киев. 2000. 560 с.\n[119] \nСистемная информатика. Сб. науч. тр. Вып. 9. Формальные методы и модели информатики. Новоси­\nбирск: Изд-во СО РАН. 2004\n[120] \nМакконнелл Д. Основы современных алгоритмов. М.: Техносфера. 2006. 368 с.\n[121] \nТопорков В. В. Модели распределенных вычислений. М.: Физматлит. 2004. 320 с.\n[122] \nБэкон Д. Харрис Т. Операционные системы. Параллельные и распределенные системы. СПб.: Питер. \nИздательская группа BHV. 2004, 800 с.\n[123] \nСтупников С. А. Моделирование композитных уточняющих спецификаций. Диссертация канд. техн. наук. \nМ.: Ин-т проблем информатики РАН. 2006. На правах рукописи\n[124] \nНикифоров А. Ю. Язык описания взаимодействия иерархических систем и его персонализация/ / Про­\nграммные продукты и системы. 2009. № 1\n[125] \nДорошенко А. Е., Шевченко Р. С. Система символьных вычислений для программирования динамических \nприложений, http:i7oai.org.ua/ index, php/record/view/3144 (дата обращения 25.12.2009)\n[126] \nБлейхут Р. Быстрые алгоритмы цифровой обработки сигналов. М.: Мир. 1989. 448 с.\n[127] \nГригорьев О. М. Аналитико-табличные процедуры для временных логик // Logical Studies. 2000. N° 4\n[128] \nСтемпковский А. Л. Методы логического и логико-временного анализа цифровых КМОП СБИС. М.. Наука. \n2007\n[129] \nГуц А. К. Математическая логика и теория алгоритмов. Электронная библиотека, http://mat-ua.narod.ru/mat'' \nGuz-Logika-Algoritmi.htm (дата обращения 16.05.2009)\n[130] \nЛаврищева Е. М.. Петрухин В. А. Методы и средства инженерии программного обеспечения: Уч. М.: МФТИ \n(ГУ). 2006. 304 с.\n[131] \nРазработка технологии верификации управляющих программ со сложным поведением, построенных на \nоснове автоматного подхода. Этап 1. Выбор направления исследований и базовых методов. Отчет \n№ 2007.08.31. СПб.: СПбГУ ИТМО. 2007. http://is.ifmo.ru/verirication /2007 01 patent-verification.pdf \n(дата \nобращения 16.05.2009)\n[132] \nЯкушин. Программирование с защитой от ошибок. http://vnftw.tspu .tula.ru/ivt/okl site/umr/ trpo/node74.html \n(дата обращения 16.05.2009)\n[ 133] \nКолесов A. &quot;Go to&quot: — выражение из четырех букв // BYTE Россия. 2001. N? 8 (37)\n[134] \nПетраков А. В. Основы практической защиты информации: Учеб, пособив. М.: Салон-Пресс, 2005, 384 с.\n[135] \nКорт С. С. Теоретические основы защиты информации. М.: Гелиос АРВ. 2004, 240 с.\n[136] \nДомашев А.. Попов В.. Правиков Д., Грунтович М. Программирование алгоритмов защиты информации. \nИзд. 2-е.. М.: НОЛИДЖ. 2002. 416 с.\n[137] \nЛипаев В. В. Выбор и оценивание характеристик качества программных средств. Методы и стандарты. М.: \nСИНТЕГ. 2001. 228 с.\n[138] \nСаттер Г.. Алекса ндреску А. Стандарты программирования на C++. 101 правила и рекомендации. М.: \n«Вильямсе. 2005, 224 с.\n[139] \nСухомлин В. Система программирования тройного стандарта (ЗС++). Науч.-иссл. вычисл. центр МГУ \nим. М. В. Ломоносова. httpy/www. citforum.ru/programming/prg96/94.shtml (дата обращения 16.05.2009)\n[140] \nШпаковский Г. И.. Серикова Н. В. Программирование для многопроцессорных систем в стандарте MPI. \nМинск: Изд-во БГУ. 2002. 323 с.\n[141] \nЛипаев В. В. Программная инженерия. Методологические основы: Учеб. / В. В. Липаев. Гос. ун-т — Высшая \nшкола экономики. — М.: ТЕИС. 2006. 608 с.\n[142] \nЛипаев В. В. Системное проектирование сложных программных средств для информационных систем. М.: \nСИНТЕГ. 2002. 268 с.\n[143] \nСтруктурное проектирование и структурное программирование. http.7/vnvw.ssti.ru/kpi/informatika/Content/ \nbi)So/M/inform man/gl 18 2.html (дата обращения 16.05.2009)\n[144] \nСиницын С. В.. Налютин Н. Ю. Верификация программного обеспечения. М.: Бином. Лаборатория знаний \n«Интуит». 2008. 368 с.\n[145] \nКулямин В. В. Перспективы интеграции методов верификации программного обеспечения: Труды Инсти­\nтута системного программирования РАН. http7/vnvw.ci tforum.ru/SE/lesting/inlegration (дата обращения\n15.07.2009)\n[146] \nЛипаев В. В. Тестирование крупных комплексов программ на соответствие требованиям: Учеб. М.: ИПЦ \n«Глобус». 2008. 376 с.\n[147] \nЛипаев В. В. Системное проектирование сложных программных средств для информационных систем. М: \nСИНТЕГ. 2002. 268 с.\n[148] \nЛипаев В. В. Методы обеспечения качества крупномасштабных программных средств. М.: СИНТЕГ. 2003. \n520 с., ил.\n[149] \nЛипаев В. В. Документирование сложных программных средств. М.: СИНТЕГ. 2005. 216 с.\n[150] \nЛипаев В. В.. Филинов Е. Н. Мобильность программ и данных в открытых информационных системах. М.: \nНаучная книга. 1997, 368 с.\n74"
        },
        {
            "page": 81,
            "page_content": "ГОСТР 53195.5—2010\n[1511 \nОчков В. Принцип неопределенности программирования. http://metod.ce.cctpu.edu.ru/edu/df/se/general/ \ngen_08.html (дата обращения 15.05.2009)\n[152] \nСтруктурное проектирование и структурное программирование. http://w/nv.ssti.ru'kpi/informatika/Content/ \nbibikwb1/inform_man/gl_18_2.html (дата обращения 16.05.2009)\n[153] \nЛипаев В. В. Функциональная безопасность программных средств. М.: СИНТЕГ. 2004. 348 с.\n[154] \nКонопелько В. К.. Липницкий В. А. Теория норм синдромов и перестановочное декодирование помехоус­\nтойчивых кодов. Изд. 2-е. М.: Эдиториал УРСС. 2004,176 с.\n[155] \nКерман М. К. Программирование и отладка в Delphi: Учебный курс. М.: «Вильямс», 2003, 672 с.\n[156] \nВласов К. А.. СмачёвА. С. Методика автоматизированной проверки возвращаемых кодов ошибок при \nтестировании программных интерфейсов. Тр. Института системного программирования РАН. М.. 2007\n[157] \nСайков. Б. Сбои компьютера: диагностика, профилактика, лечение. Изд. 2-е. М.: Бином. Лаборатория \nзнаний. 2003, 351 с.\n[158] \nПрограммный модуль дополнительного мониторинга TSS-2000 Multimonitonng фирмы TSS (Россия), http:/ \n/www.centers.ru/brands/lss/ modet/mod221002280.htm (дата обращения 13.06.2009)\n[159] \nЕС-16. Блок аварийного резервирования аппаратно-программного комплекса AMS-16/32. Техническое \nописание и инструкция по эксплуатации. М.: ООО «РОКСТОН». 2005. http:i7www.6scortpro.ru'' data/catalog/ \ninstructionM5112005121715.pdf (дата обращения 13.06.2009)\n[160] \nГорбунов-Посадов М. М. Расширяемые программы. М.: Полиптих. 1999. 336 с.\n[161] \nСеменова И. И. Способ построения алгоритмов по многовариантным моделям. Развитие оборонно-про­\nмышленного комплекса на современном этапе: Мат. науч.-твхн. конф.— 4.1. Омск: ОмГУ. 2003. \nс. 135— 137. http://semenova-ii.narod.ru/stab08.html (дата обращения 13.06.2009)\n[162] \nСеменова И. И. Система автоматизированного построения многовариантных моделей. СибАДИ. http:// \nsemenova-ii.narod.ru/stat/08.htmi (дата обращения 13.06.2009)\n[163] \nТестирование и отладка приложений на С#. Skillsoft. /DOBS Prospero. http://shop.ddbs.ru/prog _49185.html \n(дата обращения 19.05.2009)\n[164] \nРоббинс Д. Отладка приложений для Microsoft.NET и Microsoft Windows. Электронная \nбиблиотека \nBrain2life.[com], 42.2 МБ. http://www.brain2Irfe.com/book/597.html (дата обращения 19.05.2009)\n[165] \nКрюков В. А. Операционные системы распределенных вычислительных систем (распределенные ОС). \nКурс лекций. Лаборатория Параллельных Информационных Технологий. НИВЦ МГУ. Электронная книга. \n«Parailel.ru». http://www.parallel.ru/krukovrtec7.html (дата обращения 19.05.2009)\n[166] \nБогатырев В. А. Отказоустойчивость распределенных вычислительных систем динамического распреде­\nления запросов и размещение функциональных ресурсов. Электронное научно-техническое издание \n«Наука и образование». Эл. № ФС 77 - 30569. \nГосударственная регистрация №» 0420900025. http:// \ntechnomag.edu. ru/doc/56860.html (дата обращения 19.05.2009)\n[167] \nТаненбаум Э., ван Стеки. Распределенные системы. Принципы и парадигмы. М.: Питер. 2003, 877 с. \nФормат: pdf. 23.3 МВ\n[168] \nТаненбаум Э.. ВудхаллА. Операционные системы. Разработка и реализация {+ CD-ROM). СПб.: Питер, \n2007. 704 с. Формат: djvu> 9472 кБ\n[169] \nКрасилов А. А. Информатика в семи томах. Т. 7. Интеллектуальные системы (Системы решения проблем). \n«Интеллсист». Интеллектуальные системы общего назначения. М.. 1997—2003. http://www. intellsyst.ru/ \npublications/_text/TOM7.shtml (дата обращения 19.05.2009)\n[170] \nАхоА. В.. ЛамМ.-С., Рави С.. Ульман Д.-Д. Компиляторы: принципы, технологии и инструменты. Изд. 2-е, \nМ.: «Вильямс», 2008. 1184 с., ил.\n[171] \nДушкин Р. В. Опыт построения единого комплекса автоматизированных систем управления предприяти­\nем. // Инженер. Технолог. Рабочий: Публицистический производственно-технический журнал/ МАШИЗДАТ. \nВып. 5. 2009. с. 13—14\n[172] \nДушкин Р. Лекция 1. Вводная лекция, httpy/roman-dushkin.narod .ru/fp_01 .html (дата обращения 07.06.2009)\n[173] \nКсавье П. Delphi for NET. Руководство разработчика. М.: «Вильямс». 2005. 960 с., ил.\n[174] \nКомпилятор полного стандарта языка C++ как ядро систем разработки программного обеспечения. Сб. \nстатей компании «Интерстрон». Приложение к журналу «Комльюлог». 2000. N9 3. http://www.interstron.ru/ \nold/pdf/kompjog.pdf (дата обращения 07.06.2009)\n[175] \nЦирлов В.. Миронов В., Марков А. Выявление уязвимостей в программном коде//Открытые системы. 2005. \n№ 12. http://www.osp. ru/os/2005/12/380655 (дата обращения 07.06.2009)\n[176] \nЧернов А. В. \nАнализ \nзапутывающих \nпреобразований программ. Труды ИСП РАН. 2008. http:// \nwww.citforum.idknet.com/security /articles/anaJysis (дата обращения 07.06.2009)\n[177] \nКорменТ.-Х., Лейзерсон Ч.-И.. Ривест Р.-Л.. Штайн К. Алгоритмы: построение и анализ. Изд. 2-е. М.: Изда­\nтельский дом «Вильямс». 2008. 1297 с.\n[178] \nБуч Г.. Максимчук R- А., Энгл М.-У., Янг Б.-Д.. Коналлен Д., Хьюстон К.-А. Обьектно-ориентированный анализ \nи проектирование с примерами приложений. Изд. 3-е, М.: Издательский дом «Вильямс». 2008. 720 с.\n[179] \nМакаров А. В.. Скоробогатов С. Ю.. Чвловский А. М. Common Inter-mediate Language и системное програм­\nмирование в Microsoft.NET. М.: Интернет-университет информационных технологий. 2006. 314 с. http:// \nwww.rus-kniga.biz/tv246-298579.html (дата обращения 07.06.2009)\n75"
        },
        {
            "page": 82,
            "page_content": "ГОСТ Р 53195.5—2010\n[180] \nЕлманова Н. Полезные компоненты и утилиты для пользователей Delphi. C++Builder и IB Database: про­\nдукты компании BatSoft. Компьютер Пресс — CD. 1999. № 2. http://www.Cftforum.ru/progra mming/comp' \ncomp02.shtml (дата обращения 07.06.2009)\n[181] \nЭлиенс А. Принципы объектно-ориентированной разработки программ. Изд. 2-е. М.: «Вильямс». 2002. \n496 с.\n[182] \nНалютин Н. Ю.. Синицын С. В. Верификация программного обеспечения. М.: Бином. Лаборатория знаний \n«Ингуит», 2008. 368 с.\n[183] \nПлаксин М. А. Тестирование и отладка программ — для профессионалов будущих и настоящих. М.: Бином. \nЛаборатория знаний. 2007. 167 с.\n[184] \nТюрин Ю.. Марков А. Анализ данных на компьютере. М.: Инфра-М. 2003. 544 с.\n[185] \nРубанов В. В., Хорошилов А. В.. ШатохинЕ. А. Т2С: технология автоматизированной разработки тестов \nбазовой функциональности программных интерфейсов. М.: Труды Института системного программирова­\nния РАН. 2008 г. httpi//www.crtforum.ru/SE/testing/t2c/ (дата обращения 13.06.2009)\n[186] \nКалбертсон Р„ Браун К.. Кобб Г. Быстрое тестирование. М.: «Вильямс». 384 с.\n[187] \nИванова Г. С. Технология программирования. М.: Изд.-во МГТУ им. Н. Э. Баумана. 336 с.\n[188] \nМедина К. Устройства ввода ошибок FBD-памяти для компьютеров IBM System х. http://wwwibm.corrV \ndeveloperworks/ru/library/es-fbd (дата обращения 14.06.2009)\n[189] \nКпиманг Ю. В. C++. Дистанционное обучение программистов. Уроки по программированию. Урок 8. http:/ \n/cipg.km.ru/iessons/ci/les08.html (дата обращения 14.06.2009)\n[190] \nБлэк Р. Ключевые процессы тестирования. Планирование, подготовка, проведение, совершенствование. \nМ.: Лори. 544 с.\n[191] \nМакгрвгор Д „ Сайкс Д. Тестирование обьектно-ориентированного программного обеспечения: Практи­\nческое пособие. М.: ТИД «ДС». 432 с.\n[192] \nБейзер Б. Тестирование черного ящика. Технологии функционального тестирования программного обес­\nпечения и систем. СПб.: Питер. 2004. 320 с.\n[193] \nБек К. Экстремальное программирование, разработка через тестирование. СПб.: Питер. 2003. 223 с.\n[194] \nМайерс Г. Искусство тестирования программ. Пер. с англ. М.: Финансы и статистика. 1982. 176 с.\n[195] \nСиницын С. В.. Налютин Н. Ю. Верификация программного обеспечения. Лекция 13: Документация, со­\nпровождающая процесс верификации и тестирования (отчеты) «Интернет университет. Информацион­\nные технологии» http://www.intuit.ru/department/se /verify/13 (дата обращения 25.06.2009)\n[196] \nРоманюк С. Г. Оценка надежности программного обеспечения. М.: НИИСИ РАН. http://www.uprav.biz/materials/ \ninnov/view/2273.html (дата обращения 25.06.2009)\n[197] \nСмагин В. А. Форсированные быстродействием испытания программного обеспечения на надежность. \nhttp://sprobv-17.narod.ru (дата обращения 25.06.2009)\n[198] \nСмагин В. А. О форсированных \nиспытаниях \nпрограммного обеспечения \nна \nнадежность, http:// \nsprobv-17.narod.ru (дата обращения 25.06.2009)\n[199] \nСмагин В. А. \nВведение в точностную \nтеорию \nнадежности \nпрограммного обеспечения, http:// \nsprobv-17.narod.ru (дата обращения 25.06.2009)\n[200] \nКазарин О. В. Безопасность программного обеспечения компьютерных систем. М.: МГУЛ. 2003. 212 с. \nhttp://infonet.cherepovets.ru /citforum/security/articJes/kazarin (дата обращения 25.06.2009)\n[201] \nЧернов А. В. Анализ запутывающих преобразований программ. Тр. Института системного программирова­\nния РАН. М.. 2003. http.V/wvAv.citfonjm.ru/security/articles'analysis (дата обращения 25.06.2009)\n[202] \nКовалев В. В.. Компанией Р. И.. Маньков Е. В.. Дьяченко Д. А.. Пустарнаков В. Ф. Анализ и защита потоков \nуправления в исполняемых кодах программ. Информационно-издательский центр CONNECT! Мир связи. \n2006. № 4\n[203] \nАхо А. В.. Холкрофт Д.-Э., Ульман Д.-Д. Структуры данных и алгоритмы. Пер. с англ: Уч. пос. М.: Издатель­\nский дом «Вильямс». 2000, 384 с.\n[204] \nЛипа ев В. Программно-технологическая безопасность информационных систем, http://wvvw.info-system.nu/ \nsecurity/security_pr_tech_ security.html (дата обращения 25.06.2009)\n[205] \nКаслерски К. Техника оптимизации программ — эффективное использование памяти. БХВ-Пегербург. \n2003. 464 с.\n[206] \nРазработка сложного программного обеспечения. http://www.devcomplexsoft.ru (дата обращения 25.06.2009)\n[207] \nЛаврищева Е. М.. Петрухин В. А. Методы и средства инженерии программного обеспечения: Уч. М.: МФТИ \n(ГУ). 2006. 304 с. http://window.edu.ru/window_catalog/files/r41699/lavrishcheva_petrukhin.pdf (дата обраще­\nния 26.06.2009)\n[208] \nТенихин А. Л. Применение формальных методов доказательства при создании безопасных систем. СПбГТУ, \nкафедра ИБКС. http://www.ssl. stu.neva.ru/ssl/publications/magazine'2000/2/3/tenihin.pdf (дата обращения\n26.06.2009)\n[209] \nБоуэн Д.-П., Хинчи М.-Д. Десять заповедей формальных методов. http://wvw.osp.rU/pcworld/1997/09/157957 \n(дата обращения 26.06.2009)\n[210] \nНемолочнов О. Ф.. ЗыковА. Г., Осовецкий Л. Г.. Поляков В. И., Петров К. В. Тестирование логических \nнеисправностей вычислительных процессов в программах // Информационные технологии. 2007. № 12. \nс. 2—5\n76"
        },
        {
            "page": 83,
            "page_content": "ГОСТР 53195.5—2010\n[211] \nКолдовским В. Разработка ПО: метрики программных проектов. Киев: Издательский Дом ITC. 2009. \nhttp://itc.ua/node/27774 (дата обращения 26.06.2009)\n[212] \nСбор и публикация проектных метрик в процессе разработки программного обеспечения на базе штат­\nных средств IBM Rational Clear Case. OLAP.ru http://www.olap.ru/home.asp?artld=445 (дата обращения\n26.06.2009)\n[213] \nНиколс Э.. Петерсон Г. Метрики управления качеством защиты приложений. Портал «Открытые системы. \nСУБД», http://www.osp. ru/os/2007/04/4219959 (дата обращения 26.06.2009)\n[214] \nКулямин В. В. Компонентный подход в программировании. Лекция 8: Образцы проектирования. БИНОМ. \nЛаборатория знаний. Интернет-университет информационных технологий — ИНТУИТ.ру. 2006. http:// \nwww.intuit.ru/department/se/compprog/8/1.html (дата обращения 26.06.2009)\n[215] \nКулямин В. В. Компонентный подход в программировании. Курс лекций. БИНОМ. Лаборатория знаний. \nИнтернет-университет информационных технологий — ИНТУИТ.ру. 2006. http://nrww.intuit.nj/d6partment/ \nse/compprogM (дата обращения 26.06.2009)\n[216] \nСалливан Э. Время — деньги. Создание команды разработчиков программного обеспечения. Пер. с \nангл. М.: Издательско-торговый дом «Русская Редакция». 2002. 368 с., ил. http:/i\\vww.proklondike.com (дата \nобращения 27.06.2009)\n[217] \nРуководящий документ. Защита от несанкционированного доступа к информации. Часть 1. Программное \nобеспечение средств защиты информации. Классификация по уровню контроля отсутствия недеклариро- \nванных возможностей. Утвержден решением председателя Государственной технической комиссии при \nПрезиденте Российской Федерации от 4 июня 1999 г.. № 114\n[218] \nБурьях А. Компактное программирование. Программирование на основе прототипов. Prototype-Based \nProgramming (РВР). http://compact-programming.narod.ro/CP0003.htm (дата обращения 28.06.2009)\n[219] \nУолш Д. (George Walsh). Создание прототипа программы с помощью библиотеки OpenMP*. Intel. 2006. \nhttp://www.intel.com/cdrids/developer/emea',rusi,do4vindows/windows64/191144.htm (дата обращения 28.06.2009)\n[220] \nПавловская Т.А. Программирование на языке высокого уровня. СПб.: Питер. 2007, 432 с.\n[221] \nДастин Э.. Рэшка Д., Пол Д. Автоматизированное тестирование программного обеспечения. Внедрение, \nуправление и эксплуатация. М.: Лори, 2003. 592 с.\n[222] \nСоветов Б. Я.. Яковлев А. М. Моделирование систем. Изд. 3-е перераб. и доп. Электронная библиотека \nобразовательных и просветительских изданий. М.. 2001. 374 с.\n[223] \nГОСТ 34.602—89 Техническое задание на создание автоматизированной системы\n[224] \nЛеффингуэлл Д.. Уидриг Д. Принципы работы с требованиями к программному обеспечению. Унифициро­\nванный подход. М.: «Вильямс». 2002. 448 с.\n[225] \nЛеффингуэлл Д.. Уидриг Д. Принципы работы с требованиями к программному обеспечению. Унифициро­\nванный подход. М.: «Вильямс». 2002. 448 с.\n[226] \nПипер Ш.. Поп Д., Сколт М. Новая эра в оценке производительности компьютерных систем. (Sean Pieper. \nJoann Paul. Michael Schulte. A New Era of Performance Evaluation. IEEE Computer. September 2007. IEEE \nComputer Society. 2007. All rights reserved. Reprinted with permission). Пер. с англ. Портал «Открытые \nсистемы — СУБД». http://www.osp.ru/os/2007/09/4569364 (дата обращения 29.06.2009)\n[227] \nЕлашкин М. Производительность СУБД и тесты ТРС. «BYTE — Платформы и технологии». 2004. N9 3 (67). \nhttp://www.bytemag.ru/ articles/detail.php?ID=3571 (дата обращения 29.06.2009)\n[228] \nАнализ производительности 64- и 32-разрядных многопроцессорных вычислительных систем в програм­\nмном комплексе вычислительной гидрогазодинамики STAR-CD. Gjhnfk «iXBT.com». http://www.ixbt. сот/ \ncpu/star-cd-tests.shtml (дата обращения 29.06.2009)\n[229] \nПушников А. Ю. Введение в системы управления базами данных. Глава 9. Транзакции и целостность баз \nданных. Портал «CrrFORUM.ru». http://www.citfomm.ru/databas6/dbleam.'db!eam09.shtml (дата обращения\n29.06.2009)\n[230] \nПреодолевая ограничения Windows: физическая память. Портал «Русский хакер.ру». http:i7rushacker.ru/ \nindex.php?autocom=ibwiki& cmd=artic!e&id=5 (дата обращения 29.06.2009)\n[231] \nОграничение \nпользователей Портал «FreeBSD». \nhttp://www. fr6ebsd.org.ua/doc/ru_RU.KOI8-R/books/ \nhandbook/users-limiting.html (дата обращения 29.06.2009)\n[232] \nГрудина П. Настройка \nограничений пользователям. Портал IT профессионалов «Grodina.ro». http:// \ngrudina.info/artides/freebsd /nastroyka-ogranicheniy-polzovatelyam.html (дата обращения 29.06.2009)\n[233] \nБоне Ш. Эпоха систем, терпимых к изменениям. Портал «Открытые системы — СУБД», http://www.osp.ru/ \nos/2007/07/4394365 (дата обращения 29.06.2009)\n[234] \nСистемы менеджмента качества. Руководящие указания по менеджменту конфигурации. Пер. с англ. \nПортал «Стандартинформ» http://\\vww.vnitki.ru/doc.aspx?catalogid=iso&ciassid=-1&search= 10007. (дата об­\nращения 29.06.2009)\n[235] \nБелладжио Д.. Миллиган Т. Стратегия управления конфигурацией программного обеспечения с использо­\nванием IBM Rational ClearCase. Изд. 2-е. М.. ДМК Пресс. 2008, 384 с.\n[236] \nГОСТ Р 51901.11—2005 (МЭК 61882:2001) Менеджмент риска. Исследование опасности и работоспособ­\nности. Прикладное руководство, http://intranet-fashveb.ru/docs/gost/item 566 (дата обращения 29.06.2009)\n77"
        },
        {
            "page": 84,
            "page_content": "ГОСТ Р 53195.5—2010\n[237J \nШубинский И. Б. Методы анализа рисков нарушения безопасности систем управления. «Евроазия — \nВести». 2006. Выл. 6. http://www.eav.ru/pubt 1 p.php?pubtid=2006-05a 14 {дата обращения 29.06.2009)\n[238] \nОбщие положения безопасности атомных станций. Приказ ГКЯР Украины от 19.11.2007. № 162. http Л \nwww.snrc.gov.ua/nuclear/ru/publish/artide/82143 (дата обращения 29.06.2009)\n[239] \nСмит Д.-Д. Безотказность, ремонтопригодность и риск. Практические методы для инженеров, включая \nвопросы оптимизации надежности и систем, связанных с безопасностью. М.: Группа ИДТ. 2007. 431 с. \nhttp://w4vw.centrmag.ru/book2286985.html (дата обращения 29.06.2009)\n[240] \nМухин О. И. Моделирование систем. Учебник на портале «Stratum.ac.ru» http://stratum.ac.ru/textbooks/modetir/ \nindex.html (дата обращения 29.06.2009)\n[241] \nНихоленко С. Скрытые марковские модели. Машинное обучение -  ИТМО. осень 2006. http://logic.pdmi.ras.ru/ \n~sergey/teaching/mtbayes/06-hmm.pdf (дата обращения 29.06.2009)\n[242] \nКуликов Г. Г., Флеминг Л.-Д.. Брейкин Т. В.. Арьков В. Ю. Марковские модели сложных динамических си­\nстем: идентификация, моделирование и контроль состояния (на примере цифровой САУ ГТД). Уфа: Уфим. \nгос. авиац. техн. ун-т. 1998,103 с.\n[243] \nРухман Е. Л.. Шеховцов О. И. Марковские модели в задачах помехоустойчивости и надежности передачи \nинформации: Учеб, пособив. Л.: ЛЭТИ. 1981. 78 с.\n[244] \nМоттль В. В.. Мучник И. Б. Скрытые марковские модели в структурном анализе сигналов. М.: Физматлит. \n1999. 352 с.\n[245] \nАлексеев А. РТА. Дерево отказов как метод структурного анализа. Портал «IT Expert» http://www.itexpert.nj/ \nnjs/ITEMS/77-ЗО (дата обращения 29.06.2009)\n[246] \nГОСТ Р 51901.14—2007 Менеджмент риска. Структурная схема надежности и булевы методы\n[247] \nАбельсон X.. Сассман Д. Д., Сассман Д. Структура и интерпретация компьютерных программ — язык \nЛИСП (Lisp). М.: Добросает. 2004. 608 с.\n[248] \nВолков И. М., Грачева М. В. Вероятностные методы анализа рисков, http://www.ndc.ru/ru/press/pubs/depo/ \narchive/22/article5.htm (дата обращения 29.06.2009)\n[249] \nОрлов А. И. Теория принятия решений: Учеб, пособие. М.: Март. 2004. 656 с. http://oriovs.pp.ru (дата обра­\nщения 27.06.2009)\n[250] \nОрлов А. И. Высокие статистические технологии //Заводская лаборатория. 2003. Т. 69. № 11. с. 55—60. \nhttp://orlovs.pp.ru (дата обращения 27.06.2009)\n78"
        },
        {
            "page": 85,
            "page_content": "ГОСТР 53195.5—2010\nУДК 621.5:814.8:006.354 \nОКС13.1Ю. \nОКП 437000,437100.437200.\n13.220.01,13.310. \n43 7280.70 3000\n13.320.29.130.20.\n35.240\nКлючевые слова: безопасность функциональная, связанные с безопасностью зданий и сооружений систе­\nмы, методы и средства снижения риска, методы оценки соответствия\n79"
        },
        {
            "page": 86,
            "page_content": "Редактор И. В. Алферова \nТехнический редактор В. И. Прусакова \nКорректор Н. И. Гаврищук \nКомпьютерная верстка Т. Ф. Кузнецовой\nСдано о набор 13 09.2011. \nПодписано о печать 01.11.2011 \nФ ормат 6 0 х 8 4 ,/в. \nБумага \nоф сетная. \nГарнитура Ариап \nПечать оф сетная. Усп. печ. л . 9,77 \nУч.-иэд. л. 8,79. Тираж 141 s o . Эак 1062\nФГУП «СТАНДАРТИНФОРМ », 123995 Москва. Гранатный пер., 4. \nvw w .gostinfo.ru \ninfo-gigostinfo.ru\nНабрано и отпечатано в Калужской типограф ии стандартов, 248021 Калуга, ул. М осковская. 256.\nГОСТ Р 53195.5-2010"
        }
    ],
    "scope": "Устанавливает меры по снижению риска и методы оценки функциональной безопасности систем, связанных с безопасностью зданий и сооружений.",
    "keywords": [
        "функциональная безопасность",
        "здания",
        "сооружения",
        "системы",
        "снижение риска",
        "методы оценки"
    ],
    "revision": "Издание официальное",
    "confidence_scores": {
        "full_name": 0.95,
        "number": 0.98,
        "date_issue": 0.9,
        "type": 0.99,
        "category": 0.85,
        "revision": 0.8
    }
}